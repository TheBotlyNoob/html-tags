// generated by gen.rs + rustfmt - not in a build.rs because HTML tags don't change too often
#![no_std]
#[cfg(feature = "alloc")]
extern crate alloc;
/// The <strong><code>&lt;html&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents the root (top-level element) of an HTML document, so it is also referred to as the <em>root element</em>. All other elements must be descendants of this element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Html<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies the <a href="/en-US/docs/Glossary/URI">URI</a> of a resource manifest indicating resources that should be cached locally.</p>
    ///   
    pub manifest: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies the version of the HTML <a href="/en-US/docs/Glossary/Doctype">Document Type Definition</a> that governs the current document. This attribute is not needed, because it is redundant with the version information in the document type declaration.</p>
    ///   
    pub version: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies the <a href="/en-US/docs/Glossary/XML">XML</a> <a href="/en-US/docs/Glossary/Namespace">Namespace</a> of the document. Default value is <code>"http://www.w3.org/1999/xhtml"</code>. This is required in documents parsed with XML <a href="/en-US/docs/Glossary/Parser">parsers</a>, and optional in text/html documents.</p>
    ///   
    pub xmlns: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;base&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies the base URL to use for all <em>relative</em> URLs in a document. There can be only one <code>&lt;base&gt;</code> element in a document.
///
/// A document's used base URL can be accessed by scripts with <a href="/en-US/docs/Web/API/Node/baseURI"><code>Node.baseURI</code></a>. If the document has no <code>&lt;base&gt;</code> elements, then <code>baseURI</code> defaults to <a href="/en-US/docs/Web/API/Location/href"><code>location.href</code></a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Base<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>The base URL to be used throughout the document for relative URLs. Absolute and relative URLs are allowed.</p>
    ///   
    pub href: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>A <strong>keyword</strong> or <strong>author-defined name</strong> of the default <a href="/en-US/docs/Glossary/Browsing_context">browsing context</a> to show the results of navigation from <a href="/en-US/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/area"><code>&lt;area&gt;</code></a>, or <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> elements without explicit <code>target</code> attributes. The following keywords have special meanings:</p>
    ///     <ul>
    ///       <li><code>_self</code> (default): Show the result in the current browsing context.</li>
    ///       <li><code>_blank</code>: Show the result in a new, unnamed browsing context.</li>
    ///       <li><code>_parent</code>: Show the result in the parent browsing context of the current one, if the current page is inside a frame. If there is no parent, acts the same as <code>_self</code>.</li>
    ///       <li><code>_top</code>: Show the result in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent). If there is no parent, acts the same as <code>_self</code>.</li>
    ///     </ul>
    ///   
    pub target: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;head&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element contains machine-readable information (<a href="/en-US/docs/Glossary/Metadata">metadata</a>) about the document, like its <a href="/en-US/docs/Web/HTML/Element/title">title</a>, <a href="/en-US/docs/Web/HTML/Element/script">scripts</a>, and <a href="/en-US/docs/Web/HTML/Element/style">style sheets</a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Head<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="/en-US/docs/Glossary/URI">URI</a>s of one or more metadata profiles, separated by <a href="/en-US/docs/Glossary/Whitespace">white space</a>.</p>
    ///   
    pub profile: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
///
///   The <strong><code>&lt;link&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies relationships between the current document and an external resource.
///   This element is most commonly used to link to <a href="/en-US/docs/Glossary/CSS">stylesheets</a>, but is also used to establish site icons (both "favicon" style icons and icons for the home screen and apps on mobile devices) among other things.
///
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Link<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This attribute is only used when <code>rel="preload"</code> or <code>rel="prefetch"</code> has been set on the <code>&lt;link&gt;</code> element.
    ///       It specifies the type of content being loaded by the <code>&lt;link&gt;</code>, which is necessary for request matching, application of correct <a href="/en-US/docs/Web/HTTP/CSP">content security policy</a>, and setting of correct <a href="/en-US/docs/Web/HTTP/Headers/Accept"><code>Accept</code></a> request header.
    ///       Furthermore, <code>rel="preload"</code> uses this as a signal for request prioritization.
    ///       The table below lists the valid values for this attribute and the elements or resources they apply to.
    ///     </p>
    ///     <figure class="table-container"><table class="standard-table">
    ///       <thead>
    ///         <tr>
    ///           <th scope="col">Value</th>
    ///           <th scope="col">Applies To</th>
    ///         </tr>
    ///       </thead>
    ///       <tbody>
    ///         <tr>
    ///           <td>audio</td>
    ///           <td><code>&lt;audio&gt;</code> elements</td>
    ///         </tr>
    ///         <tr>
    ///           <td>document</td>
    ///           <td><code>&lt;iframe&gt;</code> and <code>&lt;frame&gt;</code> elements</td>
    ///         </tr>
    ///         <tr>
    ///           <td>embed</td>
    ///           <td><code>&lt;embed&gt;</code> elements</td>
    ///         </tr>
    ///         <tr>
    ///           <td>fetch</td>
    ///           <td>
    ///             <p>fetch, XHR</p>
    ///             <div class="notecard note" id="sect1">
    ///               <p>
    ///                 <strong>Note:</strong> This value also requires
    ///                 <code>&lt;link&gt;</code> to contain the crossorigin attribute.
    ///               </p>
    ///             </div>
    ///           </td>
    ///         </tr>
    ///         <tr>
    ///           <td>font</td>
    ///           <td>CSS @font-face</td>
    ///         </tr>
    ///         <tr>
    ///           <td>image</td>
    ///           <td>
    ///             <code>&lt;img&gt;</code> and <code>&lt;picture&gt;</code> elements with
    ///             srcset or imageset attributes, SVG <code>&lt;image&gt;</code> elements,
    ///             CSS <code>*-image</code> rules
    ///           </td>
    ///         </tr>
    ///         <tr>
    ///           <td>object</td>
    ///           <td><code>&lt;object&gt;</code> elements</td>
    ///         </tr>
    ///         <tr>
    ///           <td>script</td>
    ///           <td><code>&lt;script&gt;</code> elements, Worker <code>importScripts</code></td>
    ///         </tr>
    ///         <tr>
    ///           <td>style</td>
    ///           <td>
    ///             <code>&lt;link rel=stylesheet&gt;</code> elements, CSS
    ///             <code>@import</code>
    ///           </td>
    ///         </tr>
    ///         <tr>
    ///           <td>track</td>
    ///           <td><code>&lt;track&gt;</code> elements</td>
    ///         </tr>
    ///         <tr>
    ///           <td>video</td>
    ///           <td><code>&lt;video&gt;</code> elements</td>
    ///         </tr>
    ///         <tr>
    ///           <td>worker</td>
    ///           <td>Worker, SharedWorker</td>
    ///         </tr>
    ///       </tbody>
    ///     </table></figure>
    ///   
    pub as_: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>This attribute explicitly indicates that certain operations should be blocked on the fetching of an external resource. The operations that are to be blocked must be a space-separated list of blocking attributes listed below.</p>
    ///     <ul>
    ///       <li><code>render</code>: The rendering of content on the screen is blocked.</li>
    ///     </ul>
    ///   
    pub blocking: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicates whether <a href="/en-US/docs/Glossary/CORS">CORS</a> must be used when fetching the resource.
    ///       <a href="/en-US/docs/Web/HTML/CORS_enabled_image">CORS-enabled images</a> can be reused in the <a href="/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> element without being <em>tainted</em>.
    ///       The allowed values are:
    ///     </p>
    ///     <dl>
    ///       <dt id="anonymous"><code>anonymous</code></dt>
    ///       <dd>
    ///         <p>
    ///           A cross-origin request (i.e. with an <a href="/en-US/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication).
    ///           If the server does not give credentials to the origin site (by not setting the <a href="/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> HTTP header) the resource will be tainted and its usage restricted.
    ///         </p>
    ///       </dd>
    ///       <dt id="use-credentials"><code>use-credentials</code></dt>
    ///       <dd>
    ///         <p>
    ///           A cross-origin request (i.e. with an <code>Origin</code> HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed).
    ///           If the server does not give credentials to the origin site (through <a href="/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"><code>Access-Control-Allow-Credentials</code></a> HTTP header), the resource will be <em>tainted</em> and its usage restricted.
    ///         </p>
    ///       </dd>
    ///     </dl>
    ///     <p>
    ///       If the attribute is not present, the resource is fetched without a <a href="/en-US/docs/Glossary/CORS">CORS</a> request (i.e. without sending the <code>Origin</code> HTTP header), preventing its non-tainted usage. If invalid, it is handled as if the enumerated keyword <strong>anonymous</strong> was used.
    ///       See <a href="/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</a> for additional information.
    ///     </p>
    ///   
    pub crossorigin: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       For <code>rel="stylesheet"</code> only, the <code>disabled</code> Boolean attribute indicates whether the described stylesheet should be loaded and applied to the document.
    ///       If <code>disabled</code> is specified in the HTML when it is loaded, the stylesheet will not be loaded during page load.
    ///       Instead, the stylesheet will be loaded on-demand, if and when the <code>disabled</code> attribute is changed to <code>false</code> or removed.
    ///     </p>
    ///     <p>Setting the <code>disabled</code> property in the DOM causes the stylesheet to be removed from the document's <a href="/en-US/docs/Web/API/Document/styleSheets"><code>Document.styleSheets</code></a> list.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint of the relative priority to use when fetching a preloaded resource. Allowed values:</p>
    ///     <dl>
    ///       <dt id="high"><code>high</code></dt>
    ///       <dd>
    ///         <p>Signals a high-priority fetch relative to other resources of the same type.</p>
    ///       </dd>
    ///       <dt id="low"><code>low</code></dt>
    ///       <dd>
    ///         <p>Signals a low-priority fetch relative to other resources of the same type.</p>
    ///       </dd>
    ///       <dt id="auto"><code>auto</code></dt>
    ///       <dd>
    ///         <p>Default: Signals automatic determination of fetch priority relative to other resources of the same type.</p>
    ///       </dd>
    ///     </dl>
    ///   
    pub fetchpriority: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>This attribute specifies the <a href="/en-US/docs/Glossary/URL">URL</a> of the linked resource. A URL can be absolute or relative.</p>
    ///   
    pub href: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This attribute indicates the language of the linked resource.
    ///       It is purely advisory.
    ///       Allowed values are specified by <a target="_blank" class="external" href="https://datatracker.ietf.org/doc/html/rfc5646">RFC 5646: Tags for Identifying Languages (also known as BCP 47)</a>.
    ///       Use this attribute only if the <a href="/en-US/docs/Web/HTML/Element/a#href"><code>href</code></a> attribute is present.
    ///     </p>
    ///   
    pub hreflang: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>For <code>rel="preload"</code> and <code>as="image"</code> only, the <code>imagesizes</code> attribute is <a class="external" href="https://html.spec.whatwg.org/multipage/images.html#sizes-attribute" target="_blank">a sizes attribute</a> that indicates to preload the appropriate resource used by an <code>img</code> element with corresponding values for its <code>srcset</code> and <code>sizes</code> attributes.</p>
    ///   
    pub imagesizes: core::option::Option<&'life str>,
    ///
    ///     <p>For <code>rel="preload"</code> and <code>as="image"</code> only, the <code>imagesrcset</code> attribute is <a target="_blank" href="https://html.spec.whatwg.org/multipage/images.html#srcset-attribute" class="external">a sourceset attribute</a> that indicates to preload the appropriate resource used by an <code>img</code> element with corresponding values for its <code>srcset</code> and <code>sizes</code> attributes.</p>
    ///   
    pub imagesrcset: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Contains inline metadata — a base64-encoded cryptographic hash of the resource (file) you're telling the browser to fetch.
    ///       The browser can use this to verify that the fetched resource has been delivered free of unexpected manipulation.
    ///       See <a href="/en-US/docs/Web/Security/Subresource_Integrity">Subresource Integrity</a>.
    ///     </p>
    ///   
    pub integrity: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This attribute specifies the media that the linked resource applies to. Its value must be a media type / <a href="/en-US/docs/Web/CSS/Media_Queries">media query</a>.
    ///       This attribute is mainly useful when linking to external stylesheets — it allows the user agent to pick the best adapted one for the device it runs on.
    ///     </p>
    ///     <div id="sect2" class="notecard note">
    ///       <p><strong>Note:</strong></p>
    ///       <ul>
    ///         <li>
    ///           In HTML 4, this can only be a simple white-space-separated list of media description literals, i.e., <a href="/en-US/docs/Web/CSS/@media">media types and groups</a>, where defined and allowed as values for this attribute, such as <code>print</code>, <code>screen</code>, <code>aural</code>, <code>braille</code>.
    ///           HTML5 extended this to any kind of <a href="/en-US/docs/Web/CSS/Media_Queries">media queries</a>, which are a superset of the allowed values of HTML 4.
    ///         </li>
    ///         <li>Browsers not supporting <a href="/en-US/docs/Web/CSS/Media_Queries">CSS Media Queries</a> won't necessarily recognize the adequate link; do not forget to set fallback links, the restricted set of media queries defined in HTML 4.</li>
    ///       </ul>
    ///     </div>
    ///   
    pub media: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Identifies a resource that might be required by the next navigation and that the user agent should retrieve it.
    ///       This allows the user agent to respond faster when the resource is requested in the future.
    ///     </p>
    ///   
    pub prefetch: core::option::Option<&'life str>,
    ///
    ///     <p>A string indicating which referrer to use when fetching the resource:</p>
    ///     <ul>
    ///       <li><code>no-referrer</code> means that the <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent.</li>
    ///       <li>
    ///         <code>no-referrer-when-downgrade</code> means that no <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will be sent when navigating to an origin without TLS (HTTPS).
    ///         This is a user agent's default behavior, if no policy is otherwise specified.
    ///       </li>
    ///       <li><code>origin</code> means that the referrer will be the origin of the page, which is roughly the scheme, the host, and the port.</li>
    ///       <li><code>origin-when-cross-origin</code> means that navigating to other origins will be limited to the scheme, the host, and the port, while navigating on the same origin will include the referrer's path.</li>
    ///       <li>
    ///         <code>unsafe-url</code> means that the referrer will include the origin and the path (but not the fragment, password, or username).
    ///         This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins.
    ///       </li>
    ///     </ul>
    ///   
    pub referrerpolicy: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute names a relationship of the linked document to the current document. The attribute must be a space-separated list of <a href="/en-US/docs/Web/HTML/Attributes/rel">link type values</a>.</p>
    ///   
    pub rel: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This attribute defines the sizes of the icons for visual media contained in the resource.
    ///       It must be present only if the <a href="#rel"><code>rel</code></a> contains a value of <code>icon</code> or a non-standard type such as Apple's <code>apple-touch-icon</code>.
    ///       It may have the following values:
    ///     </p>
    ///     <ul>
    ///       <li><code>any</code>, meaning that the icon can be scaled to any size as it is in a vector format, like <code>image/svg+xml</code>.</li>
    ///       <li>a white-space separated list of sizes, each in the format <code>&lt;width in pixels&gt;x&lt;height in pixels&gt;</code> or <code>&lt;width in pixels&gt;X&lt;height in pixels&gt;</code>. Each of these sizes must be contained in the resource.</li>
    ///     </ul>
    ///     <div class="notecard note" id="sect3">
    ///       <p>
    ///         <strong>Note:</strong> Most icon formats are only able to store one single icon; therefore, most of the time, the <a href="#sizes"><code>sizes</code></a> attribute contains only one entry.
    ///         MS's ICO format does, as well as Apple's ICNS. ICO is more ubiquitous, so you should use this format if cross-browser support is a concern (especially for old IE versions).
    ///       </p>
    ///     </div>
    ///   
    pub sizes: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       The <code>title</code> attribute has special semantics on the <code>&lt;link&gt;</code> element.
    ///       When used on a <code>&lt;link rel="stylesheet"&gt;</code> it defines a <a href="/en-US/docs/Web/CSS/Alternative_style_sheets">default or an alternate stylesheet</a>.
    ///     </p>
    ///   
    pub title: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This attribute is used to define the type of the content linked to.
    ///       The value of the attribute should be a MIME type such as <strong>text/html</strong>, <strong>text/css</strong>, and so on.
    ///       The common use of this attribute is to define the type of stylesheet being referenced (such as <strong>text/css</strong>), but given that CSS is the only stylesheet language used on the web, not only is it possible to omit the <code>type</code> attribute, but is actually now recommended practice.
    ///       It is also used on <code>rel="preload"</code> link types, to make sure the browser only downloads file types that it supports.
    ///     </p>
    ///   
    pub type_: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;meta&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents <a href="/en-US/docs/Glossary/Metadata">metadata</a> that cannot be represented by other HTML meta-related elements, like <a href="/en-US/docs/Web/HTML/Element/base"><code>&lt;base&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/link"><code>&lt;link&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/script"><code>&lt;script&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/style"><code>&lt;style&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/title"><code>&lt;title&gt;</code></a>.
///
/// The type of metadata provided by the <code>&lt;meta&gt;</code> element can be one of the following:
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Meta<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>This attribute declares the document's character encoding. If the attribute is present, its value must be an ASCII case-insensitive match for the string "<code>utf-8</code>", because UTF-8 is the only valid encoding for HTML5 documents. <code>&lt;meta&gt;</code> elements which declare a character encoding must be located entirely within the first 1024 bytes of the document.</p>
    ///   
    pub charset: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains the value for the <a href="#http-equiv"><code>http-equiv</code></a> or <a href="#name"><code>name</code></a> attribute, depending on which is used.</p>
    ///   
    pub content: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a pragma directive. The attribute is named <code>http-equiv(alent)</code> because all the allowed values are names of particular HTTP headers:</p>
    ///     <ul>
    ///       <li>
    ///         <code>content-security-policy</code>
    ///         Allows page authors to define a <a href="/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">content policy</a> for the current page. Content policies mostly specify allowed server origins and script endpoints which help guard against cross-site scripting attacks.
    ///       </li>
    ///       <li>
    ///         <code>content-type</code>
    ///         Declares the <a href="/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME type</a> and the document's character encoding. The <code>content</code> attribute must have the value "<code>text/html; charset=utf-8</code>" if specified. This is equivalent to a <code>&lt;meta&gt;</code> element with the <a href="#charset"><code>charset</code></a> attribute specified and carries the same restriction on placement within the document. <strong>Note:</strong> Can only be used in documents served with a <code>text/html</code> — not in documents served with an XML MIME type.
    ///       </li>
    ///       <li>
    ///         <code>default-style</code>
    ///         Sets the name of the default <a href="/en-US/docs/Web/CSS">CSS style sheet</a> set.
    ///       </li>
    ///       <li>
    ///         <code>x-ua-compatible</code>
    ///         If specified, the <code>content</code> attribute must have the value "<code>IE=edge</code>". User agents are required to ignore this pragma.
    ///       </li>
    ///       <li><code>refresh</code> This instruction specifies:
    ///         <ul>
    ///           <li>The number of seconds until the page should be reloaded - only if the <a href="#content"><code>content</code></a> attribute contains a non-negative integer.</li>
    ///           <li>The number of seconds until the page should redirect to another - only if the <a href="#content"><code>content</code></a> attribute contains a non-negative integer followed by the string '<code>;url=</code>', and a valid URL.</li>
    ///         </ul>
    ///         <div id="sect2" class="notecard warning">
    ///           <p><strong>Warning:</strong></p>
    ///           <p>Pages set with a <code>refresh</code> value run the risk of having the time interval being too short. People navigating with the aid of assistive technology such as a screen reader may be unable to read through and understand the page's content before being automatically redirected. The abrupt, unannounced updating of the page content may also be disorienting for people experiencing low vision conditions.</p>
    ///           <ul>
    ///             <li><a href="/en-US/docs/Web/Accessibility/Understanding_WCAG/Operable#guideline_2.2_%E2%80%94_enough_time_provide_users_enough_time_to_read_and_use_content">MDN Understanding WCAG, Guideline 2.1 explanations</a></li>
    ///             <li><a href="/en-US/docs/Web/Accessibility/Understanding_WCAG/Understandable#guideline_3.2_%E2%80%94_predictable_make_web_pages_appear_and_operate_in_predictable_ways">MDN Understanding WCAG, Guideline 3.1 explanations</a></li>
    ///             <li><a class="external" target="_blank" href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-required-behaviors.html">Understanding Success Criterion 2.2.1 | W3C Understanding WCAG 2.0</a></li>
    ///             <li><a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/time-limits-postponed.html" class="external" target="_blank">Understanding Success Criterion 2.2.4 | W3C Understanding WCAG 2.0</a></li>
    ///             <li><a class="external" target="_blank" href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/consistent-behavior-no-extreme-changes-context.html">Understanding Success Criterion 3.2.5 | W3C Understanding WCAG 2.0</a></li>
    ///           </ul>
    ///         </div>
    ///       </li>
    ///     </ul>
    ///   
    pub http_equiv: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The <code>name</code> and <code>content</code> attributes can be used together to provide document metadata in terms of name-value pairs, with the <code>name</code> attribute giving the metadata name, and the <code>content</code> attribute giving the value.</p>
    ///     <p>See <a href="/en-US/docs/Web/HTML/Element/meta/name">standard metadata names</a> for details about the set of standard metadata names defined in the HTML specification.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;style&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the <code>&lt;style&gt;</code> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Style<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>This attribute explicitly indicates that certain operations should be blocked on the fetching of critical subresources. <a href="/en-US/docs/Web/CSS/@import"><code>@import</code></a>-ed stylesheets are generally considered as critical subresources, whereas <a href="/en-US/docs/Web/CSS/background-image"><code>background-image</code></a> and fonts are not.</p>
    ///     <ul>
    ///       <li><code>render</code>: The rendering of content on the screen is blocked.</li>
    ///     </ul>
    ///   
    pub blocking: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines which media the style should be applied to. Its value is a <a href="/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">media query</a>, which defaults to <code>all</code> if the attribute is missing.</p>
    ///   
    pub media: core::option::Option<&'life str>,
    ///
    ///     <p>A cryptographic nonce (number used once) used to allow inline styles in a <a href="/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src">style-src Content-Security-Policy</a>. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.</p>
    ///   
    pub nonce: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies <a href="/en-US/docs/Web/CSS/Alternative_style_sheets">alternative style sheet</a> sets.</p>
    ///   
    pub title: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;title&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines the document's title that is shown in a <a href="/en-US/docs/Glossary/Browser">browser</a>'s title bar or a page's tab. It only contains text; tags within the element are ignored.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Title<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;body&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents the content of an HTML document. There can be only one <code>&lt;body&gt;</code> element in a document.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Body<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Color of text for hyperlinks when selected.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/color"><code>color</code></a> property in conjunction with the <a href="/en-US/docs/Web/CSS/:active"><code>:active</code></a> pseudo-class instead.</strong>
    ///     </p>
    ///   
    pub alink: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>
    ///       URI of an image to use as a background.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/background"><code>background</code></a> property on the element instead.</strong>
    ///     </p>
    ///   
    pub background: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Background color for the document.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/background-color"><code>background-color</code></a> property on the element instead.</strong>
    ///     </p>
    ///   
    pub bgcolor: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       The margin of the bottom of the body.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/margin-bottom"><code>margin-bottom</code></a> property on the element instead.</strong>
    ///     </p>
    ///   
    pub bottommargin: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       The margin of the left of the body.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/margin-left"><code>margin-left</code></a> property on the element instead.</strong>
    ///     </p>
    ///   
    pub leftmargin: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Color of text for unvisited hypertext links.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/color"><code>color</code></a> property in conjunction with the <a href="/en-US/docs/Web/CSS/:link"><code>:link</code></a> pseudo-class instead.</strong>
    ///     </p>
    ///   
    pub link: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call after the user has printed the document.</p>
    ///   
    pub onafterprint: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the user requests printing of the document.</p>
    ///   
    pub onbeforeprint: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document is about to be unloaded.</p>
    ///   
    pub onbeforeunload: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document loses focus.</p>
    ///   
    pub onblur: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document fails to load properly.</p>
    ///   
    pub onerror: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document receives focus.</p>
    ///   
    pub onfocus: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the fragment identifier part (starting with the hash (<code>'#'</code>) character) of the document's current address has changed.</p>
    ///   
    pub onhashchange: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the preferred languages changed.</p>
    ///   
    pub onlanguagechange: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document has finished loading.</p>
    ///   
    pub onload: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document has received a message.</p>
    ///   
    pub onmessage: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when network communication has failed.</p>
    ///   
    pub onoffline: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when network communication has been restored.</p>
    ///   
    pub ononline: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the user has navigated session history.</p>
    ///   
    pub onpopstate: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the user has moved forward in undo transaction history.</p>
    ///   
    pub onredo: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document has been resized.</p>
    ///   
    pub onresize: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the storage area has changed.</p>
    ///   
    pub onstorage: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the user has moved backward in undo transaction history.</p>
    ///   
    pub onundo: core::option::Option<&'life str>,
    ///
    ///     <p>Function to call when the document is going away.</p>
    ///   
    pub onunload: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       The margin of the right of the body.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/margin-right"><code>margin-right</code></a> property on the element instead.</strong>
    ///     </p>
    ///   
    pub rightmargin: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Foreground color of text.
    ///       <strong>Do not use this attribute! Use CSS <a href="/en-US/docs/Web/CSS/color"><code>color</code></a> property on the element instead.</strong>
    ///     </p>
    ///   
    pub text: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       The margin of the top of the body.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/margin-top"><code>margin-top</code></a> property on the element instead.</strong>
    ///     </p>
    ///   
    pub topmargin: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Color of text for visited hypertext links.
    ///       <strong>Do not use this attribute! Use the CSS <a href="/en-US/docs/Web/CSS/color"><code>color</code></a> property in conjunction with the <a href="/en-US/docs/Web/CSS/:visited"><code>:visited</code></a> pseudo-class instead.</strong>
    ///     </p>
    ///   
    pub vlink: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;address&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element indicates that the enclosed HTML provides contact information for a person or people, or for an organization.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Address<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;article&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Article<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;aside&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Aside<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;footer&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a footer for its nearest ancestor <a href="/en-US/docs/Web/HTML/Content_categories#sectioning_content">sectioning content</a> or <a href="/en-US/docs/Web/HTML/Element/Heading_Elements#sectioning_root">sectioning root</a> element. A <code>&lt;footer&gt;</code> typically contains information about the author of the section, copyright data or links to related documents.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Footer<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;header&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Header<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;hgroup&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a heading and related content. It groups a single <a href="/en-US/docs/Web/HTML/Element/Heading_Elements"><code>&lt;h1&gt;–&lt;h6&gt;</code></a> element with one or more <a href="/en-US/docs/Web/HTML/Element/p"><code>&lt;p&gt;</code></a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Hgroup<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;main&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents the dominant content of the <a href="/en-US/docs/Web/HTML/Element/body"><code>&lt;body&gt;</code></a> of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Main<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;nav&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Nav<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;section&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Section<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;blockquote&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see <a href="#usage_notes">Notes</a> for how to change it). A URL for the source of the quotation may be given using the <code>cite</code> attribute, while a text representation of the source can be given using the <a href="/en-US/docs/Web/HTML/Element/cite"><code>&lt;cite&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Blockquote<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote.</p>
    ///   
    pub cite: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;dd&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element provides the description, definition, or value for the preceding term (<a href="/en-US/docs/Web/HTML/Element/dt"><code>&lt;dt&gt;</code></a>) in a description list (<a href="/en-US/docs/Web/HTML/Element/dl"><code>&lt;dl&gt;</code></a>).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Dd<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>If the value of this attribute is set to <code>yes</code>, the definition text will not wrap. The default value is <code>no</code>.</p>
    ///   
    pub nowrap: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;div&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is the generic container for flow content. It has no effect on the content or layout until styled in some way using <a href="/en-US/docs/Glossary/CSS">CSS</a> (e.g. styling is directly applied to it, or some kind of layout model like <a href="/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout">Flexbox</a> is applied to its parent element).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Div<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;dl&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a description list. The element encloses a list of groups of terms (specified using the <a href="/en-US/docs/Web/HTML/Element/dt"><code>&lt;dt&gt;</code></a> element) and descriptions (provided by <a href="/en-US/docs/Web/HTML/Element/dd"><code>&lt;dd&gt;</code></a> elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Dl<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;dt&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies a term in a description or definition list, and as such must be used inside a <a href="/en-US/docs/Web/HTML/Element/dl"><code>&lt;dl&gt;</code></a> element. It is usually followed by a <a href="/en-US/docs/Web/HTML/Element/dd"><code>&lt;dd&gt;</code></a> element; however, multiple <code>&lt;dt&gt;</code> elements in a row indicate several terms that are all defined by the immediate next <a href="/en-US/docs/Web/HTML/Element/dd"><code>&lt;dd&gt;</code></a> element.
///
/// The subsequent <a href="/en-US/docs/Web/HTML/Element/dd"><code>&lt;dd&gt;</code></a> (<strong>Description Details</strong>) element provides the definition or other related text associated with the term specified using <code>&lt;dt&gt;</code>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Dt<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;figcaption&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a caption or legend describing the rest of the contents of its parent <a href="/en-US/docs/Web/HTML/Element/figure"><code>&lt;figure&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Figcaption<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;figure&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents self-contained content, potentially with an optional caption, which is specified using the <a href="/en-US/docs/Web/HTML/Element/figcaption"><code>&lt;figcaption&gt;</code></a> element. The figure, its caption, and its contents are referenced as a single unit.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Figure<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;hr&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Hr<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the alignment of the rule on the page. If no value is specified, the default value is <code>left</code>.</p>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the color of the rule through color name or hexadecimal value.</p>
    ///   
    pub color: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the rule to have no shading.</p>
    ///   
    pub noshade: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the height, in pixels, of the rule.</p>
    ///   
    pub size: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the length of the rule on the page through a pixel or percentage value.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;li&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<a href="/en-US/docs/Web/HTML/Element/ol"><code>&lt;ol&gt;</code></a>), an unordered list (<a href="/en-US/docs/Web/HTML/Element/ul"><code>&lt;ul&gt;</code></a>), or a menu (<a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Li<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This character attribute indicates the numbering type:</p>
    ///     <ul>
    ///       <li><code>a</code>: lowercase letters</li>
    ///       <li><code>A</code>: uppercase letters</li>
    ///       <li><code>i</code>: lowercase Roman numerals</li>
    ///       <li><code>I</code>: uppercase Roman numerals</li>
    ///       <li><code>1</code>: numbers</li>
    ///     </ul>
    ///     <p>This type overrides the one used by its parent <a href="/en-US/docs/Web/HTML/Element/ol"><code>&lt;ol&gt;</code></a> element, if any.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> This attribute has been deprecated; use the CSS <a href="/en-US/docs/Web/CSS/list-style-type"><code>list-style-type</code></a> property instead.</p>
    ///     </div>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>This integer attribute indicates the current ordinal value of the list item as defined by the <a href="/en-US/docs/Web/HTML/Element/ol"><code>&lt;ol&gt;</code></a> element. The only allowed value for this attribute is a number, even if the list is displayed with Roman numerals or letters. List items that follow this one continue numbering from the value set. The <strong>value</strong> attribute has no meaning for unordered lists (<a href="/en-US/docs/Web/HTML/Element/ul"><code>&lt;ul&gt;</code></a>) or for menus (<a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a>).</p>
    ///   
    pub value: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;menu&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is described in the HTML specification as a semantic alternative to <a href="/en-US/docs/Web/HTML/Element/ul"><code>&lt;ul&gt;</code></a>, but treated by browsers (and exposed through the accessibility tree) as no different than <a href="/en-US/docs/Web/HTML/Element/ul"><code>&lt;ul&gt;</code></a>. It represents an unordered list of items (which are represented by <a href="/en-US/docs/Web/HTML/Element/li"><code>&lt;li&gt;</code></a> elements).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Menu<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;ol&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents an ordered list of items — typically rendered as a numbered list.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Ol<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute specifies that the list's items are in reverse order. Items will be numbered from high to low.</p>
    ///   
    pub reversed: core::option::Option<&'life str>,
    ///
    ///     <p>An integer to start counting from for the list items. Always an Arabic numeral (1, 2, 3, etc.), even when the numbering <code>type</code> is letters or Roman numerals. For example, to start numbering elements from the letter "d" or the Roman numeral "iv," use <code>start="4"</code>.</p>
    ///   
    pub start: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the numbering type:</p>
    ///     <ul>
    ///       <li><code>a</code> for lowercase letters</li>
    ///       <li><code>A</code> for uppercase letters</li>
    ///       <li><code>i</code> for lowercase Roman numerals</li>
    ///       <li><code>I</code> for uppercase Roman numerals</li>
    ///       <li><code>1</code> for numbers (default)</li>
    ///     </ul>
    ///     <p>The specified type is used for the entire list unless a different <a href="/en-US/docs/Web/HTML/Element/li#type"><code>type</code></a> attribute is used on an enclosed <a href="/en-US/docs/Web/HTML/Element/li"><code>&lt;li&gt;</code></a> element.</p>
    ///     <div id="sect1" class="notecard note">
    ///       <p><strong>Note:</strong> Unless the type of the list number matters (like legal or technical documents where items are referenced by their number/letter), use the CSS <a href="/en-US/docs/Web/CSS/list-style-type"><code>list-style-type</code></a> property instead.</p>
    ///     </div>
    ///   
    pub type_: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;p&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.
///
/// Paragraphs are <a href="/en-US/docs/Web/HTML/Block-level_elements">block-level elements</a>, and notably will automatically close if another block-level element is parsed before the closing <code>&lt;/p&gt;</code> tag. See "Tag omission" below.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct P<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;pre&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or <a href="https://en.wikipedia.org/wiki/Monospaced_font" class="external" target="_blank">monospaced</a>, font. Whitespace inside this element is displayed as written.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Pre<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>Contains the <em>preferred</em> count of characters that a line should have. It was a non-standard synonym of <a href="#width"><code>width</code></a>. To achieve such an effect, use CSS <a href="/en-US/docs/Web/CSS/width"><code>width</code></a> instead.</p>
    ///   
    pub cols: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Contains the <em>preferred</em> count of characters that a line should have. Though technically still implemented, this attribute has no visual effect; to achieve such an effect, use CSS <a href="/en-US/docs/Web/CSS/width"><code>width</code></a> instead.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    ///
    ///     <p>Is a <em>hint</em> indicating how the overflow must happen. In modern browser this hint is ignored and no visual effect results in its present; to achieve such an effect, use CSS <a href="/en-US/docs/Web/CSS/white-space"><code>white-space</code></a> instead.</p>
    ///   
    pub wrap: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;ul&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents an unordered list of items, typically rendered as a bulleted list.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Ul<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the <a href="/en-US/docs/Glossary/User_agent">user agent</a>, and it doesn't work in all browsers.</p>
    ///     <div id="sect1" class="notecard warning">
    ///       <p><strong>Warning:</strong> Do not use this attribute, as it has been deprecated: use <a href="/en-US/docs/Web/CSS">CSS</a> instead. To give a similar effect as the <code>compact</code> attribute, the CSS property <a href="/en-US/docs/Web/CSS/line-height"><code>line-height</code></a> can be used with a value of <code>80%</code>.</p>
    ///     </div>
    ///   
    pub compact: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute sets the bullet style for the list. The values defined under HTML3.2 and the transitional version of HTML 4.0/4.01 are:</p>
    ///     <ul>
    ///       <li><code>circle</code></li>
    ///       <li><code>disc</code></li>
    ///       <li><code>square</code></li>
    ///     </ul>
    ///     <p>A fourth bullet type has been defined in the WebTV interface, but not all browsers support it: <code>triangle</code>.</p>
    ///     <p>If not present and if no <a href="/en-US/docs/Web/CSS">CSS</a> <a href="/en-US/docs/Web/CSS/list-style-type"><code>list-style-type</code></a> property applies to the element, the user agent selects a bullet type depending on the nesting level of the list.</p>
    ///     <div id="sect2" class="notecard warning">
    ///       <p><strong>Warning:</strong> Do not use this attribute, as it has been deprecated; use the <a href="/en-US/docs/Web/CSS">CSS</a> <a href="/en-US/docs/Web/CSS/list-style-type"><code>list-style-type</code></a> property instead.</p>
    ///     </div>
    ///   
    pub type_: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;a&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element (or <em>anchor</em> element), with <a href="#href">its <code>href</code> attribute</a>, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.
///
/// Content within each <code>&lt;a&gt;</code> <em>should</em> indicate the link's destination. If the <code>href</code> attribute is present, pressing the enter key while focused on the <code>&lt;a&gt;</code> element will activate it.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct A<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>Causes the browser to treat the linked URL as a download. Can be used with or without a <code>filename</code> value:</p>
    ///     <ul>
    ///       <li>Without a value, the browser will suggest a filename/extension, generated from various sources:
    ///         <ul>
    ///           <li>The <a href="/en-US/docs/Web/HTTP/Headers/Content-Disposition"><code>Content-Disposition</code></a> HTTP header</li>
    ///           <li>The final segment in the URL <a href="/en-US/docs/Web/API/URL/pathname">path</a></li>
    ///           <li>The <a href="/en-US/docs/Glossary/MIME_type">media type</a> (from the <a href="/en-US/docs/Web/HTTP/Headers/Content-Type"><code>Content-Type</code></a> header, the start of a <a href="/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs"><code>data:</code> URL</a>, or <a href="/en-US/docs/Web/API/Blob/type"><code>Blob.type</code></a> for a <a href="/en-US/docs/Web/API/URL/createObjectURL"><code>blob:</code> URL</a>)</li>
    ///         </ul>
    ///       </li>
    ///       <li><code>filename</code>: defining a value suggests it as the filename. <code>/</code> and <code>\</code> characters are converted to underscores (<code>_</code>). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.</li>
    ///     </ul>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong></p>
    ///       <ul>
    ///         <li><code>download</code> only works for <a href="/en-US/docs/Web/Security/Same-origin_policy">same-origin URLs</a>, or the <code>blob:</code> and <code>data:</code> schemes.</li>
    ///         <li>How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself.</li>
    ///         <li>If the <code>Content-Disposition</code> header has different information from the <code>download</code> attribute, resulting behavior may differ:
    ///           <ul>
    ///             <li>If the header specifies a <code>filename</code>, it takes priority over a filename specified in the <code>download</code> attribute.</li>
    ///             <li>If the header specifies a disposition of <code>inline</code>, Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline.</li>
    ///           </ul>
    ///         </li>
    ///       </ul>
    ///     </div>
    ///   
    pub download: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers:</p>
    ///     <ul>
    ///       <li>Sections of a page with document fragments</li>
    ///       <li>Specific text portions with <a href="/en-US/docs/Web/Text_fragments">text fragments</a></li>
    ///       <li>Pieces of media files with media fragments</li>
    ///       <li>Telephone numbers with <code>tel:</code> URLs</li>
    ///       <li>Email addresses with <code>mailto:</code> URLs</li>
    ///       <li>While web browsers may not support other URL schemes, websites can with <a href="/en-US/docs/Web/API/Navigator/registerProtocolHandler"><code>registerProtocolHandler()</code></a></li>
    ///     </ul>
    ///   
    pub href: core::option::Option<&'life str>,
    ///
    ///     <p>Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as <a href="/en-US/docs/Web/HTML/Global_attributes/lang">the global <code>lang</code> attribute</a>.</p>
    ///   
    pub hreflang: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of URLs. When the link is followed, the browser will send <a href="/en-US/docs/Web/HTTP/Methods/POST"><code>POST</code></a> requests with the body <code>PING</code> to the URLs. Typically for tracking.</p>
    ///   
    pub ping: core::option::Option<&'life str>,
    ///
    ///     <p>How much of the <a href="/en-US/docs/Web/HTTP/Headers/Referer">referrer</a> to send when following the link.</p>
    ///     <ul>
    ///       <li><code>no-referrer</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent.</li>
    ///       <li><code>no-referrer-when-downgrade</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent to <a href="/en-US/docs/Glossary/Origin">origin</a>s without <a href="/en-US/docs/Glossary/TLS">TLS</a> (<a href="/en-US/docs/Glossary/HTTPS">HTTPS</a>).</li>
    ///       <li><code>origin</code>: The sent referrer will be limited to the origin of the referring page: its <a href="/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL">scheme</a>, <a href="/en-US/docs/Glossary/Host">host</a>, and <a href="/en-US/docs/Glossary/Port">port</a>.</li>
    ///       <li><code>origin-when-cross-origin</code>: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.</li>
    ///       <li><code>same-origin</code>: A referrer will be sent for <a href="/en-US/docs/Glossary/Same-origin_policy">same origin</a>, but cross-origin requests will contain no referrer information.</li>
    ///       <li><code>strict-origin</code>: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>strict-origin-when-cross-origin</code> (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>unsafe-url</code>: The referrer will include the origin <em>and</em> the path (but not the <a href="/en-US/docs/Web/API/HTMLAnchorElement/hash">fragment</a>, <a href="/en-US/docs/Web/API/HTMLAnchorElement/password">password</a>, or <a href="/en-US/docs/Web/API/HTMLAnchorElement/username">username</a>). <strong>This value is unsafe</strong>, because it leaks origins and paths from TLS-protected resources to insecure origins.</li>
    ///     </ul>
    ///   
    pub referrerpolicy: core::option::Option<&'life str>,
    ///
    ///     <p>The relationship of the linked URL as space-separated link types.</p>
    ///   
    pub rel: core::option::Option<&'life str>,
    ///
    ///     <p>Where to display the linked URL, as the name for a <em>browsing context</em> (a tab, window, or <a href="/en-US/docs/Web/HTML/Element/iframe"><code>&lt;iframe&gt;</code></a>). The following keywords have special meanings for where to load the URL:</p>
    ///     <ul>
    ///       <li><code>_self</code>: the current browsing context. (Default)</li>
    ///       <li><code>_blank</code>: usually a new tab, but users can configure browsers to open a new window instead.</li>
    ///       <li><code>_parent</code>: the parent browsing context of the current one. If no parent, behaves as <code>_self</code>.</li>
    ///       <li><code>_top</code>: the topmost browsing context (the "highest" context that's an ancestor of the current one). If no ancestors, behaves as <code>_self</code>.</li>
    ///     </ul>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong> Setting <code>target="_blank"</code> on <code>&lt;a&gt;</code> elements implicitly provides the same <code>rel</code> behavior as setting <a href="/en-US/docs/Web/HTML/Attributes/rel/noopener"><code>rel="noopener"</code></a> which does not set <code>window.opener</code>.</p>
    ///     </div>
    ///   
    pub target: core::option::Option<&'life str>,
    ///
    ///     <p>Hints at the linked URL's format with a <a href="/en-US/docs/Glossary/MIME_type">MIME type</a>. No built-in functionality.</p>
    ///   
    pub type_: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;abbr&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents an abbreviation or acronym.
///
/// When including an abbreviation or acronym, provide a full expansion of the term in plain text on first use, along with the <code>&lt;abbr&gt;</code> to mark up the abbreviation. This informs the user what the abbreviation or acronym means.
///
/// The optional <a href="/en-US/docs/Web/HTML/Global_attributes#title"><code>title</code></a> attribute can provide an expansion for the abbreviation or acronym when a full expansion is not present. This provides a hint to user agents on how to announce/display the content while informing all users what the abbreviation means. If present, <code>title</code> must contain this full description and nothing else.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Abbr<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;b&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use <code>&lt;b&gt;</code> for styling text or granting importance. If you wish to create boldface text, you should use the CSS <a href="/en-US/docs/Web/CSS/font-weight"><code>font-weight</code></a> property. If you wish to indicate an element is of special importance, you should use the <a href="/en-US/docs/Web/HTML/Element/strong"><code>&lt;strong&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct B<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;bdi&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Bdi<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;bdo&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element overrides the current directionality of text, so that the text within is rendered in a different direction.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Bdo<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>The direction in which text should be rendered in this element's contents. Possible values are:</p>
    ///     <ul>
    ///       <li><code>ltr</code>: Indicates that the text should go in a left-to-right direction.</li>
    ///       <li><code>rtl</code>: Indicates that the text should go in a right-to-left direction.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;br&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Br<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates where to begin the next line after the break.</p>
    ///   
    pub clear: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;cite&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Cite<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;code&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the <a href="/en-US/docs/Glossary/User_agent">user agent's</a> default monospace font.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Code<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;data&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the <a href="/en-US/docs/Web/HTML/Element/time"><code>&lt;time&gt;</code></a> element must be used.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Data<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the machine-readable translation of the content of the element.</p>
    ///   
    pub value: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;dfn&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor <a href="/en-US/docs/Web/HTML/Element/p"><code>&lt;p&gt;</code></a> element, the <a href="/en-US/docs/Web/HTML/Element/dt"><code>&lt;dt&gt;</code></a>/<a href="/en-US/docs/Web/HTML/Element/dd"><code>&lt;dd&gt;</code></a> pairing, or the nearest <a href="/en-US/docs/Web/HTML/Element/section"><code>&lt;section&gt;</code></a> ancestor of the <code>&lt;dfn&gt;</code> element, is considered to be the definition of the term.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Dfn<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;em&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element marks text that has stress emphasis. The <code>&lt;em&gt;</code> element can be nested, with each level of nesting indicating a greater degree of emphasis.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Em<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;i&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the <code>&lt;i&gt;</code> naming of this element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct I<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;kbd&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the <a href="/en-US/docs/Glossary/User_agent">user agent</a> defaults to rendering the contents of a <code>&lt;kbd&gt;</code> element using its default monospace font, although this is not mandated by the HTML standard.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Kbd<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;mark&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents text which is <strong>marked</strong> or <strong>highlighted</strong> for reference or notation purposes due to the marked passage's relevance in the enclosing context.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Mark<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;q&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the <a href="/en-US/docs/Web/HTML/Element/blockquote"><code>&lt;blockquote&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Q<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>The value of this attribute is a URL that designates a source document or message for the information quoted. This attribute is intended to point to information explaining the context or the reference for the quote.</p>
    ///   
    pub cite: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;rp&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the <a href="/en-US/docs/Web/HTML/Element/ruby"><code>&lt;ruby&gt;</code></a> element. One <code>&lt;rp&gt;</code> element should enclose each of the opening and closing parentheses that wrap the <a href="/en-US/docs/Web/HTML/Element/rt"><code>&lt;rt&gt;</code></a> element that contains the annotation's text.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Rp<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;rt&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The <code>&lt;rt&gt;</code> element must always be contained within a <a href="/en-US/docs/Web/HTML/Element/ruby"><code>&lt;ruby&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Rt<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;ruby&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.
///
/// The term <em>ruby</em> originated as <a class="external" target="_blank" href="https://en.wikipedia.org/wiki/Agate_(typography)">a unit of measurement used by typesetters</a>, representing the smallest size that text can be printed on newsprint while remaining legible.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Ruby<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;s&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element renders text with a strikethrough, or a line through it. Use the <code>&lt;s&gt;</code> element to represent things that are no longer relevant or no longer accurate. However, <code>&lt;s&gt;</code> is not appropriate when indicating document edits; for that, use the <a href="/en-US/docs/Web/HTML/Element/del"><code>&lt;del&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/ins"><code>&lt;ins&gt;</code></a> elements, as appropriate.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct S<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;samp&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as <a class="external" target="_blank" href="https://en.wikipedia.org/wiki/Courier_(typeface)">Courier</a> or Lucida Console).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Samp<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;small&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from <code>small</code> to <code>x-small</code>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Small<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;span&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the <a href="/en-US/docs/Web/HTML/Global_attributes#class"><code>class</code></a> or <a href="/en-US/docs/Web/HTML/Global_attributes#id"><code>id</code></a> attributes), or because they share attribute values, such as <a href="/en-US/docs/Web/HTML/Global_attributes#lang"><code>lang</code></a>. It should be used only when no other semantic element is appropriate. <code>&lt;span&gt;</code> is very much like a <a href="/en-US/docs/Web/HTML/Element/div"><code>&lt;div&gt;</code></a> element, but <a href="/en-US/docs/Web/HTML/Element/div"><code>&lt;div&gt;</code></a> is a <a href="/en-US/docs/Web/HTML/Block-level_elements">block-level element</a> whereas a <code>&lt;span&gt;</code> is an <a href="/en-US/docs/Web/HTML/Inline_elements">inline element</a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Span<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;strong&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Strong<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;sub&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Sub<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;sup&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Sup<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;time&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a specific period in time. It may include the <code>datetime</code> attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders.
///
/// It may represent one of the following:
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Time<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>This attribute indicates the time and/or date of the element and must be in one of the formats described below.</p>
    ///   
    pub datetime: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;u&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct U<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;var&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Var<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;wbr&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Wbr<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;area&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines an area inside an image map that has predefined clickable areas. An <em>image map</em> allows geometric areas on an image to be associated with <a href="/en-US/docs/Glossary/Hyperlink">hypertext links</a>.
///
/// This element is used only within a <a href="/en-US/docs/Web/HTML/Element/map"><code>&lt;map&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Area<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       A text string alternative to display on browsers that do not display images.
    ///       The text should be phrased so that it presents the user with the same kind of choice as the image would offer when displayed without the alternative text.
    ///       This attribute is required only if the <a href="#href"><code>href</code></a> attribute is used.
    ///     </p>
    ///   
    pub alt: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       The <code>coords</code> attribute details the coordinates of the <a href="#shape"><code>shape</code></a> attribute in size, shape, and placement of an <code>&lt;area&gt;</code>.
    ///       This attribute must not be used if <code>shape</code> is set to <code>default</code>.
    ///     </p>
    ///     <ul>
    ///       <li>
    ///         <code>rect</code>: the value is <code>x1,y1,x2,y2</code>.
    ///         The value specifies the coordinates of the top-left and bottom-right corner of the rectangle.
    ///         For example, in <code>&lt;area shape="rect" coords="0,0,253,27" href="#" target="_blank" alt="Mozilla"&gt;</code> the coordinates are <code>0,0</code> and <code>253,27</code>, indicating the top-left and bottom-right corners of the rectangle, respectively.
    ///       </li>
    ///       <li>
    ///         <code>circle</code>: the value is <code>x,y,radius</code>. Value specifies the coordinates of the circle center and the radius.
    ///         For example: <code>&lt;area shape="circle" coords="130,136,60" href="#" target="_blank" alt="MDN"&gt;</code>
    ///       </li>
    ///       <li>
    ///         <code>poly</code>: the value is <code>x1,y1,x2,y2,..,xn,yn</code>. Value specifies the coordinates of the edges of the polygon.
    ///         If the first and last coordinate pairs are not the same, the browser will add the last coordinate pair to close the polygon
    ///       </li>
    ///     </ul>
    ///     <p>The values are numbers of CSS pixels.</p>
    ///   
    pub coords: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This attribute, if present, indicates that the author intends the hyperlink to be used for downloading a resource.
    ///       See <a href="/en-US/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a> for a full description of the <a href="/en-US/docs/Web/HTML/Element/a#download"><code>download</code></a> attribute.
    ///     </p>
    ///   
    pub download: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>
    ///       The hyperlink target for the area.
    ///       Its value is a valid URL.
    ///       This attribute may be omitted; if so, the <code>&lt;area&gt;</code> element does not represent a hyperlink.
    ///     </p>
    ///   
    pub href: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Indicates the language of the linked resource. Allowed values are defined by <a class="external" target="_blank" href="https://datatracker.ietf.org/doc/html/rfc5646">RFC 5646: Tags for Identifying Languages (also known as BCP 47)</a>.
    ///       Use this attribute only if the <a href="#href"><code>href</code></a> attribute is present.
    ///     </p>
    ///   
    pub hreflang: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Contains a space-separated list of URLs to which, when the hyperlink is followed, <a href="/en-US/docs/Web/HTTP/Methods/POST"><code>POST</code></a> requests with the body <code>PING</code> will be sent by the browser (in the background).
    ///       Typically used for tracking.
    ///     </p>
    ///   
    pub ping: core::option::Option<&'life str>,
    ///
    ///     <p>A string indicating which referrer to use when fetching the resource:</p>
    ///     <ul>
    ///       <li><code>no-referrer</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent.</li>
    ///       <li><code>no-referrer-when-downgrade</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent to <a href="/en-US/docs/Glossary/Origin">origin</a>s without <a href="/en-US/docs/Glossary/TLS">TLS</a> (<a href="/en-US/docs/Glossary/HTTPS">HTTPS</a>).</li>
    ///       <li><code>origin</code>: The sent referrer will be limited to the origin of the referring page: its <a href="/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL">scheme</a>, <a href="/en-US/docs/Glossary/Host">host</a>, and <a href="/en-US/docs/Glossary/Port">port</a>.</li>
    ///       <li><code>origin-when-cross-origin</code>: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.</li>
    ///       <li><code>same-origin</code>: A referrer will be sent for <a href="/en-US/docs/Glossary/Same-origin_policy">same origin</a>, but cross-origin requests will contain no referrer information.</li>
    ///       <li><code>strict-origin</code>: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>strict-origin-when-cross-origin</code> (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).</li>
    ///       <li>
    ///         <code>unsafe-url</code>: The referrer will include the origin <em>and</em> the path (but not the <a href="/en-US/docs/Web/API/HTMLAnchorElement/hash">fragment</a>, <a href="/en-US/docs/Web/API/HTMLAnchorElement/password">password</a>, or <a href="/en-US/docs/Web/API/HTMLAnchorElement/username">username</a>).
    ///         <strong>This value is unsafe</strong>, because it leaks origins and paths from TLS-protected resources to insecure origins.
    ///       </li>
    ///     </ul>
    ///   
    pub referrerpolicy: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       For anchors containing the <a href="#href"><code>href</code></a> attribute, this attribute specifies the relationship of the target object to the link object.
    ///       The value is a space-separated list of link types.
    ///       The values and their semantics will be registered by some authority that might have meaning to the document author.
    ///       The default relationship, if no other is given, is void. Use this attribute only if the <a href="#href"><code>href</code></a> attribute is present.
    ///     </p>
    ///   
    pub rel: core::option::Option<&'life str>,
    ///
    ///     <p>The shape of the associated hot spot. The specifications for HTML defines the values <code>rect</code>, which defines a rectangular region; <code>circle</code>, which defines a circular region; <code>poly</code>, which defines a polygon; and <code>default</code>, which indicates the entire region beyond any defined shapes.</p>
    ///   
    pub shape: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       A keyword or author-defined name of the <a href="/en-US/docs/Glossary/Browsing_context">browsing context</a> to display the linked resource.
    ///       The following keywords have special meanings:
    ///     </p>
    ///     <ul>
    ///       <li><code>_self</code> (default): Show the resource in the current browsing context.</li>
    ///       <li><code>_blank</code>: Show the resource in a new, unnamed browsing context.</li>
    ///       <li>
    ///         <code>_parent</code>: Show the resource in the parent browsing context of the current one, if the current page is inside a frame.
    ///         If there is no parent, acts the same as <code>_self</code>.
    ///       </li>
    ///       <li>
    ///         <code>_top</code>: Show the resource in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent).
    ///         If there is no parent, acts the same as <code>_self</code>.
    ///       </li>
    ///     </ul>
    ///     <p>Use this attribute only if the <a href="#href"><code>href</code></a> attribute is present.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> Setting <code>target="_blank"</code> on <code>&lt;area&gt;</code> elements implicitly provides the same <code>rel</code> behavior as setting <a href="/en-US/docs/Web/HTML/Attributes/rel/noopener"><code>rel="noopener"</code></a> which does not set <code>window.opener</code>. See <a href="#browser_compatibility">browser compatibility</a> for support status.</p>
    ///     </div>
    ///   
    pub target: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;audio&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the <code>src</code> attribute or the <a href="/en-US/docs/Web/HTML/Element/source"><code>&lt;source&gt;</code></a> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a <a href="/en-US/docs/Web/API/MediaStream"><code>MediaStream</code></a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Audio<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our <a href="/en-US/docs/Web/Media/Autoplay_guide">autoplay guide</a> for additional information about how to properly use autoplay.</p>
    ///     </div>
    ///   
    pub autoplay: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback.</p>
    ///   
    pub controls: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="https://wicg.github.io/controls-list/explainer.html" class="external" target="_blank"><code>controlslist</code></a> attribute, when specified, helps the browser select what controls to show for the <code>audio</code> element whenever the browser shows its own set of controls (that is, when the <code>controls</code> attribute is specified).</p>
    ///     <p>The allowed values are <code>nodownload</code>, <code>nofullscreen</code> and <code>noremoteplayback</code>.</p>
    ///   
    pub controlslist: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicates whether to use CORS to fetch the related audio file. <a href="/en-US/docs/Web/HTML/CORS_enabled_image">CORS-enabled resources</a> can be reused in the <a href="/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> element without being <em>tainted</em>. The allowed values are:</p>
    ///     <dl>
    ///       <dt id="anonymous"><code>anonymous</code></dt>
    ///       <dd>
    ///         <p>Sends a cross-origin request without a credential. In other words, it sends the <code>Origin:</code> HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the <code>Access-Control-Allow-Origin:</code> HTTP header), the resource will be <em>tainted</em>, and its usage restricted.</p>
    ///       </dd>
    ///       <dt id="use-credentials"><code>use-credentials</code></dt>
    ///       <dd>
    ///         <p>Sends a cross-origin request with a credential. In other words, it sends the <code>Origin:</code> HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through <code>Access-Control-Allow-Credentials:</code> HTTP header), the resource will be <em>tainted</em> and its usage restricted.</p>
    ///       </dd>
    ///     </dl>
    ///     <p>When not present, the resource is fetched without a CORS request (i.e. without sending the <code>Origin:</code> HTTP header), preventing its non-tainted use in <a href="/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> elements. If invalid, it is handled as if the enumerated keyword <strong>anonymous</strong> was used. See <a href="/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</a> for additional information.</p>
    ///   
    pub crossorigin: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). See <a href="https://www.w3.org/TR/remote-playback/#the-disableremoteplayback-attribute" class="external" target="_blank">this proposed specification</a> for more information.</p>
    ///     <div id="sect2" class="notecard note">
    ///       <p><strong>Note:</strong> In Safari, you can use <a href="https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AirPlayGuide/OptingInorOutofAirPlay/OptingInorOutofAirPlay.html" class="external" target="_blank"><code>x-webkit-airplay="deny"</code></a> as a fallback.</p>
    ///     </div>
    ///   
    pub disableremoteplayback: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio.</p>
    ///   
    pub loop_: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is <code>false</code>.</p>
    ///   
    pub muted: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values:</p>
    ///     <ul>
    ///       <li><code>none</code>: Indicates that the audio should not be preloaded.</li>
    ///       <li><code>metadata</code>: Indicates that only audio metadata (e.g. length) is fetched.</li>
    ///       <li><code>auto</code>: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it.</li>
    ///       <li><em>empty string</em>: A synonym of the <code>auto</code> value.</li>
    ///     </ul>
    ///     <p>The default value is different for each browser. The spec advises it to be set to <code>metadata</code>.</p>
    ///     <div class="notecard note" id="sect3">
    ///       <p><strong>Note:</strong></p>
    ///       <ul>
    ///         <li>The <code>autoplay</code> attribute has precedence over <code>preload</code>. If <code>autoplay</code> is specified, the browser would obviously need to start downloading the audio for playback.</li>
    ///         <li>The browser is not forced by the specification to follow the value of this attribute; it is a mere hint.</li>
    ///       </ul>
    ///     </div>
    ///   
    pub preload: core::option::Option<&'life str>,
    ///
    ///     <p>The URL of the audio to embed. This is subject to <a href="/en-US/docs/Web/HTTP/CORS">HTTP access controls</a>. This is optional; you may instead use the <a href="/en-US/docs/Web/HTML/Element/source"><code>&lt;source&gt;</code></a> element within the audio block to specify the audio to embed.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;img&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element embeds an image into the document.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Img<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Defines an alternative text description of the image.</p>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong> Browsers do not always display images. There are a number of situations in which a browser might not display images, such as:</p>
    ///       <ul>
    ///         <li>Non-visual browsers (such as those used by people with visual impairments)</li>
    ///         <li>The user chooses not to display images (saving bandwidth, privacy reasons)</li>
    ///         <li>The image is invalid or an <a href="#supported_image_formats">unsupported type</a></li>
    ///       </ul>
    ///       <p>In these cases, the browser may replace the image with the text in the element's <code>alt</code> attribute. For these reasons and others, provide a useful value for <code>alt</code> whenever possible.</p>
    ///     </div>
    ///     <p>Setting this attribute to an empty string (<code>alt=""</code>) indicates that this image is <em>not</em> a key part of the content (it's decoration or a tracking pixel), and that non-visual browsers may omit it from <a href="/en-US/docs/Glossary/Rendering_engine">rendering</a>. Visual browsers will also hide the broken image icon if the <code>alt</code> is empty and the image failed to display.</p>
    ///     <p>This attribute is also used when copying and pasting the image to text, or saving a linked image to a bookmark.</p>
    ///   
    pub alt: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates if the fetching of the image must be done using a <a href="/en-US/docs/Glossary/CORS">CORS</a> request. Image data from a <a href="/en-US/docs/Web/HTML/CORS_enabled_image">CORS-enabled image</a> returned from a CORS request can be reused in the <a href="/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> element without being marked "<a href="/en-US/docs/Web/HTML/CORS_enabled_image#what_is_a_tainted_canvas">tainted</a>".</p>
    ///     <p>If the <code>crossorigin</code> attribute is <em>not</em> specified, then a non-CORS request is sent (without the <a href="/en-US/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in <a href="/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> elements.</p>
    ///     <p>If the <code>crossorigin</code> attribute <em>is</em> specified, then a CORS request is sent (with the <a href="/en-US/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any <a href="/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> response header, or by not including the site's origin in any <a href="/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><code>Access-Control-Allow-Origin</code></a> response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console.</p>
    ///     <p>Allowed values:</p>
    ///     <dl>
    ///       <dt id="anonymous"><code>anonymous</code></dt>
    ///       <dd>
    ///         <p>A CORS request is sent with credentials omitted (that is, no <a href="/en-US/docs/Glossary/Cookie">cookies</a>, <a target="_blank" href="https://datatracker.ietf.org/doc/html/rfc5280" class="external">X.509 certificates</a>, or <a href="/en-US/docs/Web/HTTP/Headers/Authorization"><code>Authorization</code></a> request header).</p>
    ///       </dd>
    ///       <dt id="use-credentials"><code>use-credentials</code></dt>
    ///       <dd>
    ///         <p>The CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the <code>Authorization</code> request header). If the server does not opt into sharing credentials with the origin site (by sending back the <code>Access-Control-Allow-Credentials: true</code> response header), then the browser marks the image as tainted and restricts access to its image data.</p>
    ///       </dd>
    ///     </dl>
    ///     <p>If the attribute has an invalid value, browsers handle it as if the <code>anonymous</code> value was used. See <a href="/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</a> for additional information.</p>
    ///   
    pub crossorigin: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>Provides an image decoding hint to the browser. Allowed values:</p>
    ///     <dl>
    ///       <dt id="sync"><code>sync</code></dt>
    ///       <dd>
    ///         <p>Decode the image synchronously, for atomic presentation with other content.</p>
    ///       </dd>
    ///       <dt id="async"><code>async</code></dt>
    ///       <dd>
    ///         <p>Decode the image asynchronously, to reduce delay in presenting other content.</p>
    ///       </dd>
    ///       <dt id="auto"><code>auto</code></dt>
    ///       <dd>
    ///         <p>Default: no preference for the decoding mode. The browser decides what is best for the user.</p>
    ///       </dd>
    ///     </dl>
    ///   
    pub decoding: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Marks the image for observation by the <a href="/en-US/docs/Web/API/PerformanceElementTiming"><code>PerformanceElementTiming</code></a> API. The value given becomes an identifier for the observed image element. See also the <a href="/en-US/docs/Web/HTML/Attributes/elementtiming"><code>elementtiming</code></a> attribute page.</p>
    ///   
    pub elementtiming: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint of the relative priority to use when fetching the image. Allowed values:</p>
    ///     <dl>
    ///       <dt id="high"><code>high</code></dt>
    ///       <dd>
    ///         <p>Signals a high-priority fetch relative to other images.</p>
    ///       </dd>
    ///       <dt id="low"><code>low</code></dt>
    ///       <dd>
    ///         <p>Signals a low-priority fetch relative to other images.</p>
    ///       </dd>
    ///       <dt id="auto_2"><code>auto</code></dt>
    ///       <dd>
    ///         <p>Default: Signals automatic determination of fetch priority relative to other images.</p>
    ///       </dd>
    ///     </dl>
    ///   
    pub fetchpriority: core::option::Option<&'life str>,
    ///
    ///     <p>The intrinsic height of the image, in pixels. Must be an integer without a unit.</p>
    ///     <div class="notecard note" id="sect3">
    ///       <p><strong>Note:</strong> Including <code>height</code> and <a href="#width"><code>width</code></a> enables the aspect ratio of the image to be calculated by the browser prior to the image being loaded. This aspect ratio is used to reserve the space needed to display the image, reducing or even preventing a layout shift when the image is downloaded and painted to the screen. Reducing layout shift is a major component of good user experience and web performance.</p>
    ///     </div>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute indicates that the image is part of a <a href="https://en.wikipedia.org/wiki/Image_map#Server-side" class="external" target="_blank">server-side map</a>. If so, the coordinates where the user clicked on the image are sent to the server.</p>
    ///     <div class="notecard note" id="sect4">
    ///       <p><strong>Note:</strong> This attribute is allowed only if the <code>&lt;img&gt;</code> element is a descendant of an <a href="/en-US/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a> element with a valid <a href="/en-US/docs/Web/HTML/Element/a#href"><code>href</code></a> attribute. This gives users without pointing devices a fallback destination.</p>
    ///     </div>
    ///   
    pub ismap: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates how the browser should load the image:</p>
    ///     <dl>
    ///       <dt id="eager"><code>eager</code></dt>
    ///       <dd>
    ///         <p>Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value).</p>
    ///       </dd>
    ///       <dt id="lazy"><code>lazy</code></dt>
    ///       <dd>
    ///         <p>Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.</p>
    ///       </dd>
    ///     </dl>
    ///     <div class="notecard note" id="sect5">
    ///       <p><strong>Note:</strong> Loading is only deferred when JavaScript is enabled. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when.</p>
    ///     </div>
    ///   
    pub loading: core::option::Option<&'life str>,
    ///
    ///     <p>A string indicating which referrer to use when fetching the resource:</p>
    ///     <ul>
    ///       <li><code>no-referrer</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent.</li>
    ///       <li><code>no-referrer-when-downgrade</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent to <a href="/en-US/docs/Glossary/Origin">origin</a>s without <a href="/en-US/docs/Glossary/TLS">TLS</a> (<a href="/en-US/docs/Glossary/HTTPS">HTTPS</a>).</li>
    ///       <li><code>origin</code>: The sent referrer will be limited to the origin of the referring page: its <a href="/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL">scheme</a>, <a href="/en-US/docs/Glossary/Host">host</a>, and <a href="/en-US/docs/Glossary/Port">port</a>.</li>
    ///       <li><code>origin-when-cross-origin</code>: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.</li>
    ///       <li><code>same-origin</code>: A referrer will be sent for <a href="/en-US/docs/Glossary/Same-origin_policy">same origin</a>, but cross-origin requests will contain no referrer information.</li>
    ///       <li><code>strict-origin</code>: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>strict-origin-when-cross-origin</code> (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>unsafe-url</code>: The referrer will include the origin <em>and</em> the path (but not the <a href="/en-US/docs/Web/API/HTMLAnchorElement/hash">fragment</a>, <a href="/en-US/docs/Web/API/HTMLAnchorElement/password">password</a>, or <a href="/en-US/docs/Web/API/HTMLAnchorElement/username">username</a>). <strong>This value is unsafe</strong>, because it leaks origins and paths from TLS-protected resources to insecure origins.</li>
    ///     </ul>
    ///   
    pub referrerpolicy: core::option::Option<&'life str>,
    ///
    ///     <p>One or more strings separated by commas, indicating a set of source sizes. Each source size consists of:</p>
    ///     <ol>
    ///       <li>A <a href="/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#syntax">media condition</a>. This must be omitted for the last item in the list.</li>
    ///       <li>A source size value.</li>
    ///     </ol>
    ///     <p>Media Conditions describe properties of the <em>viewport</em>, not of the <em>image</em>. For example, <code>(max-height: 500px) 1000px</code> proposes to use a source of 1000px width, if the <em>viewport</em> is not higher than 500px.</p>
    ///     <p>Source size values specify the intended display size of the image. <a href="/en-US/docs/Glossary/User_agent">User agents</a> use the current source size to select one of the sources supplied by the <code>srcset</code> attribute, when those sources are described using width (<code>w</code>) descriptors. The selected source size affects the <a href="/en-US/docs/Glossary/Intrinsic_Size">intrinsic size</a> of the image (the image's display size if no <a href="/en-US/docs/Glossary/CSS">CSS</a> styling is applied). If the <code>srcset</code> attribute is absent, or contains no values with a width descriptor, then the <code>sizes</code> attribute has no effect.</p>
    ///   
    pub sizes: core::option::Option<&'life str>,
    ///
    ///     <p>The image <a href="/en-US/docs/Glossary/URL">URL</a>. Mandatory for the <code>&lt;img&gt;</code> element. On <a href="/en-US/docs/Glossary/Browser">browsers</a> supporting <code>srcset</code>, <code>src</code> is treated like a candidate image with a pixel density descriptor <code>1x</code>, unless an image with this pixel density descriptor is already defined in <code>srcset</code>, or unless <code>srcset</code> contains <code>w</code> descriptors.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>One or more strings separated by commas, indicating possible image sources for the <a href="/en-US/docs/Glossary/User_agent">user agent</a> to use. Each string is composed of:</p>
    ///     <ol>
    ///       <li>A <a href="/en-US/docs/Glossary/URL">URL</a> to an image</li>
    ///       <li>Optionally, whitespace followed by one of:
    ///         <ul>
    ///           <li>A width descriptor (a positive integer directly followed by <code>w</code>). The width descriptor is divided by the source size given in the <code>sizes</code> attribute to calculate the effective pixel density.</li>
    ///           <li>A pixel density descriptor (a positive floating point number directly followed by <code>x</code>).</li>
    ///         </ul>
    ///       </li>
    ///     </ol>
    ///     <p>If no descriptor is specified, the source is assigned the default descriptor of <code>1x</code>.</p>
    ///     <p>It is incorrect to mix width descriptors and pixel density descriptors in the same <code>srcset</code> attribute. Duplicate descriptors (for instance, two sources in the same <code>srcset</code> which are both described with <code>2x</code>) are also invalid.</p>
    ///     <p>If the <code>srcset</code> attribute uses width descriptors, the <code>sizes</code> attribute must also be present, or the <code>srcset</code> itself will be ignored.</p>
    ///     <p>The user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or <a href="/en-US/docs/Glossary/Bandwidth">bandwidth</a> conditions. See our <a href="/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">Responsive images</a> tutorial for an example.</p>
    ///   
    pub srcset: core::option::Option<&'life str>,
    ///
    ///     <p>The partial <a href="/en-US/docs/Glossary/URL">URL</a> (starting with <code>#</code>) of an <a href="/en-US/docs/Web/HTML/Element/map">image map</a> associated with the element.</p>
    ///     <div class="notecard note" id="sect6">
    ///       <p><strong>Note:</strong> You cannot use this attribute if the <code>&lt;img&gt;</code> element is inside an <a href="/en-US/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a> element.</p>
    ///     </div>
    ///   
    pub usemap: core::option::Option<&'life str>,
    ///
    ///     <p>The intrinsic width of the image in pixels. Must be an integer without a unit.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;map&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used with <a href="/en-US/docs/Web/HTML/Element/area"><code>&lt;area&gt;</code></a> elements to define an image map (a clickable link area).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Map<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The <code>name</code> attribute gives the map a name so that it can be referenced. The attribute must be present and must have a non-empty value with no space characters. The value of the <code>name</code> attribute must not be equal to the value of the <code>name</code> attribute of another <code>&lt;map&gt;</code> element in the same document. If the <a href="/en-US/docs/Web/HTML/Global_attributes#id"><code>id</code></a> attribute is also specified, both attributes must have the same value.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;track&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used as a child of the media elements, <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a>. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in <a href="/en-US/docs/Web/API/WebVTT_API">WebVTT format</a> (<code>.vtt</code> files) — Web Video Text Tracks.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Track<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>This attribute indicates that the track should be enabled unless the user's preferences indicate that another track is more appropriate. This may only be used on one <code>track</code> element per media element.</p>
    ///   
    pub default: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>How the text track is meant to be used. If omitted the default kind is <code>subtitles</code>. If the attribute contains an invalid value, it will use <code>metadata</code> (Versions of Chrome earlier than 52 treated an invalid value as <code>subtitles</code>). The following keywords are allowed:</p>
    ///     <ul>
    ///       <li><code>subtitles</code>
    ///         <ul>
    ///           <li>Subtitles provide translation of content that cannot be understood by the viewer. For example speech or text that is not English in an English language film.</li>
    ///           <li>Subtitles may contain additional content, usually extra background information. For example the text at the beginning of the Star Wars films, or the date, time, and location of a scene.</li>
    ///         </ul>
    ///       </li>
    ///       <li><code>captions</code>
    ///         <ul>
    ///           <li>Closed captions provide a transcription and possibly a translation of audio.</li>
    ///           <li>It may include important non-verbal information such as music cues or sound effects. It may indicate the cue's source (e.g. music, text, character).</li>
    ///           <li>Suitable for users who are deaf or when the sound is muted.</li>
    ///         </ul>
    ///       </li>
    ///       <li><code>descriptions</code>
    ///         <ul>
    ///           <li>Textual description of the video content.</li>
    ///           <li>Suitable for users who are blind or where the video cannot be seen.</li>
    ///         </ul>
    ///       </li>
    ///       <li><code>chapters</code>
    ///         <ul>
    ///           <li>Chapter titles are intended to be used when the user is navigating the media resource.</li>
    ///         </ul>
    ///       </li>
    ///       <li><code>metadata</code>
    ///         <ul>
    ///           <li>Tracks used by scripts. Not visible to the user.</li>
    ///         </ul>
    ///       </li>
    ///     </ul>
    ///   
    pub kind: core::option::Option<&'life str>,
    ///
    ///     <p>A user-readable title of the text track which is used by the browser when listing available text tracks.</p>
    ///   
    pub label: core::option::Option<&'life str>,
    ///
    ///     <p>Address of the track (<code>.vtt</code> file). Must be a valid URL. This attribute must be specified and its URL value must have the same origin as the document — unless the <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> parent element of the <code>track</code> element has a <a href="/en-US/docs/Web/HTML/Attributes/crossorigin"><code>crossorigin</code></a> attribute.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>Language of the track text data. It must be a valid <a class="external" target="_blank" href="https://r12a.github.io/app-subtags/">BCP 47</a> language tag. If the <code>kind</code> attribute is set to <code>subtitles</code>, then <code>srclang</code> must be defined.</p>
    ///   
    pub srclang: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;video&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element embeds a media player which supports video playback into the document. You can use <code>&lt;video&gt;</code> for audio content as well, but the <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> element may provide a more appropriate user experience.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Video<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A Boolean attribute which if <code>true</code> indicates that the element should automatically toggle picture-in-picture mode when the user switches back and forth between this document and another document or application.</p>
    ///   
    pub autopictureinpicture: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our <a href="/en-US/docs/Web/Media/Autoplay_guide">autoplay guide</a> for additional information about how to properly use autoplay.</p>
    ///     </div>
    ///     <p>To disable video autoplay, <code>autoplay="false"</code> will not work; the video will autoplay if the attribute is there in the <code>&lt;video&gt;</code> tag at all. To remove autoplay, the attribute needs to be removed altogether.</p>
    ///     <p>In some browsers (e.g. Chrome 70.0) autoplay doesn't work if no <code>muted</code> attribute is present.</p>
    ///   
    pub autoplay: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>If this attribute is present, the browser will offer controls to allow the user to control video playback, including volume, seeking, and pause/resume playback.</p>
    ///   
    pub controls: core::option::Option<&'life str>,
    ///
    ///     <p>The <a class="external" href="https://wicg.github.io/controls-list/explainer.html" target="_blank"><code>controlslist</code></a> attribute, when specified, helps the browser select what controls to show for the <code>video</code> element whenever the browser shows its own set of controls (that is, when the <code>controls</code> attribute is specified).</p>
    ///     <p>The allowed values are <code>nodownload</code>, <code>nofullscreen</code> and <code>noremoteplayback</code>.</p>
    ///     <p>Use the <a href="#disablepictureinpicture"><code>disablepictureinpicture</code></a> attribute if you want to disable the Picture-In-Picture mode (and the control).</p>
    ///   
    pub controlslist: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicates whether to use CORS to fetch the related video. <a href="/en-US/docs/Web/HTML/CORS_enabled_image">CORS-enabled resources</a> can be reused in the <a href="/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> element without being <em>tainted</em>. The allowed values are:</p>
    ///     <dl>
    ///       <dt id="anonymous"><code>anonymous</code></dt>
    ///       <dd>
    ///         <p>Sends a cross-origin request without a credential. In other words, it sends the <code>Origin:</code> HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the <code>Access-Control-Allow-Origin:</code> HTTP header), the resource will be <em>tainted</em>, and its usage restricted.</p>
    ///       </dd>
    ///       <dt id="use-credentials"><code>use-credentials</code></dt>
    ///       <dd>
    ///         <p>Sends a cross-origin request with a credential. In other words, it sends the <code>Origin:</code> HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through <code>Access-Control-Allow-Credentials:</code> HTTP header), the resource will be <em>tainted</em> and its usage restricted.</p>
    ///       </dd>
    ///     </dl>
    ///     <p>When not present, the resource is fetched without a CORS request (i.e. without sending the <code>Origin:</code> HTTP header), preventing its non-tainted use in <a href="/en-US/docs/Web/HTML/Element/canvas"><code>&lt;canvas&gt;</code></a> elements. If invalid, it is handled as if the enumerated keyword <code>anonymous</code> was used. See <a href="/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</a> for additional information.</p>
    ///   
    pub crossorigin: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>Prevents the browser from suggesting a Picture-in-Picture context menu or to request Picture-in-Picture automatically in some cases.</p>
    ///   
    pub disablepictureinpicture: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.).</p>
    ///     <p>In Safari, you can use <a target="_blank" href="https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AirPlayGuide/OptingInorOutofAirPlay/OptingInorOutofAirPlay.html" class="external"><code>x-webkit-airplay="deny"</code></a> as a fallback.</p>
    ///   
    pub disableremoteplayback: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The height of the video's display area, in <a class="external" href="https://drafts.csswg.org/css-values/#px" target="_blank">CSS pixels</a> (absolute values only; <a target="_blank" class="external" href="https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes">no percentages</a>).</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute; if specified, the browser will automatically seek back to the start upon reaching the end of the video.</p>
    ///   
    pub loop_: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute that indicates the default setting of the audio contained in the video. If set, the audio will be initially silenced. Its default value is <code>false</code>, meaning that the audio will be played when the video is played.</p>
    ///   
    pub muted: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute indicating that the video is to be played "inline", that is within the element's playback area. Note that the absence of this attribute <em>does not</em> imply that the video will always be played in fullscreen.</p>
    ///   
    pub playsinline: core::option::Option<&'life str>,
    ///
    ///     <p>A URL for an image to be shown while the video is downloading. If this attribute isn't specified, nothing is displayed until the first frame is available, then the first frame is shown as the poster frame.</p>
    ///   
    pub poster: core::option::Option<&'life str>,
    ///
    ///     <p>This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience regarding what content is loaded before the video is played. It may have one of the following values:</p>
    ///     <ul>
    ///       <li><code>none</code>: Indicates that the video should not be preloaded.</li>
    ///       <li><code>metadata</code>: Indicates that only video metadata (e.g. length) is fetched.</li>
    ///       <li><code>auto</code>: Indicates that the whole video file can be downloaded, even if the user is not expected to use it.</li>
    ///       <li><em>empty string</em>: Synonym of the <code>auto</code> value.</li>
    ///     </ul>
    ///     <p>The default value is different for each browser. The spec advises it to be set to <code>metadata</code>.</p>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong></p>
    ///       <ul>
    ///         <li>The <code>autoplay</code> attribute has precedence over <code>preload</code>. If <code>autoplay</code> is specified, the browser would obviously need to start downloading the video for playback.</li>
    ///         <li>The specification does not force the browser to follow the value of this attribute; it is a mere hint.</li>
    ///       </ul>
    ///     </div>
    ///   
    pub preload: core::option::Option<&'life str>,
    ///
    ///     <p>The URL of the video to embed. This is optional; you may instead use the <a href="/en-US/docs/Web/HTML/Element/source"><code>&lt;source&gt;</code></a> element within the video block to specify the video to embed.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>The width of the video's display area, in <a class="external" href="https://drafts.csswg.org/css-values/#px" target="_blank">CSS pixels</a> (absolute values only; <a class="external" href="https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes" target="_blank">no percentages</a>).</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;embed&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Embed<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The displayed height of the resource, in <a target="_blank" href="https://drafts.csswg.org/css-values/#px" class="external">CSS pixels</a>. This must be an absolute value; percentages are <em>not</em> allowed.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The URL of the resource being embedded.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="/en-US/docs/Glossary/MIME_type">MIME type</a> to use to select the plug-in to instantiate.</p>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>The displayed width of the resource, in <a href="https://drafts.csswg.org/css-values/#px" class="external" target="_blank">CSS pixels</a>. This must be an absolute value; percentages are <em>not</em> allowed.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;iframe&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a nested <a href="/en-US/docs/Glossary/Browsing_context">browsing context</a>, embedding another HTML page into the current one.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Iframe<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies a <a href="/en-US/docs/Web/HTTP/Permissions_Policy">Permissions Policy</a> for the <code>&lt;iframe&gt;</code>. The policy defines what features are available to the <code>&lt;iframe&gt;</code> (for example, access to the microphone, camera, battery, web-share, etc.) based on the origin of the request.</p>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong> A Permissions Policy specified by the <code>allow</code> attribute implements a further restriction on top of the policy specified in the <a href="/en-US/docs/Web/HTTP/Headers/Permissions-Policy"><code>Permissions-Policy</code></a> header. It doesn't replace it.</p>
    ///     </div>
    ///   
    pub allow: core::option::Option<&'life str>,
    ///
    ///     <p>Set to <code>true</code> if the <code>&lt;iframe&gt;</code> can activate fullscreen mode by calling the <a title="requestFullscreen()" href="/en-US/docs/Web/API/Element/requestFullscreen"><code>requestFullscreen()</code></a> method.</p>
    ///     <div class="notecard note" id="sect3">
    ///       <p><strong>Note:</strong> This attribute is considered a legacy attribute and redefined as <code>allow="fullscreen"</code>.</p>
    ///     </div>
    ///   
    pub allowfullscreen: core::option::Option<&'life str>,
    ///
    ///     <p>Set to <code>true</code> if a cross-origin <code>&lt;iframe&gt;</code> should be allowed to invoke the <a href="/en-US/docs/Web/API/Payment_Request_API">Payment Request API</a>.</p>
    ///     <div class="notecard note" id="sect4">
    ///       <p><strong>Note:</strong> This attribute is considered a legacy attribute and redefined as <code>allow="payment"</code>.</p>
    ///     </div>
    ///   
    pub allowpaymentrequest: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Set to <code>true</code> to make the <code>&lt;iframe&gt;</code> credentialless, meaning that its content will be loaded in a new, ephemeral context. It doesn't have access to the network, cookies, and storage data associated with its origin. It uses a new context local to the top-level document lifetime. In return, the <a href="/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy"><code>Cross-Origin-Embedder-Policy</code></a> (COEP) embedding rules can be lifted, so documents with COEP set can embed third-party documents that do not. See <a href="/en-US/docs/Web/Security/IFrame_credentialless">IFrame credentialless</a> for more details.</p>
    ///   
    pub credentialless: core::option::Option<&'life str>,
    ///
    ///     <p>A <a href="/en-US/docs/Web/HTTP/CSP">Content Security Policy</a> enforced for the embedded resource. See <a href="/en-US/docs/Web/API/HTMLIFrameElement/csp"><code>HTMLIFrameElement.csp</code></a> for details.</p>
    ///   
    pub csp: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The height of the frame in CSS pixels. Default is <code>150</code>.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates how the browser should load the iframe:</p>
    ///     <ul>
    ///       <li><code>eager</code>: Load the iframe immediately, regardless if it is outside the visible viewport (this is the default value).</li>
    ///       <li><code>lazy</code>: Defer loading of the iframe until it reaches a calculated distance from the viewport, as defined by the browser.</li>
    ///     </ul>
    ///   
    pub loading: core::option::Option<&'life str>,
    ///
    ///     <p>A targetable name for the embedded browsing context. This can be used in the <code>target</code> attribute of the <a href="/en-US/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a>, or <a href="/en-US/docs/Web/HTML/Element/base"><code>&lt;base&gt;</code></a> elements; the <code>formtarget</code> attribute of the <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a> elements; or the <code>windowName</code> parameter in the <a href="/en-US/docs/Web/API/Window/open" title="window.open()"><code>window.open()</code></a> method.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates which <a href="/en-US/docs/Web/API/Document/referrer">referrer</a> to send when fetching the frame's resource:</p>
    ///     <ul>
    ///       <li><code>no-referrer</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent.</li>
    ///       <li><code>no-referrer-when-downgrade</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent to <a href="/en-US/docs/Glossary/Origin">origin</a>s without <a href="/en-US/docs/Glossary/TLS">TLS</a> (<a href="/en-US/docs/Glossary/HTTPS">HTTPS</a>).</li>
    ///       <li><code>origin</code>: The sent referrer will be limited to the origin of the referring page: its <a href="/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL">scheme</a>, <a href="/en-US/docs/Glossary/Host">host</a>, and <a href="/en-US/docs/Glossary/Port">port</a>.</li>
    ///       <li><code>origin-when-cross-origin</code>: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.</li>
    ///       <li><code>same-origin</code>: A referrer will be sent for <a href="/en-US/docs/Glossary/Same-origin_policy">same origin</a>, but cross-origin requests will contain no referrer information.</li>
    ///       <li><code>strict-origin</code>: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>strict-origin-when-cross-origin</code> (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>unsafe-url</code>: The referrer will include the origin <em>and</em> the path (but not the <a href="/en-US/docs/Web/API/HTMLAnchorElement/hash">fragment</a>, <a href="/en-US/docs/Web/API/HTMLAnchorElement/password">password</a>, or <a href="/en-US/docs/Web/API/HTMLAnchorElement/username">username</a>). <strong>This value is unsafe</strong>, because it leaks origins and paths from TLS-protected resources to insecure origins.</li>
    ///     </ul>
    ///   
    pub referrerpolicy: core::option::Option<&'life str>,
    ///
    ///     <p>Applies extra restrictions to the content in the frame. The value of the attribute can either be empty to apply all restrictions, or space-separated tokens to lift particular restrictions:</p>
    ///     <ul>
    ///       <li><code>allow-downloads</code>: Allows downloading files through an <a href="/en-US/docs/Web/HTML/Element/a"><code>&lt;a&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/area"><code>&lt;area&gt;</code></a> element with the <a href="/en-US/docs/Web/HTML/Element/a#download">download</a> attribute, as well as through the navigation that leads to a download of a file. This works regardless of whether the user clicked on the link, or JS code initiated it without user interaction.</li>
    ///       <li><code>allow-downloads-without-user-activation</code> <abbr class="icon icon-experimental" title="Experimental. Expect behavior to change in the future.">
    ///     <span class="visually-hidden">Experimental</span>
    /// </abbr>: Allows for downloads to occur without a gesture from the user.</li>
    ///       <li><code>allow-forms</code>: Allows the page to submit forms. If this keyword is not used, form will be displayed as normal, but submitting it will not trigger input validation, sending data to a web server or closing a dialog.</li>
    ///       <li><code>allow-modals</code>: Allows the page to open modal windows by <a href="/en-US/docs/Web/API/Window/alert"><code>Window.alert()</code></a>, <a href="/en-US/docs/Web/API/Window/confirm"><code>Window.confirm()</code></a>, <a href="/en-US/docs/Web/API/Window/print"><code>Window.print()</code></a> and <a href="/en-US/docs/Web/API/Window/prompt"><code>Window.prompt()</code></a>, while opening a <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> is allowed regardless of this keyword. It also allows the page to receive <a href="/en-US/docs/Web/API/BeforeUnloadEvent"><code>BeforeUnloadEvent</code></a> event.</li>
    ///       <li><code>allow-orientation-lock</code>: Lets the resource <a href="/en-US/docs/Web/API/Screen/lockOrientation">lock the screen orientation</a>.</li>
    ///       <li><code>allow-pointer-lock</code>: Allows the page to use the <a href="/en-US/docs/Web/API/Pointer_Lock_API">Pointer Lock API</a>.</li>
    ///       <li><code>allow-popups</code>: Allows popups (like from <a href="/en-US/docs/Web/API/Window/open"><code>Window.open()</code></a>, <code>target="_blank"</code>, <a href="/en-US/docs/Web/API/Window/showModalDialog"><code>Window.showModalDialog()</code></a>). If this keyword is not used, that functionality will silently fail.</li>
    ///       <li><code>allow-popups-to-escape-sandbox</code>: Allows a sandboxed document to open new windows without forcing the sandboxing flags upon them. This will allow, for example, a third-party advertisement to be safely sandboxed without forcing the same restrictions upon the page the ad links to.</li>
    ///       <li><code>allow-presentation</code>: Allows embedders to have control over whether an iframe can start a <a href="/en-US/docs/Web/API/PresentationRequest">presentation session</a>.</li>
    ///       <li><code>allow-same-origin</code>: If this token is not used, the resource is treated as being from a special origin that always fails the <a href="/en-US/docs/Glossary/Same-origin_policy">same-origin policy</a> (potentially preventing access to <a href="/en-US/docs/Web/Security/Same-origin_policy#cross-origin_data_storage_access">data storage/cookies</a> and some JavaScript APIs).</li>
    ///       <li><code>allow-scripts</code>: Allows the page to run scripts (but not create pop-up windows). If this keyword is not used, this operation is not allowed.</li>
    ///       <li><code>allow-storage-access-by-user-activation</code> <abbr title="Experimental. Expect behavior to change in the future." class="icon icon-experimental">
    ///     <span class="visually-hidden">Experimental</span>
    /// </abbr>: Lets the resource request access to the parent's storage capabilities with the <a href="/en-US/docs/Web/API/Storage_Access_API">Storage Access API</a>.</li>
    ///       <li><code>allow-top-navigation</code>: Lets the resource navigate the top-level browsing context (the one named <code>_top</code>).</li>
    ///       <li><code>allow-top-navigation-by-user-activation</code>: Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.</li>
    ///       <li><code>allow-top-navigation-to-custom-protocols</code>: Allows navigations to non-<code>http</code> protocols built into browser or <a href="/en-US/docs/Web/API/Navigator/registerProtocolHandler/Web-based_protocol_handlers">registered by a website</a>. This feature is also activated by <code>allow-popups</code> or <code>allow-top-navigation</code> keyword.</li>
    ///     </ul>
    ///     <div id="sect5" class="notecard note">
    ///       <p><strong>Note:</strong></p>
    ///       <ul>
    ///         <li>When the embedded document has the same origin as the embedding page, it is <strong>strongly discouraged</strong> to use both <code>allow-scripts</code> and <code>allow-same-origin</code>, as that lets the embedded document remove the <code>sandbox</code> attribute — making it no more secure than not using the <code>sandbox</code> attribute at all.</li>
    ///         <li>Sandboxing is useless if the attacker can display content outside a sandboxed <code>iframe</code> — such as if the viewer opens the frame in a new tab. Such content should be also served from a <em>separate origin</em> to limit potential damage.</li>
    ///       </ul>
    ///     </div>
    ///   
    pub sandbox: core::option::Option<&'life str>,
    ///
    ///     <p>The URL of the page to embed. Use a value of <code>about:blank</code> to embed an empty page that conforms to the <a href="/en-US/docs/Web/Security/Same-origin_policy#inherited_origins">same-origin policy</a>. Also note that programmatically removing an <code>&lt;iframe&gt;</code>'s src attribute (e.g. via <a href="/en-US/docs/Web/API/Element/removeAttribute"><code>Element.removeAttribute()</code></a>) causes <code>about:blank</code> to be loaded in the frame in Firefox (from version 65), Chromium-based browsers, and Safari/iOS.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>Inline HTML to embed, overriding the <code>src</code> attribute. If a browser does not support the <code>srcdoc</code> attribute, it will fall back to the URL in the <code>src</code> attribute.</p>
    ///   
    pub srcdoc: core::option::Option<&'life str>,
    ///
    ///     <p>The width of the frame in CSS pixels. Default is <code>300</code>.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;object&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Object<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of URIs for archives of resources for the object.</p>
    ///   
    pub archive: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>The width of a border around the control, in pixels.</p>
    ///   
    pub border: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>The URI of the object's implementation. It can be used together with, or in place of, the <strong>data</strong> attribute.</p>
    ///   
    pub classid: core::option::Option<&'life str>,
    ///
    ///     <p>The base path used to resolve relative URIs specified by <strong>classid</strong>, <strong>data</strong>, or <strong>archive</strong>. If not specified, the default is the base URI of the current document.</p>
    ///   
    pub codebase: core::option::Option<&'life str>,
    ///
    ///     <p>The content type of the data specified by <strong>classid</strong>.</p>
    ///   
    pub codetype: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>The address of the resource as a valid URL. At least one of <strong>data</strong> and <strong>type</strong> must be defined.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent <code>&lt;object&gt;</code> element. Repeat the <code>&lt;object&gt;</code> element completely each time the resource is reused.</p>
    ///   
    pub declare: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The form element, if any, that the object element is associated with (its <em>form owner</em>). The value of the attribute must be an ID of a <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element in the same document.</p>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>The height of the displayed resource, in <a target="_blank" class="external" href="https://drafts.csswg.org/css-values/#px">CSS pixels</a>. — (Absolute values only. <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes" class="external" target="_blank">NO percentages</a>)</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The name of valid browsing context (HTML5), or the name of the control (HTML 4).</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>A message that the browser can show while loading the object's implementation and data.</p>
    ///   
    pub standby: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="/en-US/docs/Glossary/MIME_type">content type</a> of the resource specified by <strong>data</strong>. At least one of <strong>data</strong> and <strong>type</strong> must be defined.</p>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>A hash-name reference to a <a href="/en-US/docs/Web/HTML/Element/map"><code>&lt;map&gt;</code></a> element; that is a '#' followed by the value of a <a href="/en-US/docs/Web/HTML/Element/map#name"><code>name</code></a> of a map element.</p>
    ///   
    pub usemap: core::option::Option<&'life str>,
    ///
    ///     <p>The width of the display resource, in <a target="_blank" href="https://drafts.csswg.org/css-values/#px" class="external">CSS pixels</a>. — (Absolute values only. <a target="_blank" href="https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes" class="external">NO percentages</a>)</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;picture&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element contains zero or more <a href="/en-US/docs/Web/HTML/Element/source"><code>&lt;source&gt;</code></a> elements and one <a href="/en-US/docs/Web/HTML/Element/img"><code>&lt;img&gt;</code></a> element to offer alternative versions of an image for different display/device scenarios.
///
/// The browser will consider each child <code>&lt;source&gt;</code> element and choose the best match among them. If no matches are found—or the browser doesn't support the <code>&lt;picture&gt;</code> element—the URL of the <code>&lt;img&gt;</code> element's <a href="/en-US/docs/Web/HTML/Element/img#src"><code>src</code></a> attribute is selected. The selected image is then presented in the space occupied by the <code>&lt;img&gt;</code> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Picture<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;portal&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element enables the embedding of another HTML page into the current one for the purposes of allowing smoother navigation into new pages.
///
/// A <code>&lt;portal&gt;</code> is similar to an <code>&lt;iframe&gt;</code>. An <code>&lt;iframe&gt;</code> allows a separate <a href="/en-US/docs/Glossary/Browsing_context">browsing context</a> to be embedded. However, the embedded content of a <code>&lt;portal&gt;</code> is more limited than that of an <code>&lt;iframe&gt;</code>. It cannot be interacted with, and therefore is not suitable for embedding widgets into a document. Instead, the <code>&lt;portal&gt;</code> acts as a preview of the content of another page. It can be navigated into therefore allowing for seamless transition to the embedded content.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/portal>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Portal<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the <a href="/en-US/docs/Web/HTTP/Headers/Referrer-Policy">referrer policy</a> to use when requesting the page at the URL given as the value of the <code>src</code> attribute.</p>
    ///   
    pub referrerpolicy: core::option::Option<&'life str>,
    ///
    ///     <p>The URL of the page to embed.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;source&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies multiple media resources for the <a href="/en-US/docs/Web/HTML/Element/picture"><code>&lt;picture&gt;</code></a>, the <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> element, or the <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> element. It is a <a href="/en-US/docs/Glossary/Void_element">void element</a>, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for <a href="/en-US/docs/Web/Media/Formats/Image_types">image file formats</a> and <a href="/en-US/docs/Web/Media/Formats">media file formats</a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Source<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>Allowed if the <code>source</code> element's parent is a <a href="/en-US/docs/Web/HTML/Element/picture"><code>&lt;picture&gt;</code></a> element, but not allowed if the <code>source</code> element's parent is an <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> element.</p>
    ///     <p>The intrinsic height of the image, in pixels. Must be an integer without a unit.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Allowed if the <code>source</code> element's parent is a <a href="/en-US/docs/Web/HTML/Element/picture"><code>&lt;picture&gt;</code></a> element, but not allowed if the <code>source</code> element's parent is an <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> element.</p>
    ///     <p><a href="/en-US/docs/Web/CSS/Media_Queries">Media query</a> of the resource's intended media.</p>
    ///   
    pub media: core::option::Option<&'life str>,
    ///
    ///     <p>Allowed if the <code>source</code> element's parent is a <a href="/en-US/docs/Web/HTML/Element/picture"><code>&lt;picture&gt;</code></a> element, but not allowed if the <code>source</code> element's parent is an <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> element.</p>
    ///     <p>A list of source sizes that describes the final rendered width of the image represented by the source. Each source size consists of a comma-separated list of media condition-length pairs. Before laying the page out, the browser uses this information to determine which image is defined in <a href="#srcset"><code>srcset</code></a> to use. Please note that <code>sizes</code> will have its effect only if width dimension descriptors are provided with <code>srcset</code> instead of pixel ratio values (200w instead of 2x for example).</p>
    ///   
    pub sizes: core::option::Option<&'life str>,
    ///
    ///     <p>Required if the <code>source</code> element's parent is an <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> element, but not allowed if the <code>source</code> element's parent is a <a href="/en-US/docs/Web/HTML/Element/picture"><code>&lt;picture&gt;</code></a> element.</p>
    ///     <p>Address of the media resource.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>Required if the <code>source</code> element's parent is a <a href="/en-US/docs/Web/HTML/Element/picture"><code>&lt;picture&gt;</code></a> element, but not allowed if the <code>source</code> element's parent is an <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> element.</p>
    ///     <p>A list of one or more strings, separated by commas, indicating a set of possible images represented by the source for the browser to use. Each string is composed of:</p>
    ///     <ol>
    ///       <li>One URL specifying an image.</li>
    ///       <li>A width descriptor, which consists of a string containing a positive integer directly followed by <code>"w"</code>, such as <code>300w</code>. The default value, if missing, is the infinity.</li>
    ///       <li>A pixel density descriptor, that is a positive floating number directly followed by <code>"x"</code>. The default value, if missing, is <code>1x</code>.</li>
    ///     </ol>
    ///     <p>Each string in the list must have at least a width descriptor or a pixel density descriptor to be valid. The two types of descriptors should not be mixed together and only one should be used consistently throughout the list. Among the list, the value of each descriptor must be unique. The browser chooses the most adequate image to display at a given point of time. If the <code>sizes</code> attribute is present, then a width descriptor must be specified for each string. If the browser does not support <code>srcset</code>, then <code>src</code> will be used for the default source.</p>
    ///   
    pub srcset: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="/en-US/docs/Web/Media/Formats/Image_types">MIME media type of the image</a> or <a href="/en-US/docs/Web/Media/Formats/Containers">other media type</a>, optionally with a <a href="/en-US/docs/Web/Media/Formats/codecs_parameter"><code>codecs</code> parameter</a>.</p>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>Allowed if the <code>source</code> element's parent is a <a href="/en-US/docs/Web/HTML/Element/picture"><code>&lt;picture&gt;</code></a> element, but not allowed if the <code>source</code> element's parent is an <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> or <a href="/en-US/docs/Web/HTML/Element/video"><code>&lt;video&gt;</code></a> element.</p>
    ///     <p>The intrinsic width of the image in pixels. Must be an integer without a unit.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// Use the <strong>HTML <code>&lt;canvas&gt;</code> element</strong> with either the <a href="/en-US/docs/Web/API/Canvas_API">canvas scripting API</a> or the <a href="/en-US/docs/Web/API/WebGL_API">WebGL API</a> to draw graphics and animations.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Canvas<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The height of the coordinate space in CSS pixels. Defaults to 150.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Lets the canvas know whether translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported by Mozilla-based browsers; use the standardized <a href="/en-US/docs/Web/API/HTMLCanvasElement/getContext" title="canvas.getContext('2d', { alpha: false })"><code>canvas.getContext('2d', { alpha: false })</code></a> instead.</p>
    ///   
    pub moz_opaque: core::option::Option<&'life str>,
    ///
    ///     <p>The width of the coordinate space in CSS pixels. Defaults to 300.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;noscript&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Noscript<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;script&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <code>&lt;script&gt;</code> element can also be used with other languages, such as <a href="/en-US/docs/Web/API/WebGL_API">WebGL</a>'s GLSL shader programming language and <a href="/en-US/docs/Glossary/JSON">JSON</a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Script<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>For classic scripts, if the <code>async</code> attribute is present, then the classic script will be fetched in parallel to parsing and evaluated as soon as it is available.</p>
    ///     <p>For <a href="/en-US/docs/Web/JavaScript/Guide/Modules">module scripts</a>, if the <code>async</code> attribute is present then the scripts and all their dependencies will be executed in the defer queue, therefore they will get fetched in parallel to parsing and evaluated as soon as they are available.</p>
    ///     <p>This attribute allows the elimination of <strong>parser-blocking JavaScript</strong> where the browser would have to load and evaluate scripts before continuing to parse. <code>defer</code> has a similar effect in this case.</p>
    ///     <p>This is a boolean attribute: the presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.</p>
    ///     <p>See <a href="#browser_compatibility">Browser compatibility</a> for notes on browser support. See also <a href="/en-US/docs/Games/Techniques/Async_scripts">Async scripts for asm.js</a>.</p>
    ///   
    pub async_: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>This attribute explicitly indicates that certain operations should be blocked on the fetching of the script. The operations that are to be blocked must be a space-separated list of blocking attributes listed below.</p>
    ///     <ul>
    ///       <li><code>render</code>: The rendering of content on the screen is blocked.</li>
    ///     </ul>
    ///   
    pub blocking: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Normal <code>script</code> elements pass minimal information to the <a href="/en-US/docs/Web/API/Window/error_event" title="window.onerror"><code>window.onerror</code></a> for scripts which do not pass the standard <a href="/en-US/docs/Glossary/CORS">CORS</a> checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See <a href="/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</a> for a more descriptive explanation of its valid arguments.</p>
    ///   
    pub crossorigin: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>This Boolean attribute is set to indicate to a browser that the script is meant to be executed after the document has been parsed, but before firing <a href="/en-US/docs/Web/API/Document/DOMContentLoaded_event" title="DOMContentLoaded"><code>DOMContentLoaded</code></a>.</p>
    ///     <p>Scripts with the <code>defer</code> attribute will prevent the <code>DOMContentLoaded</code> event from firing until the script has loaded and finished evaluating.</p>
    ///     <div id="sect1" class="notecard warning">
    ///       <p><strong>Warning:</strong> This attribute must not be used if the <code>src</code> attribute is absent (i.e. for inline scripts), in this case it would have no effect.</p>
    ///       <p>The <code>defer</code> attribute has no effect on <a href="/en-US/docs/Web/JavaScript/Guide/Modules">module scripts</a> — they defer by default.</p>
    ///     </div>
    ///     <p>Scripts with the <code>defer</code> attribute will execute in the order in which they appear in the document.</p>
    ///     <p>This attribute allows the elimination of <strong>parser-blocking JavaScript</strong> where the browser would have to load and evaluate scripts before continuing to parse. <code>async</code> has a similar effect in this case.</p>
    ///   
    pub defer: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint of the relative priority to use when fetching an external script. Allowed values:</p>
    ///     <dl>
    ///       <dt id="high"><code>high</code></dt>
    ///       <dd>
    ///         <p>Signals a high-priority fetch relative to other external scripts.</p>
    ///       </dd>
    ///       <dt id="low"><code>low</code></dt>
    ///       <dd>
    ///         <p>Signals a low-priority fetch relative to other external scripts.</p>
    ///       </dd>
    ///       <dt id="auto"><code>auto</code></dt>
    ///       <dd>
    ///         <p>Default: Signals automatic determination of fetch priority relative to other external scripts.</p>
    ///       </dd>
    ///     </dl>
    ///   
    pub fetchpriority: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains inline metadata that a user agent can use to verify that a fetched resource has been delivered free of unexpected manipulation. See <a href="/en-US/docs/Web/Security/Subresource_Integrity">Subresource Integrity</a>.</p>
    ///   
    pub integrity: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute is set to indicate that the script should not be executed in browsers that support <a href="/en-US/docs/Web/JavaScript/Guide/Modules">ES modules</a> — in effect, this can be used to serve fallback scripts to older browsers that do not support modular JavaScript code.</p>
    ///   
    pub nomodule: core::option::Option<&'life str>,
    ///
    ///     <p>A cryptographic nonce (number used once) to allow scripts in a <a href="/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src">script-src Content-Security-Policy</a>. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.</p>
    ///   
    pub nonce: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates which <a href="/en-US/docs/Web/API/Document/referrer">referrer</a> to send when fetching the script, or resources fetched by the script:</p>
    ///     <ul>
    ///       <li><code>no-referrer</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent.</li>
    ///       <li><code>no-referrer-when-downgrade</code>: The <a href="/en-US/docs/Web/HTTP/Headers/Referer"><code>Referer</code></a> header will not be sent to <a href="/en-US/docs/Glossary/Origin">origin</a>s without <a href="/en-US/docs/Glossary/TLS">TLS</a> (<a href="/en-US/docs/Glossary/HTTPS">HTTPS</a>).</li>
    ///       <li><code>origin</code>: The sent referrer will be limited to the origin of the referring page: its <a href="/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL">scheme</a>, <a href="/en-US/docs/Glossary/Host">host</a>, and <a href="/en-US/docs/Glossary/Port">port</a>.</li>
    ///       <li><code>origin-when-cross-origin</code>: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.</li>
    ///       <li><code>same-origin</code>: A referrer will be sent for <a href="/en-US/docs/Glossary/Same-origin_policy">same origin</a>, but cross-origin requests will contain no referrer information.</li>
    ///       <li><code>strict-origin</code>: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>strict-origin-when-cross-origin</code> (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).</li>
    ///       <li><code>unsafe-url</code>: The referrer will include the origin <em>and</em> the path (but not the <a href="/en-US/docs/Web/API/HTMLAnchorElement/hash">fragment</a>, <a href="/en-US/docs/Web/API/HTMLAnchorElement/password">password</a>, or <a href="/en-US/docs/Web/API/HTMLAnchorElement/username">username</a>). <strong>This value is unsafe</strong>, because it leaks origins and paths from TLS-protected resources to insecure origins.</li>
    ///     </ul>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong> An empty string value (<code>""</code>) is both the default value, and a fallback value if <code>referrerpolicy</code> is not supported. If <code>referrerpolicy</code> is not explicitly specified on the <code>&lt;script&gt;</code> element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available, the empty string is treated as being equivalent to <code>strict-origin-when-cross-origin</code>.</p>
    ///     </div>
    ///   
    pub referrerpolicy: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the URI of an external script; this can be used as an alternative to embedding a script directly within a document.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       This attribute indicates the type of script represented.
    ///       The value of this attribute will be one of the following:
    ///     </p>
    ///     <dl>
    ///       <dt id="attribute_is_not_set_default_an_empty_string_or_a_javascript_mime_type"><strong>Attribute is not set (default), an empty string, or a JavaScript MIME type</strong></dt>
    ///       <dd>
    ///         <p>
    ///           Indicates that the script is a "classic script", containing JavaScript code.
    ///           Authors are encouraged to omit the attribute if the script refers to JavaScript code rather than specify a MIME type.
    ///           JavaScript MIME types are <a href="/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#textjavascript">listed in the IANA media types specification</a>.
    ///         </p>
    ///       </dd>
    ///       <dt id="module"><code>module</code></dt>
    ///       <dd>
    ///         <p>
    ///           This value causes the code to be treated as a JavaScript module.
    ///           The processing of the script contents is deferred.
    ///           The <code>charset</code> and <code>defer</code> attributes have no effect.
    ///           For information on using <code>module</code>, see our <a href="/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript modules</a> guide.
    ///           Unlike classic scripts, module scripts require the use of the CORS protocol for cross-origin fetching.
    ///         </p>
    ///       </dd>
    ///       <dt id="importmap"><a href="/en-US/docs/Web/HTML/Element/script/type/importmap"><code>importmap</code></a></dt>
    ///       <dd>
    ///         <p>
    ///           This value indicates that the body of the element contains an import map.
    ///           The import map is a JSON object that developers can use to control how the browser resolves module specifiers when importing <a href="/en-US/docs/Web/JavaScript/Guide/Modules#importing_modules_using_import_maps">JavaScript modules</a>.
    ///         </p>
    ///       </dd>
    ///       <dt id="any_other_value"><strong>Any other value</strong></dt>
    ///       <dd>
    ///         <p>
    ///           The embedded content is treated as a data block, and won't be processed by the browser.
    ///           Developers must use a valid MIME type that is not a JavaScript MIME type to denote data blocks.
    ///           All of the other attributes will be ignored, including the <code>src</code> attribute.
    ///         </p>
    ///       </dd>
    ///     </dl>
    ///   
    pub type_: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;del&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a range of text that has been deleted from a document. This can be used when rendering "track changes" or source code diff information, for example. The <a href="/en-US/docs/Web/HTML/Element/ins"><code>&lt;ins&gt;</code></a> element can be used for the opposite purpose: to indicate text that has been added to the document.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Del<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A URI for a resource that explains the change (for example, meeting minutes).</p>
    ///   
    pub cite: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>This attribute indicates the time and date of the change and must be a valid date string with an optional time. If the value cannot be parsed as a date with an optional time string, the element does not have an associated timestamp. For the format of the string without a time, see <a href="/en-US/docs/Web/HTML/Date_and_time_formats#date_strings">Date strings</a>. The format of the string if it includes both date and time is covered in <a href="/en-US/docs/Web/HTML/Date_and_time_formats#local_date_and_time_strings">Local date and time strings</a>.</p>
    ///   
    pub datetime: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;ins&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a range of text that has been added to a document. You can use the <a href="/en-US/docs/Web/HTML/Element/del"><code>&lt;del&gt;</code></a> element to similarly represent a range of text that has been deleted from the document.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Ins<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>This attribute defines the URI of a resource that explains the change, such as a link to meeting minutes or a ticket in a troubleshooting system.</p>
    ///   
    pub cite: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>This attribute indicates the time and date of the change and must be a valid date with an optional time string. If the value cannot be parsed as a date with an optional time string, the element does not have an associated timestamp. For the format of the string without a time, see <a href="/en-US/docs/Web/HTML/Date_and_time_formats#date_strings">Format of a valid date string</a>. The format of the string if it includes both date and time is covered in <a href="/en-US/docs/Web/HTML/Date_and_time_formats#local_date_and_time_strings">Format of a valid local date and time string</a>.</p>
    ///   
    pub datetime: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;caption&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies the caption (or title) of a table.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Caption<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicates how the caption must be aligned with respect to the table. It may have one of the following values:</p>
    ///     <dl>
    ///       <dt id="left"><code>left</code></dt>
    ///       <dd>
    ///         <p>The caption is displayed to the left of the table.</p>
    ///       </dd>
    ///       <dt id="top"><code>top</code></dt>
    ///       <dd>
    ///         <p>The caption is displayed above the table.</p>
    ///       </dd>
    ///       <dt id="right"><code>right</code></dt>
    ///       <dd>
    ///         <p>The caption is displayed to the right of the table.</p>
    ///       </dd>
    ///       <dt id="bottom"><code>bottom</code></dt>
    ///       <dd>
    ///         <p>The caption is displayed below the table.</p>
    ///       </dd>
    ///     </dl>
    ///     <div class="notecard warning" id="sect1">
    ///       <p><strong>Warning:</strong> Do not use this attribute, as it has been deprecated. The <a aria-current="page" href="/en-US/docs/Web/HTML/Element/caption"><code>&lt;caption&gt;</code></a> element should be styled using the <a href="/en-US/docs/Web/CSS">CSS</a> properties <a href="/en-US/docs/Web/CSS/caption-side"><code>caption-side</code></a> and <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a>.</p>
    ///     </div>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;col&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <a href="/en-US/docs/Web/HTML/Element/colgroup"><code>&lt;colgroup&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Col<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a positive integer indicating the number of consecutive columns the <code>&lt;col&gt;</code> element spans. If not present, its default value is <code>1</code>.</p>
    ///   
    pub span: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;colgroup&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a group of columns within a table.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Colgroup<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a positive integer indicating the number of consecutive columns the <code>&lt;colgroup&gt;</code> element spans. If not present, its default value is <code>1</code>.</p>
    ///     <p>The <code>span</code> attribute is not permitted if there are one or more <a href="/en-US/docs/Web/HTML/Element/col"><code>&lt;col&gt;</code></a> elements within the <code>&lt;colgroup&gt;</code>.</p>
    ///   
    pub span: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;table&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Table<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicates how the table must be aligned inside the containing document. It may have the following values:</p>
    ///     <ul>
    ///       <li><code>left</code>: the table is displayed on the left side of the document;</li>
    ///       <li><code>center</code>: the table is displayed in the center of the document;</li>
    ///       <li><code>right</code>: the table is displayed on the right side of the document.</li>
    ///     </ul>
    ///     <p>Set <a href="/en-US/docs/Web/CSS/margin-left"><code>margin-left</code></a> and <a href="/en-US/docs/Web/CSS/margin-right"><code>margin-right</code></a> to <code>auto</code> or <a href="/en-US/docs/Web/CSS/margin"><code>margin</code></a> to <code>0 auto</code> to achieve an effect that is similar to the align attribute.</p>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>The background color of the table. It is a <a href="/en-US/docs/Web/CSS/hex-color">6-digit hexadecimal RGB code</a>, prefixed by a '<code>#</code>'. One of the predefined <a href="/en-US/docs/Web/CSS/named-color">color keywords</a> can also be used.</p>
    ///     <p>To achieve a similar effect, use the CSS <a href="/en-US/docs/Web/CSS/background-color"><code>background-color</code></a> property.</p>
    ///   
    pub bgcolor: core::option::Option<&'life str>,
    ///
    ///     <p>This integer attribute defines, in pixels, the size of the frame surrounding the table. If set to 0, the <a href="#frame"><code>frame</code></a> attribute is set to void.</p>
    ///     <p>To achieve a similar effect, use the CSS <a href="/en-US/docs/Web/CSS/border"><code>border</code></a> shorthand property.</p>
    ///   
    pub border: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines the space between the content of a cell and its border, displayed or not. If the cellpadding's length is defined in pixels, this pixel-sized space will be applied to all four sides of the cell's content. If the length is defined using a percentage value, the content will be centered and the total vertical space (top and bottom) will represent this value. The same is true for the total horizontal space (left and right).</p>
    ///     <p>To achieve a similar effect, apply the <a href="/en-US/docs/Web/CSS/border-collapse"><code>border-collapse</code></a> property to the <code>&lt;table&gt;</code> element, with its value set to collapse, and the <a href="/en-US/docs/Web/CSS/padding"><code>padding</code></a> property to the <a href="/en-US/docs/Web/HTML/Element/td"><code>&lt;td&gt;</code></a> elements.</p>
    ///   
    pub cellpadding: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines the size of the space between two cells in a percentage value or pixels. The attribute is applied both horizontally and vertically, to the space between the top of the table and the cells of the first row, the left of the table and the first column, the right of the table and the last column and the bottom of the table and the last row.</p>
    ///     <p>To achieve a similar effect, apply the <a href="/en-US/docs/Web/CSS/border-spacing"><code>border-spacing</code></a> property to the <code>&lt;table&gt;</code> element. <code>border-spacing</code> does not have any effect if <a href="/en-US/docs/Web/CSS/border-collapse"><code>border-collapse</code></a> is set to collapse.</p>
    ///   
    pub cellspacing: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This enumerated attribute defines which side of the frame surrounding the table must be displayed.</p>
    ///     <p>To achieve a similar effect, use the <a href="/en-US/docs/Web/CSS/border-style"><code>border-style</code></a> and <a href="/en-US/docs/Web/CSS/border-width"><code>border-width</code></a> properties.</p>
    ///   
    pub frame: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This enumerated attribute defines where rules, i.e. lines, should appear in a table. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>none</code>, which indicates that no rules will be displayed; it is the default value;</li>
    ///       <li><code>groups</code>, which will cause the rules to be displayed between row groups (defined by the <a href="/en-US/docs/Web/HTML/Element/thead"><code>&lt;thead&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/tbody"><code>&lt;tbody&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/tfoot"><code>&lt;tfoot&gt;</code></a> elements) and between column groups (defined by the <a href="/en-US/docs/Web/HTML/Element/col"><code>&lt;col&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/colgroup"><code>&lt;colgroup&gt;</code></a> elements) only;</li>
    ///       <li><code>rows</code>, which will cause the rules to be displayed between rows;</li>
    ///       <li><code>cols</code>, which will cause the rules to be displayed between columns;</li>
    ///       <li><code>all</code>, which will cause the rules to be displayed between rows and columns.</li>
    ///     </ul>
    ///     <p>To achieve a similar effect, apply the <a href="/en-US/docs/Web/CSS/border"><code>border</code></a> property to the appropriate <a href="/en-US/docs/Web/HTML/Element/thead"><code>&lt;thead&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/tbody"><code>&lt;tbody&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/tfoot"><code>&lt;tfoot&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/col"><code>&lt;col&gt;</code></a>, or <a href="/en-US/docs/Web/HTML/Element/colgroup"><code>&lt;colgroup&gt;</code></a> elements.</p>
    ///   
    pub rules: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines an alternative text that summarizes the content of the table. Use the <a href="/en-US/docs/Web/HTML/Element/caption"><code>&lt;caption&gt;</code></a> element instead.</p>
    ///   
    pub summary: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines the width of the table. Use the CSS <a href="/en-US/docs/Web/CSS/width"><code>width</code></a> property instead.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;tbody&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element encapsulates a set of table rows (<a href="/en-US/docs/Web/HTML/Element/tr"><code>&lt;tr&gt;</code></a> elements), indicating that they comprise the body of the table (<a href="/en-US/docs/Web/HTML/Element/table"><code>&lt;table&gt;</code></a>).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Tbody<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:</p>
    ///     <ul>
    ///       <li><code>left</code>, aligning the content to the left of the cell</li>
    ///       <li><code>center</code>, centering the content in the cell</li>
    ///       <li><code>right</code>, aligning the content to the right of the cell</li>
    ///       <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li>
    ///       <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <a href="#char"><code>char</code></a> and <a href="#charoff"><code>charoff</code></a> attributes.</li>
    ///     </ul>
    ///     <p>If this attribute is not set, the <code>left</code> value is assumed.</p>
    ///     <p>As this attribute is deprecated, use the CSS <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property instead.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> The equivalent <code>text-align</code> property for the <code>align="char"</code> is not implemented in any browsers yet. See the <a href="/en-US/docs/Web/CSS/text-align#browser_compatibility"><code>text-align</code>'s browser compatibility section</a> for the <code>&lt;string&gt;</code> value.</p>
    ///     </div>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>The background color of the table. It is a <a href="/en-US/docs/Web/CSS/hex-color">6-digit hexadecimal RGB code</a>, prefixed by a '<code>#</code>'. One of the predefined <a href="/en-US/docs/Web/CSS/named-color">color keywords</a> can also be used.</p>
    ///     <p>As this attribute is deprecated, use the CSS <a href="/en-US/docs/Web/CSS/background-color"><code>background-color</code></a> property instead.</p>
    ///   
    pub bgcolor: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is used to set the character to align the cells in a column on. Typical values for this include a period (<code>.</code>) when attempting to align numbers or monetary values. If <a href="#align"><code>align</code></a> is not set to <code>char</code>, this attribute is ignored.</p>
    ///   
    pub char: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is used to indicate the number of characters to offset the column data from the alignment characters specified by the <code>char</code> attribute.</p>
    ///   
    pub charoff: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the vertical alignment of the text within each row of cells of the table header. Possible values for this attribute are:</p>
    ///     <ul>
    ///       <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the <a href="https://en.wikipedia.org/wiki/Baseline_%28typography%29" class="external" target="_blank">baseline</a> of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li>
    ///       <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li>
    ///       <li><code>middle</code>, which will center the text in the cell;</li>
    ///       <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li>
    ///     </ul>
    ///     <p>As this attribute is deprecated, use the CSS <a href="/en-US/docs/Web/CSS/vertical-align"><code>vertical-align</code></a> property instead.</p>
    ///   
    pub valign: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;td&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a cell of a table that contains data. It participates in the <em>table model</em>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Td<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a non-negative integer value that indicates for how many columns the cell extends. Its default value is <code>1</code>. Values higher than 1000 will be considered as incorrect and will be set to the default value (1).</p>
    ///   
    pub colspan: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a list of space-separated strings, each corresponding to the <strong>id</strong> attribute of the <a href="/en-US/docs/Web/HTML/Element/th"><code>&lt;th&gt;</code></a> elements that apply to this element.</p>
    ///   
    pub headers: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a non-negative integer value that indicates for how many rows the cell extends. Its default value is <code>1</code>; if its value is set to <code>0</code>, it extends until the end of the table section (<a href="/en-US/docs/Web/HTML/Element/thead"><code>&lt;thead&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/tbody"><code>&lt;tbody&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/tfoot"><code>&lt;tfoot&gt;</code></a>, even if implicitly defined), that the cell belongs to. Values higher than 65534 are clipped down to 65534.</p>
    ///   
    pub rowspan: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;tfoot&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a set of rows summarizing the columns of the table.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Tfoot<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:</p>
    ///     <ul>
    ///       <li><code>left</code>, aligning the content to the left of the cell</li>
    ///       <li><code>center</code>, centering the content in the cell</li>
    ///       <li><code>right</code>, aligning the content to the right of the cell</li>
    ///       <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li>
    ///       <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <a href="#char"><code>char</code></a> and <a href="#charoff"><code>charoff</code></a> attributes.</li>
    ///     </ul>
    ///     <p>If this attribute is not set, the <code>left</code> value is assumed.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong></p>
    ///       <ul>
    ///         <li>To achieve the same effect as the <code>left</code>, <code>center</code>, <code>right</code> or <code>justify</code> values, use the CSS <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property on it.</li>
    ///         <li>To achieve the same effect as the <code>char</code> value, in CSS, you can use the value of the <a href="#char"><code>char</code></a> as the value of the <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property.</li>
    ///       </ul>
    ///     </div>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>The background color of the table. It is a <a href="/en-US/docs/Web/CSS/hex-color">6-digit hexadecimal RGB code</a>, prefixed by a '<code>#</code>'. One of the predefined <a href="/en-US/docs/Web/CSS/named-color">color keywords</a> can also be used.</p>
    ///     <p>To achieve a similar effect, use the CSS <a href="/en-US/docs/Web/CSS/background-color"><code>background-color</code></a> property.</p>
    ///   
    pub bgcolor: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the alignment of the content in a column to a character. Typical values for this include a period (.) when attempting to align numbers or monetary values. If <a href="#align"><code>align</code></a> is not set to <code>char</code>, this attribute is ignored.</p>
    ///   
    pub char: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is used to indicate the number of characters to offset the column data from the alignment characters specified by the <code>char</code> attribute.</p>
    ///   
    pub charoff: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the vertical alignment of the text within each row of cells of the table footer. Possible values for this attribute are:</p>
    ///     <ul>
    ///       <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the <a href="https://en.wikipedia.org/wiki/Baseline_%28typography%29" class="external" target="_blank">baseline</a> of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li>
    ///       <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li>
    ///       <li><code>middle</code>, which will center the text in the cell;</li>
    ///       <li>and <code>top</code>, which will put the text as close to the top of the cell as it is possible.</li>
    ///     </ul>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong> Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS <a href="/en-US/docs/Web/CSS/vertical-align"><code>vertical-align</code></a> property on it.</p>
    ///     </div>
    ///   
    pub valign: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;th&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a cell as the header of a group of table cells. The exact nature of this group is defined by the <a href="#scope"><code>scope</code></a> and <a href="#headers"><code>headers</code></a> attributes.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Th<'life> {
    ///     <p>This attribute contains a short abbreviated description of the cell's content. Some user-agents, such as speech readers, may present this description before the content itself.</p>
    ///   
    pub abbr: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a non-negative integer value that indicates for how many columns the cell extends. Its default value is <code>1</code>. Values higher than 1000 will be considered as incorrect and will be set to the default value (1).</p>
    ///   
    pub colspan: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a list of space-separated strings, each corresponding to the <strong>id</strong> attribute of the <a href="/en-US/docs/Web/HTML/Element/th" aria-current="page"><code>&lt;th&gt;</code></a> elements that apply to this element.</p>
    ///   
    pub headers: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a non-negative integer value that indicates for how many rows the cell extends. Its default value is <code>1</code>; if its value is set to <code>0</code>, it extends until the end of the table section (<a href="/en-US/docs/Web/HTML/Element/thead"><code>&lt;thead&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/tbody"><code>&lt;tbody&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/tfoot"><code>&lt;tfoot&gt;</code></a>, even if implicitly defined), that the cell belongs to. Values higher than 65534 are clipped down to 65534.</p>
    ///   
    pub rowspan: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute defines the cells that the header (defined in the <a aria-current="page" href="/en-US/docs/Web/HTML/Element/th"><code>&lt;th&gt;</code></a>) element relates to. It may have the following values:</p>
    ///     <ul>
    ///       <li><code>row</code>: The header relates to all cells of the row it belongs to.</li>
    ///       <li><code>col</code>: The header relates to all cells of the column it belongs to.</li>
    ///       <li><code>rowgroup</code>: The header belongs to a rowgroup and relates to all of its cells. These cells can be placed to the right or the left of the header, depending on the value of the <a href="/en-US/docs/Web/HTML/Global_attributes/dir"><code>dir</code></a> attribute in the <a href="/en-US/docs/Web/HTML/Element/table"><code>&lt;table&gt;</code></a> element.</li>
    ///       <li><code>colgroup</code>: The header belongs to a colgroup and relates to all of its cells.</li>
    ///     </ul>
    ///     <p>If the <code>scope</code> attribute is not specified, or its value is not <code>row</code>, <code>col</code>, or <code>rowgroup</code>, or <code>colgroup</code>, then browsers automatically select the set of cells to which the header cell applies.</p>
    ///   
    pub scope: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;thead&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a set of rows defining the head of the columns of the table.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Thead<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>This <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute specifies how horizontal alignment of each cell content will be handled. Possible values are:</p>
    ///     <ul>
    ///       <li><code>left</code>, aligning the content to the left of the cell</li>
    ///       <li><code>center</code>, centering the content in the cell</li>
    ///       <li><code>right</code>, aligning the content to the right of the cell</li>
    ///       <li><code>justify</code>, inserting spaces into the textual content so that the content is justified in the cell</li>
    ///       <li><code>char</code>, aligning the textual content on a special character with a minimal offset, defined by the <a href="#char"><code>char</code></a> and <a href="#charoff"><code>charoff</code></a> attributes.</li>
    ///     </ul>
    ///     <p>If this attribute is not set, the <code>left</code> value is assumed.</p>
    ///     <div class="notecard warning" id="sect1">
    ///       <p><strong>Warning:</strong> Do not use this attribute as it is obsolete (not supported) in the latest standard.</p>
    ///       <ul>
    ///         <li>To align values, use the CSS <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property instead.</li>
    ///       </ul>
    ///     </div>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>This attribute defines the background color of each column cell. It accepts a 6-digit hexadecimal color or a named color. Alpha transparency is not supported.</p>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong> Do not use this attribute, as it is non-standard. The <code>thead</code> element should be styled using the CSS <a href="/en-US/docs/Web/CSS/background-color"><code>background-color</code></a> property, which can be applied to any element, including the <code>thead</code>, <a href="/en-US/docs/Web/HTML/Element/tr"><code>&lt;tr&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/td"><code>&lt;td&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/th"><code>&lt;th&gt;</code></a> elements.</p>
    ///     </div>
    ///   
    pub bgcolor: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is used to set the character to align the cells in a column on. Typical values for this include a period (.) when attempting to align numbers or monetary values. If <a href="#align"><code>align</code></a> is not set to <code>char</code>, this attribute is ignored.</p>
    ///     <div class="notecard note" id="sect3">
    ///       <p><strong>Note:</strong> Do not use this attribute as it is obsolete (and not supported) in the latest standard.</p>
    ///     </div>
    ///   
    pub char: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is used to indicate the number of characters to offset the column data from the alignment characters specified by the <strong>char</strong> attribute.</p>
    ///     <div class="notecard note" id="sect4">
    ///       <p><strong>Note:</strong> Do not use this attribute as it is obsolete (and not supported) in the latest standard.</p>
    ///     </div>
    ///   
    pub charoff: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the vertical alignment of the text within each row of cells of the table header. Possible values for this attribute are:</p>
    ///     <ul>
    ///       <li><code>baseline</code>, which will put the text as close to the bottom of the cell as it is possible, but align it on the <a href="https://en.wikipedia.org/wiki/Baseline_%28typography%29" class="external" target="_blank">baseline</a> of the characters instead of the bottom of them. If characters are all of the size, this has the same effect as <code>bottom</code>.</li>
    ///       <li><code>bottom</code>, which will put the text as close to the bottom of the cell as it is possible;</li>
    ///       <li><code>middle</code>, which will center the text in the cell;</li>
    ///       <li><code>top</code>, which will put the text as close to the top of the cell as it is possible.</li>
    ///     </ul>
    ///     <div class="notecard note" id="sect5">
    ///       <p><strong>Note:</strong> Do not use this attribute as it is obsolete (and not supported) in the latest standard: instead set the CSS <a href="/en-US/docs/Web/CSS/vertical-align"><code>vertical-align</code></a> property on it.</p>
    ///     </div>
    ///   
    pub valign: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;tr&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a row of cells in a table. The row's cells can then be established using a mix of <a href="/en-US/docs/Web/HTML/Element/td"><code>&lt;td&gt;</code></a> (data cell) and <a href="/en-US/docs/Web/HTML/Element/th"><code>&lt;th&gt;</code></a> (header cell) elements.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Tr<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>A string which specifies how the cell's context should be aligned horizontally within the cells in the row; this is shorthand for using <code>align</code> on every cell in the row individually. Possible values are:</p>
    ///     <dl>
    ///       <dt id="left"><code>left</code></dt>
    ///       <dd>
    ///         <p>Align the content of each cell at its left edge.</p>
    ///       </dd>
    ///       <dt id="center"><code>center</code></dt>
    ///       <dd>
    ///         <p>Center the contents of each cell between their left and right edges.</p>
    ///       </dd>
    ///       <dt id="right"><code>right</code></dt>
    ///       <dd>
    ///         <p>Align the content of each cell at its right edge.</p>
    ///       </dd>
    ///       <dt id="justify"><code>justify</code></dt>
    ///       <dd>
    ///         <p>Widen whitespaces within the text of each cell so that the text fills the full width of each cell (full justification).</p>
    ///       </dd>
    ///       <dt id="char"><code>char</code></dt>
    ///       <dd>
    ///         <p>Align each cell in the row on a specific character (such that each row in the column that is configured this way will horizontally align its cells on that character). This uses the <a href="#char"><code>char</code></a> and <a href="#charoff"><code>charoff</code></a> to establish the alignment character (typically "." or "," when aligning numerical data) and the number of characters that should follow the alignment character. This alignment type was never widely supported.</p>
    ///       </dd>
    ///     </dl>
    ///     <p>If no value is expressly set for <code>align</code>, the parent node's value is inherited.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> Instead of using the obsolete <code>align</code> attribute, you should instead use the CSS <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property to establish <code>left</code>, <code>center</code>, <code>right</code>, or <code>justify</code> alignment for the row's cells. To apply character-based alignment, set the CSS <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property to the alignment character (such as <code>"."</code> or <code>","</code>).</p>
    ///     </div>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A string specifying a color to apply to the backgrounds of each of the row's cells. This can be either a <a href="/en-US/docs/Web/CSS/color_value/rgb">hexadecimal <code>#RRGGBB</code> or <code>#RGB</code> value</a> or a <a href="/en-US/docs/Web/CSS/named-color">color keyword</a>. Omitting the attribute or setting it to <code>null</code> in JavaScript causes the row's cells to inherit the row's parent element's background color.</p>
    ///     <div class="notecard note" id="sect2">
    ///       <p><strong>Note:</strong> The <a aria-current="page" href="/en-US/docs/Web/HTML/Element/tr"><code>&lt;tr&gt;</code></a> element should be styled using <a href="/en-US/docs/Web/CSS">CSS</a>. To give a similar effect as the <code>bgcolor</code> attribute, use the CSS property <a href="/en-US/docs/Web/CSS/background-color"><code>background-color</code></a>.</p>
    ///     </div>
    ///   
    pub bgcolor: core::option::Option<&'life str>,
    ///
    ///     <p>A string that sets the character to align the cells in each row's columns (each row's centering that uses the same character gets aligned with others using the same character. Typical values for this include a period (<code>"."</code>) or comma (<code>","</code>) when attempting to align numbers or monetary values. If <a href="#align"><code>align</code></a> is not set to <code>char</code>, this attribute is ignored.</p>
    ///     <div class="notecard note" id="sect3">
    ///       <p><strong>Note:</strong> This attribute is obsolete and rarely implemented anyway. To achieve the same effect as the <a href="#char"><code>char</code></a> attribute, set the CSS <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property to the same string you would specify for the <code>char</code> property, such as <code>text-align: "."</code>.</p>
    ///     </div>
    ///   
    pub char: core::option::Option<&'life str>,
    ///
    ///     <p>A string indicating the number of characters on the tail end of the column's data should be displayed after the alignment character specified by the <code>char</code> attribute. For example, when displaying money values for currencies that use hundredths of a unit (such as the dollar, which is divided into 100 cents), you would typically specify a value of 2, so that in tandem with <code>char</code> being set to <code>"."</code>, the values in a column would be cleanly aligned on the decimal points, with the number of cents properly displayed to the right of the decimal point.</p>
    ///     <div id="sect4" class="notecard note">
    ///       <p><strong>Note:</strong> This attribute is obsolete, and was never widely supported anyway.</p>
    ///     </div>
    ///   
    pub charoff: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>A string specifying the vertical alignment of the text within each cell in the row. Possible values for this attribute are:</p>
    ///     <dl>
    ///       <dt id="baseline"><code>baseline</code></dt>
    ///       <dd>
    ///         <p>Aligns each cell's content text as closely as possible to the bottom of the cell, handling alignment of different fonts and font sizes by aligning the characters along the <a target="_blank" href="https://en.wikipedia.org/wiki/Baseline" class="external">baseline</a> of the font(s) used in the row. If all the characters in the row are the same size, the effect is the same as <code>bottom</code>.</p>
    ///       </dd>
    ///       <dt id="bottom"><code>bottom</code>,</dt>
    ///       <dd>
    ///         <p>Draws the text in each of the row's cells as closely as possible to the bottom edge of those cells.</p>
    ///       </dd>
    ///       <dt id="middle"><code>middle</code></dt>
    ///       <dd>
    ///         <p>Each cell's text is vertically centered.</p>
    ///       </dd>
    ///       <dt id="top"><code>top</code></dt>
    ///       <dd>
    ///         <p>Each cell's text is drawn as closely as possible to the top edge of the containing cell.</p>
    ///       </dd>
    ///     </dl>
    ///     <div class="notecard note" id="sect5">
    ///       <p><strong>Note:</strong> Don't use the obsolete <code>valign</code> attribute. Instead, add the CSS <a href="/en-US/docs/Web/CSS/vertical-align"><code>vertical-align</code></a> property to the row.</p>
    ///     </div>
    ///   
    pub valign: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;button&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a <a href="/en-US/docs/Learn/Forms">form</a> or opening a dialog.
///
/// By default, HTML buttons are presented in a style resembling the platform the <a href="/en-US/docs/Glossary/User_agent">user agent</a> runs on, but you can change buttons' appearance with <a href="/en-US/docs/Web/CSS">CSS</a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Button<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute on a <a href="/en-US/docs/Web/HTML/Element/button" aria-current="page"><code>&lt;button&gt;</code></a> is nonstandard and Firefox-specific. Unlike other browsers, <a href="https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing" target="_blank" class="external">Firefox persists the dynamic disabled state</a> of a <a aria-current="page" href="/en-US/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a> across page loads. Setting <code>autocomplete="off"</code> on the button disables this feature; see <a class="external" href="https://bugzil.la/654072" target="_blank">Firefox bug 654072</a>.</p>
    ///   
    pub autocomplete: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute specifies that the button should have input <a href="/en-US/docs/Web/API/HTMLElement/focus">focus</a> when the page loads. <strong>Only one element in a document can have this attribute.</strong></p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute prevents the user from interacting with the button: it cannot be pressed or focused.</p>
    ///     <p>Firefox, unlike other browsers, <a target="_blank" class="external" href="https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing">persists the dynamic disabled state</a> of a <a aria-current="page" href="/en-US/docs/Web/HTML/Element/button"><code>&lt;button&gt;</code></a> across page loads. To control this feature, use the [<code>autocomplete</code>]] (#autocomplete) attribute.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element to associate the button with (its <em>form owner</em>). The value of this attribute must be the <code>id</code> of a <code>&lt;form&gt;</code> in the same document. (If this attribute is not set, the <code>&lt;button&gt;</code> is associated with its ancestor <code>&lt;form&gt;</code> element, if any.)</p>
    ///     <p>This attribute lets you associate <code>&lt;button&gt;</code> elements to <code>&lt;form&gt;</code>s anywhere in the document, not just inside a <code>&lt;form&gt;</code>. It can also override an ancestor <code>&lt;form&gt;</code> element.</p>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>The URL that processes the information submitted by the button. Overrides the <a href="/en-US/docs/Web/HTML/Element/form#action"><code>action</code></a> attribute of the button's form owner. Does nothing if there is no form owner.</p>
    ///   
    pub formaction: core::option::Option<&'life str>,
    ///
    ///     <p>If the button is a submit button (it's inside/associated with a <code>&lt;form&gt;</code> and doesn't have <code>type="button"</code>), specifies how to encode the form data that is submitted. Possible values:</p>
    ///     <ul>
    ///       <li><code>application/x-www-form-urlencoded</code>: The default if the attribute is not used.</li>
    ///       <li><code>multipart/form-data</code>: Used to submit <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements with their <a href="/en-US/docs/Web/HTML/Element/input#type"><code>type</code></a> attributes set to <code>file</code>.</li>
    ///       <li><code>text/plain</code>: Specified as a debugging aid; shouldn't be used for real form submission.</li>
    ///     </ul>
    ///     <p>If this attribute is specified, it overrides the <a href="/en-US/docs/Web/HTML/Element/form#enctype"><code>enctype</code></a> attribute of the button's form owner.</p>
    ///   
    pub formenctype: core::option::Option<&'life str>,
    ///
    ///     <p>If the button is a submit button (it's inside/associated with a <code>&lt;form&gt;</code> and doesn't have <code>type="button"</code>), this attribute specifies the <a href="/en-US/docs/Web/HTTP/Methods">HTTP method</a> used to submit the form. Possible values:</p>
    ///     <ul>
    ///       <li><code>post</code>: The data from the form are included in the body of the HTTP request when sent to the server. Use when the form contains information that shouldn't be public, like login credentials.</li>
    ///       <li><code>get</code>: The form data are appended to the form's <code>action</code> URL, with a <code>?</code> as a separator, and the resulting URL is sent to the server. Use this method when the form <a href="/en-US/docs/Glossary/Idempotent">has no side effects</a>, like search forms.</li>
    ///     </ul>
    ///     <p>If specified, this attribute overrides the <a href="/en-US/docs/Web/HTML/Element/form#method"><code>method</code></a> attribute of the button's form owner.</p>
    ///   
    pub formmethod: core::option::Option<&'life str>,
    ///
    ///     <p>If the button is a submit button, this Boolean attribute specifies that the form is not to be <a href="/en-US/docs/Learn/Forms/Form_validation">validated</a> when it is submitted. If this attribute is specified, it overrides the <a href="/en-US/docs/Web/HTML/Element/form#novalidate"><code>novalidate</code></a> attribute of the button's form owner.</p>
    ///     <p>This attribute is also available on <a href="/en-US/docs/Web/HTML/Element/input/image"><code>&lt;input type="image"&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/input/submit"><code>&lt;input type="submit"&gt;</code></a> elements.</p>
    ///   
    pub formnovalidate: core::option::Option<bool>,
    ///
    ///     <p>If the button is a submit button, this attribute is an author-defined name or standardized, underscore-prefixed keyword indicating where to display the response from submitting the form. This is the <code>name</code> of, or keyword for, a <em>browsing context</em> (a tab, window, or <a href="/en-US/docs/Web/HTML/Element/iframe"><code>&lt;iframe&gt;</code></a>). If this attribute is specified, it overrides the <a href="/en-US/docs/Web/HTML/Element/form#target"><code>target</code></a> attribute of the button's form owner. The following keywords have special meanings:</p>
    ///     <ul>
    ///       <li><code>_self</code>: Load the response into the same browsing context as the current one. This is the default if the attribute is not specified.</li>
    ///       <li><code>_blank</code>: Load the response into a new unnamed browsing context — usually a new tab or window, depending on the user's browser settings.</li>
    ///       <li><code>_parent</code>: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as <code>_self</code>.</li>
    ///       <li><code>_top</code>: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as <code>_self</code>.</li>
    ///     </ul>
    ///   
    pub formtarget: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The name of the button, submitted as a pair with the button's <code>value</code> as part of the form data, when that button is used to submit the form.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>The default behavior of the button. Possible values are:</p>
    ///     <ul>
    ///       <li><code>submit</code>: The button submits the form data to the server. This is the default if the attribute is not specified for buttons associated with a <code>&lt;form&gt;</code>, or if the attribute is an empty or invalid value.</li>
    ///       <li><code>reset</code>: The button resets all the controls to their initial values, like <a href="/en-US/docs/Web/HTML/Element/input/reset">&lt;input type="reset"&gt;</a>. (This behavior tends to annoy users.)</li>
    ///       <li><code>button</code>: The button has no default behavior, and does nothing when pressed by default. It can have client-side scripts listen to the element's events, which are triggered when the events occur.</li>
    ///     </ul>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>Defines the value associated with the button's <code>name</code> when it's submitted with the form data. This value is passed to the server in params when the form is submitted using this button.</p>
    ///   
    pub value: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;datalist&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element contains a set of <a href="/en-US/docs/Web/HTML/Element/option"><code>&lt;option&gt;</code></a> elements that represent the permissible or recommended options available to choose from within other controls.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Datalist<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;fieldset&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to group several controls as well as labels (<a href="/en-US/docs/Web/HTML/Element/label"><code>&lt;label&gt;</code></a>) within a web form.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Fieldset<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>If this Boolean attribute is set, all form controls that are descendants of the <code>&lt;fieldset&gt;</code>, are disabled, meaning they are not editable and won't be submitted along with the <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a>. They won't receive any browsing events, like mouse clicks or focus-related events. By default browsers display such controls grayed out. Note that form elements inside the <a href="/en-US/docs/Web/HTML/Element/legend"><code>&lt;legend&gt;</code></a> element won't be disabled.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute takes the value of the <a href="/en-US/docs/Web/HTML/Global_attributes#id"><code>id</code></a> attribute of a <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element you want the <code>&lt;fieldset&gt;</code> to be part of, even if it is not inside the form. Please note that usage of this is confusing — if you want the <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements inside the <code>&lt;fieldset&gt;</code> to be associated with the form, you need to use the <code>form</code> attribute directly on those elements. You can check which elements are associated with a form via JavaScript, using <a href="/en-US/docs/Web/API/HTMLFormElement/elements"><code>HTMLFormElement.elements</code></a>.</p>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The name associated with the group.</p>
    ///     <div id="sect1" class="notecard note">
    ///       <p><strong>Note:</strong> The caption for the fieldset is given by the first <a href="/en-US/docs/Web/HTML/Element/legend"><code>&lt;legend&gt;</code></a> element nested inside it.</p>
    ///     </div>
    ///   
    pub name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;form&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a document section containing interactive controls for submitting information.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Form<'life> {
    ///     <p>Comma-separated <a href="/en-US/docs/Web/SVG/Content_type">content types</a> the server accepts.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> <strong>This attribute has been deprecated and should not be used.</strong> Instead, use the <a href="/en-US/docs/Web/HTML/Element/input#accept"><code>accept</code></a> attribute on <code>&lt;input type=file&gt;</code> elements.</p>
    ///     </div>
    ///   
    pub accept: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Space-separated <a href="/en-US/docs/Glossary/Character_encoding">character encodings</a> the server accepts. The browser uses them in the order in which they are listed. The default value means <a href="/en-US/docs/Web/HTTP/Headers/Content-Encoding">the same encoding as the page</a>.
    ///       (In previous versions of HTML, character encodings could also be delimited by commas.)
    ///     </p>
    ///   
    pub accept_charset: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>A nonstandard attribute used by iOS Safari that controls how textual form elements should be automatically capitalized. <code>autocapitalize</code> attributes on a form elements override it on <code>&lt;form&gt;</code>. Possible values:</p>
    ///     <ul>
    ///       <li><code>none</code>: No automatic capitalization.</li>
    ///       <li><code>sentences</code> (default): Capitalize the first letter of each sentence.</li>
    ///       <li><code>words</code>: Capitalize the first letter of each word.</li>
    ///       <li><code>characters</code>: Capitalize all characters — that is, uppercase.</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates whether input elements can by default have their values automatically completed by the browser. <code>autocomplete</code> attributes on form elements override it on <code>&lt;form&gt;</code>. Possible values:</p>
    ///     <ul>
    ///       <li><code>off</code>: The browser may not automatically complete entries. (Browsers tend to ignore this for suspected login forms; see <a href="/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#the_autocomplete_attribute_and_login_fields">The autocomplete attribute and login fields</a>.)</li>
    ///       <li><code>on</code>: The browser may automatically complete entries.</li>
    ///     </ul>
    ///   
    pub autocomplete: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The name of the form. The value must not be the empty string, and must be unique among the <code>form</code> elements in the forms collection that it is in, if any.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>Controls the annotations and what kinds of links the form creates. Annotations include <a href="/en-US/docs/Web/HTML/Attributes/rel#external"><code>external</code></a>, <a href="/en-US/docs/Web/HTML/Attributes/rel#nofollow"><code>nofollow</code></a>, <a href="/en-US/docs/Web/HTML/Attributes/rel#opener"><code>opener</code></a>, <a href="/en-US/docs/Web/HTML/Attributes/rel#noopener"><code>noopener</code></a>, and <a href="/en-US/docs/Web/HTML/Attributes/rel#noreferrer"><code>noreferrer</code></a>. Link types include <a href="/en-US/docs/Web/HTML/Attributes/rel#help"><code>help</code></a>, <a href="/en-US/docs/Web/HTML/Attributes/rel#prev"><code>prev</code></a>, <a href="/en-US/docs/Web/HTML/Attributes/rel#next"><code>next</code></a>, <a href="/en-US/docs/Web/HTML/Attributes/rel#search"><code>search</code></a>, and <a href="/en-US/docs/Web/HTML/Attributes/rel#license"><code>license</code></a>. The <a href="/en-US/docs/Web/HTML/Attributes/rel"><code>rel</code></a> value is a space-separated list of these enumerated values.</p>
    ///   
    pub rel: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;input&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and <a href="/en-US/docs/Glossary/User_agent">user agent</a>. The <code>&lt;input&gt;</code> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Input<'life> {
    ///     <p>Valid for the <code>file</code> input type only, the <code>accept</code> attribute defines which file types are selectable in a <code>file</code> upload control. See the <a href="/en-US/docs/Web/HTML/Element/input/file">file</a> input type.</p>
    ///   
    pub accept: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> button only, the <code>alt</code> attribute provides alternative text for the image, displaying the value of the attribute if the image <a href="#src"><code>src</code></a> is missing or otherwise fails to load. See the <a href="/en-US/docs/Web/HTML/Element/input/image">image</a> input type.</p>
    ///   
    pub alt: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>(<strong>Not</strong> a Boolean attribute!) The <a href="/en-US/docs/Web/HTML/Attributes/autocomplete"><code>autocomplete</code></a> attribute takes as its value a space-separated string that describes what, if any, type of autocomplete functionality the input should provide. A typical implementation of autocomplete recalls previous values entered in the same input field, but more complex forms of autocomplete can exist. For instance, a browser could integrate with a device's contacts list to autocomplete <code>email</code> addresses in an email input field. See <a href="/en-US/docs/Web/HTML/Attributes/autocomplete#values"><code>autocomplete</code></a> for permitted values.</p>
    ///     <p>The <code>autocomplete</code> attribute is valid on <code>hidden</code>, <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, <code>date</code>, <code>month</code>, <code>week</code>, <code>time</code>, <code>datetime-local</code>, <code>number</code>, <code>range</code>, <code>color</code>, and <code>password</code>. This attribute has no effect on input types that do not return numeric or text data, being valid for all input types except <code>checkbox</code>, <code>radio</code>, <code>file</code>, or any of the button types.</p>
    ///     <p>See the <a href="/en-US/docs/Web/HTML/Attributes/autocomplete"><code>autocomplete</code> attribute</a> for additional information, including information on password security and how <code>autocomplete</code> is slightly different for <code>hidden</code> than for other input types.</p>
    ///   
    pub autocomplete: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute which, if present, indicates that the input should automatically have focus when the page has finished loading (or when the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> containing the element has been displayed).</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> An element with the <code>autofocus</code> attribute may gain focus before the <a title="DOMContentLoaded" href="/en-US/docs/Web/API/Window/DOMContentLoaded_event"><code>DOMContentLoaded</code></a> event is fired.</p>
    ///     </div>
    ///     <p>No more than one element in the document may have the <code>autofocus</code> attribute. If put on more than one element, the first one with the attribute receives focus.</p>
    ///     <p>The <code>autofocus</code> attribute cannot be used on inputs of type <code>hidden</code>, since hidden inputs cannot be focused.</p>
    ///     <div class="notecard warning" id="sect2">
    ///       <p><strong>Warning:</strong> Automatically focusing a form control can confuse visually-impaired people using screen-reading technology and people with cognitive impairments. When <code>autofocus</code> is assigned, screen-readers "teleport" their user to the form control without warning them beforehand.</p>
    ///     </div>
    ///     <p>Use careful consideration for accessibility when applying the <code>autofocus</code> attribute. Automatically focusing on a control can cause the page to scroll on load. The focus can also cause dynamic keyboards to display on some touch devices. While a screen reader will announce the label of the form control receiving focus, the screen reader will not announce anything before the label, and the sighted user on a small device will equally miss the context created by the preceding content.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>Introduced in the HTML Media Capture specification and valid for the <code>file</code> input type only, the <code>capture</code> attribute defines which media—microphone, video, or camera—should be used to capture a new file for upload with <code>file</code> upload control in supporting scenarios. See the <a href="/en-US/docs/Web/HTML/Element/input/file">file</a> input type.</p>
    ///   
    pub capture: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for both <code>radio</code> and <code>checkbox</code> types, <code>checked</code> is a Boolean attribute. If present on a <code>radio</code> type, it indicates that the radio button is the currently selected one in the group of same-named radio buttons. If present on a <code>checkbox</code> type, it indicates that the checkbox is checked by default (when the page loads). It does <em>not</em> indicate whether this checkbox is currently checked: if the checkbox's state is changed, this content attribute does not reflect the change. (Only the <a href="/en-US/docs/Web/API/HTMLInputElement"><code>HTMLInputElement</code>'s <code>checked</code> IDL attribute</a> is updated.)</p>
    ///     <div class="notecard note" id="sect3">
    ///       <p><strong>Note:</strong> Unlike other input controls, a checkboxes and radio buttons value are only included in the submitted data if they are currently <code>checked</code>. If they are, the name and the value(s) of the checked controls are submitted.</p>
    ///       <p>For example, if a checkbox whose <code>name</code> is <code>fruit</code> has a <code>value</code> of <code>cherry</code>, and the checkbox is checked, the form data submitted will include <code>fruit=cherry</code>. If the checkbox isn't active, it isn't listed in the form data at all. The default <code>value</code> for checkboxes and radio buttons is <code>on</code>.</p>
    ///     </div>
    ///   
    pub checked: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>text</code> and <code>search</code> input types only, the <code>dirname</code> attribute enables the submission of the directionality of the element. When included, the form control will submit with two name/value pairs: the first being the <a href="#name"><code>name</code></a> and <a href="#value"><code>value</code></a>, the second being the value of the <code>dirname</code> as the name with the value of <code>ltr</code> or <code>rtl</code> being set by the browser.</p>
    ///     <div class="code-example"><pre class="brush: html notranslate"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    ///   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span>
    ///     <span class="token punctuation">&gt;</span></span>Fruit:
    ///     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruit<span class="token punctuation">"</span></span> <span class="token attr-name">dirname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruit.dir<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cherry<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    ///   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    ///   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    /// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    /// <span class="token comment">&lt;!-- page.html?fruit=cherry&amp;fruit.dir=ltr --&gt;</span>
    /// </code></pre></div>
    ///     <p>When the form above is submitted, the input cause both the <code>name</code> / <code>value</code> pair of <code>fruit=cherry</code> and the <code>dirname</code> / direction pair of <code>fruit.dir=ltr</code> to be sent.</p>
    ///   
    pub dirname: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute which, if present, indicates that the user should not be able to interact with the input. Disabled inputs are typically rendered with a dimmer color or using some other form of indication that the field is not available for use.</p>
    ///     <p>Specifically, disabled inputs do not receive the <a href="/en-US/docs/Web/API/Element/click_event" title="click"><code>click</code></a> event, and disabled inputs are not submitted with the form.</p>
    ///     <div id="sect4" class="notecard note">
    ///       <p><strong>Note:</strong> Although not required by the specification, Firefox will by default <a href="https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing" target="_blank" class="external">persist the dynamic disabled state</a> of an <code>&lt;input&gt;</code> across page loads. Use the <a href="#autocomplete"><code>autocomplete</code></a> attribute to control this feature.</p>
    ///     </div>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>A string specifying the <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element with which the input is associated (that is, its <strong>form owner</strong>). This string's value, if present, must match the <a href="#id"><code>id</code></a> of a <code>&lt;form&gt;</code> element in the same document. If this attribute isn't specified, the <code>&lt;input&gt;</code> element is associated with the nearest containing form, if any.</p>
    ///     <p>The <code>form</code> attribute lets you place an input anywhere in the document but have it included with a form elsewhere in the document.</p>
    ///     <div class="notecard note" id="sect5">
    ///       <p><strong>Note:</strong> An input can only be associated with one form.</p>
    ///     </div>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> and <code>submit</code> input types only. See the <a href="/en-US/docs/Web/HTML/Element/input/submit">submit</a> input type for more information.</p>
    ///   
    pub formaction: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> and <code>submit</code> input types only. See the <a href="/en-US/docs/Web/HTML/Element/input/submit">submit</a> input type for more information.</p>
    ///   
    pub formenctype: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> and <code>submit</code> input types only. See the <a href="/en-US/docs/Web/HTML/Element/input/submit">submit</a> input type for more information.</p>
    ///   
    pub formmethod: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> and <code>submit</code> input types only. See the <a href="/en-US/docs/Web/HTML/Element/input/submit">submit</a> input type for more information.</p>
    ///   
    pub formnovalidate: core::option::Option<bool>,
    ///
    ///     <p>Valid for the <code>image</code> and <code>submit</code> input types only. See the <a href="/en-US/docs/Web/HTML/Element/input/submit">submit</a> input type for more information.</p>
    ///   
    pub formtarget: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> input button only, the <code>height</code> is the height of the image file to display to represent the graphical submit button. See the <a href="/en-US/docs/Web/HTML/Element/input/image">image</a> input type.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Global attribute valid for all elements, including all the input types, it defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking. The value is used as the value of the <a href="/en-US/docs/Web/HTML/Element/label"><code>&lt;label&gt;</code></a>'s <code>for</code> attribute to link the label with the form control. See <a href="/en-US/docs/Web/HTML/Element/label"><code>&lt;label&gt;</code></a>.</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Global value valid for all elements, it provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Values include <code>none</code>, <code>text</code>, <code>tel</code>, <code>url</code>, <code>email</code>, <code>numeric</code>, <code>decimal</code>, and <code>search</code>.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The value given to the <code>list</code> attribute should be the <a title="id" href="/en-US/docs/Web/API/Element/id"><code>id</code></a> of a <a href="/en-US/docs/Web/HTML/Element/datalist"><code>&lt;datalist&gt;</code></a> element located in the same document. The <code>&lt;datalist&gt;</code> provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the <a href="#type"><code>type</code></a> are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value.</p>
    ///     <p>It is valid on <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, <code>date</code>, <code>month</code>, <code>week</code>, <code>time</code>, <code>datetime-local</code>, <code>number</code>, <code>range</code>, and <code>color</code>.</p>
    ///     <p>Per the specifications, the <code>list</code> attribute is not supported by the <code>hidden</code>, <code>password</code>, <code>checkbox</code>, <code>radio</code>, <code>file</code>, or any of the button types.</p>
    ///     <p>Depending on the browser, the user may see a custom color palette suggested, tic marks along a range, or even an input that opens like a <a href="/en-US/docs/Web/HTML/Element/select"><code>&lt;select&gt;</code></a> but allows for non-listed values. Check out the <a href="/en-US/docs/Web/HTML/Element/datalist#browser_compatibility">browser compatibility table</a> for the other input types.</p>
    ///     <p>See the <a href="/en-US/docs/Web/HTML/Element/datalist"><code>&lt;datalist&gt;</code></a> element.</p>
    ///   
    pub list: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>date</code>, <code>month</code>, <code>week</code>, <code>time</code>, <code>datetime-local</code>, <code>number</code>, and <code>range</code>, it defines the greatest value in the range of permitted values. If the <a href="#value"><code>value</code></a> entered into the element exceeds this, the element fails <a href="/en-US/docs/Web/HTML/Constraint_validation">constraint validation</a>. If the value of the <code>max</code> attribute isn't a number, then the element has no maximum value.</p>
    ///     <p>There is a special case: if the data type is periodic (such as for dates or times), the value of <code>max</code> may be lower than the value of <code>min</code>, which indicates that the range may wrap around; for example, this allows you to specify a time range from 10 PM to 4 AM.</p>
    ///   
    pub max: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, and <code>password</code>, it defines the maximum number of characters (as UTF-16 code units) the user can enter into the field. This must be an integer value <code>0</code> or higher. If no <code>maxlength</code> is specified, or an invalid value is specified, the field has no maximum length. This value must also be greater than or equal to the value of <code>minlength</code>.</p>
    ///     <p>The input will fail <a href="/en-US/docs/Web/HTML/Constraint_validation">constraint validation</a> if the length of the text entered into the field is greater than <code>maxlength</code> UTF-16 code units long. By default, browsers prevent users from entering more characters than allowed by the <code>maxlength</code> attribute. See <a href="#client-side_validation">Client-side validation</a> for more information.</p>
    ///   
    pub maxlength: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>date</code>, <code>month</code>, <code>week</code>, <code>time</code>, <code>datetime-local</code>, <code>number</code>, and <code>range</code>, it defines the most negative value in the range of permitted values. If the <a href="#value"><code>value</code></a> entered into the element is less than this, the element fails <a href="/en-US/docs/Web/HTML/Constraint_validation">constraint validation</a>. If the value of the <code>min</code> attribute isn't a number, then the element has no minimum value.</p>
    ///     <p>This value must be less than or equal to the value of the <code>max</code> attribute. If the <code>min</code> attribute is present but is not specified or is invalid, no <code>min</code> value is applied. If the <code>min</code> attribute is valid and a non-empty value is less than the minimum allowed by the <code>min</code> attribute, constraint validation will prevent form submission. See <a href="#client-side_validation">Client-side validation</a> for more information.</p>
    ///     <p>There is a special case: if the data type is periodic (such as for dates or times), the value of <code>max</code> may be lower than the value of <code>min</code>, which indicates that the range may wrap around; for example, this allows you to specify a time range from 10 PM to 4 AM.</p>
    ///   
    pub min: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, and <code>password</code>, it defines the minimum number of characters (as UTF-16 code units) the user can enter into the entry field. This must be a non-negative integer value smaller than or equal to the value specified by <code>maxlength</code>. If no <code>minlength</code> is specified, or an invalid value is specified, the input has no minimum length.</p>
    ///     <p>The input will fail <a href="/en-US/docs/Web/HTML/Constraint_validation">constraint validation</a> if the length of the text entered into the field is fewer than <code>minlength</code> UTF-16 code units long, preventing form submission. See <a href="#client-side_validation">Client-side validation</a> for more information.</p>
    ///   
    pub minlength: core::option::Option<&'life str>,
    ///
    ///     <p>The Boolean <code>multiple</code> attribute, if set, means the user can enter comma separated email addresses in the email widget or can choose more than one file with the <code>file</code> input. See the <a href="/en-US/docs/Web/HTML/Element/input/email">email</a> and <a href="/en-US/docs/Web/HTML/Element/input/file">file</a> input type.</p>
    ///   
    pub multiple: core::option::Option<bool>,
    ///
    ///     <p>A string specifying a name for the input control. This name is submitted along with the control's value when the form data is submitted.</p>
    ///     <p>Consider the <code>name</code> a required attribute (even though it's not). If an input has no <code>name</code> specified, or <code>name</code> is empty, the input's value is not submitted with the form! (Disabled controls, unchecked radio buttons, unchecked checkboxes, and reset buttons are also not sent.)</p>
    ///     <p>There are two special cases:</p>
    ///     <ol>
    ///       <li><code>_charset_</code> : If used as the name of an <code>&lt;input&gt;</code> element of type <a href="/en-US/docs/Web/HTML/Element/input/hidden">hidden</a>, the input's <code>value</code> is automatically set by the <a href="/en-US/docs/Glossary/User_agent">user agent</a> to the character encoding being used to submit the form.</li>
    ///       <li><code>isindex</code>: For historical reasons, the name <a class="external" href="https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-name" target="_blank"><code>isindex</code></a> is not allowed.</li>
    ///     </ol>
    ///     <p>The <a href="#name"><code>name</code></a> attribute creates a unique behavior for radio buttons.</p>
    ///     <p>Only one radio button in a same-named group of radio buttons can be checked at a time. Selecting any radio button in that group automatically deselects any currently-selected radio button in the same group. The value of that one checked radio button is sent along with the name if the form is submitted,</p>
    ///     <p>When tabbing into a series of same-named group of radio buttons, if one is checked, that one will receive focus. If they aren't grouped together in source order, if one of the group is checked, tabbing into the group starts when the first one in the group is encountered, skipping all those that aren't checked. In other words, if one is checked, tabbing skips the unchecked radio buttons in the group. If none are checked, the radio button group receives focus when the first button in the same name group is reached.</p>
    ///     <p>Once one of the radio buttons in a group has focus, using the arrow keys will navigate through all the radio buttons of the same name, even if the radio buttons are not grouped together in the source order.</p>
    ///     <p>When an input element is given a <code>name</code>, that name becomes a property of the owning form element's <a href="/en-US/docs/Web/API/HTMLFormElement/elements"><code>HTMLFormElement.elements</code></a> property. If you have an input whose <code>name</code> is set to <code>guest</code> and another whose <code>name</code> is <code>hat-size</code>, the following code can be used:</p>
    ///     <div class="code-example"><pre class="brush: js notranslate"><code><span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ///
    /// <span class="token keyword">let</span> guestName <span class="token operator">=</span> form<span class="token punctuation">.</span>elements<span class="token punctuation">.</span>guest<span class="token punctuation">;</span>
    /// <span class="token keyword">let</span> hatSize <span class="token operator">=</span> form<span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token string">"hat-size"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    /// </code></pre></div>
    ///     <p>When this code has run, <code>guestName</code> will be the <a href="/en-US/docs/Web/API/HTMLInputElement"><code>HTMLInputElement</code></a> for the <code>guest</code> field, and <code>hatSize</code> the object for the <code>hat-size</code> field.</p>
    ///     <div class="notecard warning" id="sect6">
    ///       <p><strong>Warning:</strong> Avoid giving form elements a <code>name</code> that corresponds to a built-in property of the form, since you would then override the predefined property or method with this reference to the corresponding input.</p>
    ///     </div>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, and <code>password</code>, the <code>pattern</code> attribute defines a regular expression that the input's <a href="#value"><code>value</code></a> must match in order for the value to pass <a href="/en-US/docs/Web/HTML/Constraint_validation">constraint validation</a>. It must be a valid JavaScript regular expression, as used by the <a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a> type, and as documented in our <a href="/en-US/docs/Web/JavaScript/Guide/Regular_expressions">guide on regular expressions</a>; the <code>'u'</code> flag is specified when compiling the regular expression, so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.</p>
    ///     <p>If the <code>pattern</code> attribute is present but is not specified or is invalid, no regular expression is applied and this attribute is ignored completely. If the pattern attribute is valid and a non-empty value does not match the pattern, constraint validation will prevent form submission.</p>
    ///     <div id="sect7" class="notecard note">
    ///       <p><strong>Note:</strong> If using the <code>pattern</code> attribute, inform the user about the expected format by including explanatory text nearby. You can also include a <a href="#title"><code>title</code></a> attribute to explain what the requirements are to match the pattern; most browsers will display this title as a tooltip. The visible explanation is required for accessibility. The tooltip is an enhancement.</p>
    ///     </div>
    ///     <p>See <a href="#client-side_validation">Client-side validation</a> for more information.</p>
    ///   
    pub pattern: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, <code>password</code>, and <code>number</code>, the <code>placeholder</code> attribute provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that provides a hint as to the expected type of data, rather than an explanation or prompt. The text <em>must not</em> include carriage returns or line feeds. So for example if a field is expected to capture a user's first name, and its label is "First Name", a suitable placeholder might be "e.g. Mustafa".</p>
    ///     <div class="notecard note" id="sect8">
    ///       <p><strong>Note:</strong> The <code>placeholder</code> attribute is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See <a href="#labels">Labels</a> for more information.</p>
    ///     </div>
    ///   
    pub placeholder: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute which, if present, indicates that the user should not be able to edit the value of the input. The <code>readonly</code> attribute is supported by the <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, <code>date</code>, <code>month</code>, <code>week</code>, <code>time</code>, <code>datetime-local</code>, <code>number</code>, and <code>password</code> input types.</p>
    ///     <p>See the <a href="/en-US/docs/Web/HTML/Attributes/readonly">HTML attribute: <code>readonly</code></a> for more information.</p>
    ///   
    pub readonly: core::option::Option<bool>,
    ///
    ///     <p><code>required</code> is a Boolean attribute which, if present, indicates that the user must specify a value for the input before the owning form can be submitted. The <code>required</code> attribute is supported by <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code>, <code>date</code>, <code>month</code>, <code>week</code>, <code>time</code>, <code>datetime-local</code>, <code>number</code>, <code>password</code>, <code>checkbox</code>, <code>radio</code>, and <code>file</code> inputs.</p>
    ///     <p>See <a href="#client-side_validation">Client-side validation</a> and the <a href="/en-US/docs/Web/HTML/Attributes/required">HTML attribute: <code>required</code></a> for more information.</p>
    ///   
    pub required: core::option::Option<bool>,
    ///
    ///     <p>Valid for <code>email</code>, <code>password</code>, <code>tel</code>, <code>url</code>, and <code>text</code>, the <code>size</code> attribute specifies how much of the input is shown. Basically creates same result as setting CSS <a href="/en-US/docs/Web/CSS/width"><code>width</code></a> property with a few specialities. The actual unit of the value depends on the input type. For <code>password</code> and <code>text</code>, it is a number of characters (or <code>em</code> units) with a default value of <code>20</code>, and for others, it is pixels (or <code>px</code> units). CSS <code>width</code> takes precedence over the <code>size</code> attribute.</p>
    ///   
    pub size: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> input button only, the <code>src</code> is string specifying the URL of the image file to display to represent the graphical submit button. See the <a href="/en-US/docs/Web/HTML/Element/input/image">image</a> input type.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for <code>date</code>, <code>month</code>, <code>week</code>, <code>time</code>, <code>datetime-local</code>, <code>number</code>, and <code>range</code>, the <a href="/en-US/docs/Web/HTML/Attributes/step"><code>step</code></a> attribute is a number that specifies the granularity that the value must adhere to.</p>
    ///     <p>If not explicitly included:</p>
    ///     <ul>
    ///       <li><code>step</code> defaults to 1 for <code>number</code> and <code>range</code>.</li>
    ///       <li>Each date/time input type has a default <code>step</code> value appropriate for the type; see the individual input pages: <a href="/en-US/docs/Web/HTML/Element/input/date#step"><code>date</code></a>, <a href="/en-US/docs/Web/HTML/Element/input/datetime-local#step"><code>datetime-local</code></a>, <a href="/en-US/docs/Web/HTML/Element/input/month#step"><code>month</code></a>, <a href="/en-US/docs/Web/HTML/Element/input/time#step"><code>time</code></a>, and <a href="/en-US/docs/Web/HTML/Element/input/week#step"><code>week</code></a>.</li>
    ///     </ul>
    ///     <p>The value must be a positive number—integer or float—or the special value <code>any</code>, which means no stepping is implied, and any value is allowed (barring other constraints, such as <a href="#min"><code>min</code></a> and <a href="#max"><code>max</code></a>).</p>
    ///     <p>If <code>any</code> is not explicitly set, valid values for the <code>number</code>, date/time input types, and <code>range</code> input types are equal to the basis for stepping — the <a href="#min"><code>min</code></a> value and increments of the step value, up to the <a href="#max"><code>max</code></a> value, if specified.</p>
    ///     <p>For example, if you have <code>&lt;input type="number" min="10" step="2"&gt;</code>, then any even integer, <code>10</code> or greater, is valid. If omitted, <code>&lt;input type="number"&gt;</code>, any integer is valid, but floats (like <code>4.2</code>) are not valid, because <code>step</code> defaults to <code>1</code>. For <code>4.2</code> to be valid, <code>step</code> would have had to be set to <code>any</code>, 0.1, 0.2, or any the <code>min</code> value would have had to be a number ending in <code>.2</code>, such as <code>&lt;input type="number" min="-5.2"&gt;</code></p>
    ///     <div id="sect9" class="notecard note">
    ///       <p><strong>Note:</strong> When the data entered by the user doesn't adhere to the stepping configuration, the value is considered invalid in constraint validation and will match the <code>:invalid</code> pseudoclass.</p>
    ///     </div>
    ///     <p>See <a href="#client-side_validation">Client-side validation</a> for more information.</p>
    ///   
    pub step: core::option::Option<&'life str>,
    ///
    ///     <p>Global attribute valid for all elements, including all the input types, an integer attribute indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation. As all input types except for input of type hidden are focusable, this attribute should not be used on form controls, because doing so would require the management of the focus order for all elements within the document with the risk of harming usability and accessibility if done incorrectly.</p>
    ///   
    pub tabindex: core::option::Option<&'life str>,
    ///
    ///     <p>Global attribute valid for all elements, including all input types, containing a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip. The title should NOT be used as the primary explanation of the purpose of the form control. Instead, use the <a href="/en-US/docs/Web/HTML/Element/label"><code>&lt;label&gt;</code></a> element with a <code>for</code> attribute set to the form control's <a href="#id"><code>id</code></a> attribute. See <a href="#labels">Labels</a> below.</p>
    ///   
    pub title: core::option::Option<&'life str>,
    ///
    ///     <p>A string specifying the type of control to render. For example, to create a checkbox, a value of <code>checkbox</code> is used. If omitted (or an unknown value is specified), the input type <code>text</code> is used, creating a plaintext input field.</p>
    ///     <p>Permitted values are listed in <a href="#input_types">Input types</a> above.</p>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>The input control's value. When specified in the HTML, this is the initial value, and from then on it can be altered or retrieved at any time using JavaScript to access the respective <a href="/en-US/docs/Web/API/HTMLInputElement"><code>HTMLInputElement</code></a> object's <code>value</code> property. The <code>value</code> attribute is always optional, though should be considered mandatory for <code>checkbox</code>, <code>radio</code>, and <code>hidden</code>.</p>
    ///   
    pub value: core::option::Option<&'life str>,
    ///
    ///     <p>Valid for the <code>image</code> input button only, the <code>width</code> is the width of the image file to display to represent the graphical submit button. See the <a href="/en-US/docs/Web/HTML/Element/input/image">image</a> input type.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;label&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a caption for an item in a user interface.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Label<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The value of the <code>for</code> attribute must be a single <a href="/en-US/docs/Web/HTML/Global_attributes#id"><code>id</code></a> for a <a href="/en-US/docs/Web/HTML/Content_categories#labelable">labelable</a> form-related element in the same document as the <code>&lt;label&gt;</code> element. So, any given <code>label</code> element can be associated with only one form control.</p>
    ///     <div id="sect1" class="notecard note">
    ///       <p><strong>Note:</strong> To programmatically set the <code>for</code> attribute, use <a href="/en-US/docs/Web/API/HTMLLabelElement/htmlFor"><code>htmlFor</code></a>.</p>
    ///     </div>
    ///     <p>The first element in the document with an <code>id</code> attribute matching the value of the <code>for</code> attribute is the <em>labeled control</em> for this <code>label</code> element — if the element with that <code>id</code> is actually a <a target="_blank" href="https://html.spec.whatwg.org/multipage/forms.html#category-label" class="external">labelable element</a>. If it is <em>not</em> a labelable element, then the <code>for</code> attribute has no effect. If there are other elements that also match the <code>id</code> value, later in the document, they are not considered.</p>
    ///     <p>Multiple <code>label</code> elements can be given the same value for their <code>for</code> attribute; doing so causes the associated form control (the form control that <code>for</code> value references) to have multiple labels.</p>
    ///     <div id="sect2" class="notecard note">
    ///       <p><strong>Note:</strong> A <code>&lt;label&gt;</code> element can have both a <code>for</code> attribute and a contained control element, as long as the <code>for</code> attribute points to the contained control element.</p>
    ///     </div>
    ///   
    pub for_: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;legend&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a caption for the content of its parent <a href="/en-US/docs/Web/HTML/Element/fieldset"><code>&lt;fieldset&gt;</code></a>.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Legend<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;meter&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents either a scalar value within a known range or a fractional value.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Meter<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>The lower numeric bound of the high end of the measured range. This must be less than the maximum value (<code>max</code> attribute), and it also must be greater than the low value and minimum value (<code>low</code> attribute and <code>min</code> attribute, respectively), if any are specified. If unspecified, or if greater than the maximum value, the <code>high</code> value is equal to the maximum value.</p>
    ///   
    pub high: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The upper numeric bound of the low end of the measured range. This must be greater than the minimum value (<code>min</code> attribute), and it also must be less than the high value and maximum value (<code>high</code> attribute and <code>max</code> attribute, respectively), if any are specified. If unspecified, or if less than the minimum value, the <code>low</code> value is equal to the minimum value.</p>
    ///   
    pub low: core::option::Option<&'life str>,
    ///
    ///     <p>The upper numeric bound of the measured range. This must be greater than the minimum value (<code>min</code> attribute), if specified. If unspecified, the maximum value is <code>1</code>.</p>
    ///   
    pub max: core::option::Option<&'life str>,
    ///
    ///     <p>The lower numeric bound of the measured range. This must be less than the maximum value (<code>max</code> attribute), if specified. If unspecified, the minimum value is <code>0</code>.</p>
    ///   
    pub min: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute indicates the optimal numeric value. It must be within the range (as defined by the <code>min</code> attribute and <code>max</code> attribute). When used with the <code>low</code> attribute and <code>high</code> attribute, it gives an indication where along the range is considered preferable. For example, if it is between the <code>min</code> attribute and the <code>low</code> attribute, then the lower range is considered preferred. The browser may color the meter's bar differently depending on whether the value is less than or equal to the optimum value.</p>
    ///   
    pub optimum: core::option::Option<&'life str>,
    ///
    ///     <p>The current numeric value. This must be between the minimum and maximum values (<code>min</code> attribute and <code>max</code> attribute) if they are specified. If unspecified or malformed, the value is <code>0</code>. If specified, but not within the range given by the <code>min</code> attribute and <code>max</code> attribute, the value is equal to the nearest end of the range.</p>
    ///     <div id="sect1" class="notecard note">
    ///       <p><strong>Note:</strong> Unless the <code>value</code> attribute is between <code>0</code> and <code>1</code> (inclusive), the <code>min</code> and <code>max</code> attributes should define the range so that the <code>value</code> attribute's value is within it.</p>
    ///     </div>
    ///   
    pub value: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;optgroup&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element creates a grouping of options within a <a href="/en-US/docs/Web/HTML/Element/select"><code>&lt;select&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Optgroup<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won't receive any browsing events, like mouse clicks or focus-related ones.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The name of the group of options, which the browser can use when labeling the options in the user interface. This attribute is mandatory if this element is used.</p>
    ///   
    pub label: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;option&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to define an item contained in a <a href="/en-US/docs/Web/HTML/Element/select"><code>&lt;select&gt;</code></a>, an <a href="/en-US/docs/Web/HTML/Element/optgroup"><code>&lt;optgroup&gt;</code></a>, or a <a href="/en-US/docs/Web/HTML/Element/datalist"><code>&lt;datalist&gt;</code></a> element. As such, <code>&lt;option&gt;</code> can represent menu items in popups and other lists of items in an HTML document.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Option<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>If this Boolean attribute is set, this option is not checkable. Often browsers grey out such control and it won't receive any browsing event, like mouse clicks or focus-related ones. If this attribute is not set, the element can still be disabled if one of its ancestors is a disabled <a href="/en-US/docs/Web/HTML/Element/optgroup"><code>&lt;optgroup&gt;</code></a> element.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is text for the label indicating the meaning of the option. If the <code>label</code> attribute isn't defined, its value is that of the element text content.</p>
    ///   
    pub label: core::option::Option<&'life str>,
    ///
    ///     <p>If present, this Boolean attribute indicates that the option is initially selected. If the <code>&lt;option&gt;</code> element is the descendant of a <a href="/en-US/docs/Web/HTML/Element/select"><code>&lt;select&gt;</code></a> element whose <a href="/en-US/docs/Web/HTML/Element/select#multiple"><code>multiple</code></a> attribute is not set, only one single <code>&lt;option&gt;</code> of this <a href="/en-US/docs/Web/HTML/Element/select"><code>&lt;select&gt;</code></a> element may have the <code>selected</code> attribute.</p>
    ///   
    pub selected: core::option::Option<bool>,
    ///
    ///     <p>The content of this attribute represents the value to be submitted with the form, should this option be selected. If this attribute is omitted, the value is taken from the text content of the option element.</p>
    ///   
    pub value: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;output&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Output<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of other elements' <a href="/en-US/docs/Web/HTML/Global_attributes#id"><code>id</code></a>s, indicating that those elements contributed input values to (or otherwise affected) the calculation.</p>
    ///   
    pub for_: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element to associate the output with (its <em>form owner</em>). The value of this attribute must be the <a href="/en-US/docs/Web/HTML/Global_attributes#id"><code>id</code></a> of a <code>&lt;form&gt;</code> in the same document. (If this attribute is not set, the <code>&lt;output&gt;</code> is associated with its ancestor <code>&lt;form&gt;</code> element, if any.)</p>
    ///     <p>This attribute lets you associate <code>&lt;output&gt;</code> elements to <code>&lt;form&gt;</code>s anywhere in the document, not just inside a <code>&lt;form&gt;</code>. It can also override an ancestor <code>&lt;form&gt;</code> element.</p>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The element's name. Used in the <a href="/en-US/docs/Web/API/HTMLFormElement/elements" title="form.elements"><code>form.elements</code></a> API.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;progress&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element displays an indicator showing the completion progress of a task, typically displayed as a progress bar.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Progress<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute describes how much work the task indicated by the <code>progress</code> element requires. The <code>max</code> attribute, if present, must have a value greater than <code>0</code> and be a valid floating point number. The default value is <code>1</code>.</p>
    ///   
    pub max: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies how much of the task that has been completed. It must be a valid floating point number between <code>0</code> and <code>max</code>, or between <code>0</code> and <code>1</code> if <code>max</code> is omitted. If there is no <code>value</code> attribute, the progress bar is indeterminate; this indicates that an activity is ongoing with no indication of how long it is expected to take.</p>
    ///   
    pub value: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;select&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a control that provides a menu of options.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Select<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>A string providing a hint for a <a href="/en-US/docs/Glossary/User_agent">user agent's</a> autocomplete feature. See <a href="/en-US/docs/Web/HTML/Attributes/autocomplete">The HTML autocomplete attribute</a> for a complete list of values and details on how to use autocomplete.</p>
    ///   
    pub autocomplete: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the <code>autofocus</code> attribute.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example <a href="/en-US/docs/Web/HTML/Element/fieldset"><code>&lt;fieldset&gt;</code></a>; if there is no containing element with the <code>disabled</code> attribute set, then the control is enabled.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element to associate the <code>&lt;select&gt;</code> with (its <em>form owner</em>). The value of this attribute must be the <a href="/en-US/docs/Web/HTML/Global_attributes#id"><code>id</code></a> of a <code>&lt;form&gt;</code> in the same document. (If this attribute is not set, the <code>&lt;select&gt;</code> is associated with its ancestor <code>&lt;form&gt;</code> element, if any.)</p>
    ///     <p>This attribute lets you associate <code>&lt;select&gt;</code> elements to <code>&lt;form&gt;</code>s anywhere in the document, not just inside a <code>&lt;form&gt;</code>. It can also override an ancestor <code>&lt;form&gt;</code> element.</p>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When <code>multiple</code> is specified, most browsers will show a scrolling list box instead of a single line dropdown.</p>
    ///   
    pub multiple: core::option::Option<bool>,
    ///
    ///     <p>This attribute is used to specify the name of the control.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>A Boolean attribute indicating that an option with a non-empty string value must be selected.</p>
    ///   
    pub required: core::option::Option<bool>,
    ///
    ///     <p>If the control is presented as a scrolling list box (e.g. when <code>multiple</code> is specified), this attribute represents the number of rows in the list that should be visible at one time. Browsers are not required to present a select element as a scrolled list box. The default value is <code>0</code>.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> According to the HTML specification, the default value for size should be <code>1</code>; however, in practice, this has been found to break some websites, and no other browser currently does that, so Mozilla has opted to continue to return <code>0</code> for the time being with Firefox.</p>
    ///     </div>
    ///   
    pub size: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;textarea&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Textarea<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values are:</p>
    ///     <ul>
    ///       <li><code>off</code>: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry.</li>
    ///       <li><code>on</code>: The browser can automatically complete the value based on values that the user has entered during previous uses.</li>
    ///     </ul>
    ///     <p>If the <code>autocomplete</code> attribute is not specified on a <code>&lt;textarea&gt;</code> element, then the browser uses the <code>autocomplete</code> attribute value of the <code>&lt;textarea&gt;</code> element's form owner. The form owner is either the <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element that this <code>&lt;textarea&gt;</code> element is a descendant of or the form element whose <code>id</code> is specified by the <code>form</code> attribute of the input element. For more information, see the <a href="/en-US/docs/Web/HTML/Element/form#autocomplete"><code>autocomplete</code></a> attribute in <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a>.</p>
    ///   
    pub autocomplete: core::option::Option<&'life str>,
    ///
    ///     <p>A string which indicates whether to activate automatic spelling correction and processing of text substitutions (if any are configured) while the user is editing this <code>textarea</code>. Permitted values are:</p>
    ///     <dl>
    ///       <dt id="on"><code>on</code></dt>
    ///       <dd>
    ///         <p>Enable automatic spelling correction and text substitutions.</p>
    ///       </dd>
    ///       <dt id="off"><code>off</code></dt>
    ///       <dd>
    ///         <p>Disable automatic spelling correction and text substitutions.</p>
    ///       </dd>
    ///     </dl>
    ///   
    pub autocorrect: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form-associated element in a document can have this attribute specified.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>The visible width of the text control, in average character widths. If it is specified, it must be a positive integer. If it is not specified, the default value is <code>20</code>.</p>
    ///   
    pub cols: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example <a href="/en-US/docs/Web/HTML/Element/fieldset"><code>&lt;fieldset&gt;</code></a>; if there is no containing element when the <code>disabled</code> attribute is set, the control is enabled.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The form element that the <code>&lt;textarea&gt;</code> element is associated with (its "form owner"). The value of the attribute must be the <code>id</code> of a form element in the same document. If this attribute is not specified, the <code>&lt;textarea&gt;</code> element must be a descendant of a form element. This attribute enables you to place <code>&lt;textarea&gt;</code> elements anywhere within a document, not just as descendants of form elements.</p>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The maximum number of characters (UTF-16 code units) that the user can enter. If this value isn't specified, the user can enter an unlimited number of characters.</p>
    ///   
    pub maxlength: core::option::Option<&'life str>,
    ///
    ///     <p>The minimum number of characters (UTF-16 code units) required that the user should enter.</p>
    ///   
    pub minlength: core::option::Option<&'life str>,
    ///
    ///     <p>The name of the control.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.</p>
    ///     <div id="sect1" class="notecard note">
    ///       <p><strong>Note:</strong> Placeholders should only be used to show an example of the type of data that should be entered into a form; they are <em>not</em> a substitute for a proper <a href="/en-US/docs/Web/HTML/Element/label"><code>&lt;label&gt;</code></a> element tied to the input. See <a href="/en-US/docs/Web/HTML/Element/input#labels"><code>&lt;input&gt;</code> labels</a> for a full explanation.</p>
    ///     </div>
    ///   
    pub placeholder: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the <code>disabled</code> attribute, the <code>readonly</code> attribute does not prevent the user from clicking or selecting in the control. The value of a read-only control is still submitted with the form.</p>
    ///   
    pub readonly: core::option::Option<bool>,
    ///
    ///     <p>This attribute specifies that the user must fill in a value before submitting a form.</p>
    ///   
    pub required: core::option::Option<bool>,
    ///
    ///     <p>The number of visible text lines for the control. If it is specified, it must be a positive integer. If it is not specified, the default value is 2.</p>
    ///   
    pub rows: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies whether the <code>&lt;textarea&gt;</code> is subject to spell checking by the underlying browser/OS. The value can be:</p>
    ///     <ul>
    ///       <li><code>true</code>: Indicates that the element needs to have its spelling and grammar checked.</li>
    ///       <li><code>default</code> : Indicates that the element is to act according to a default behavior, possibly based on the parent element's own <code>spellcheck</code> value.</li>
    ///       <li><code>false</code> : Indicates that the element should not be spell checked.</li>
    ///     </ul>
    ///   
    pub spellcheck: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates how the control should wrap the value for form submission. Possible values are:</p>
    ///     <ul>
    ///       <li><code>hard</code>: The browser automatically inserts line breaks (CR+LF) so that each line is no longer than the width of the control; the <a href="#cols"><code>cols</code></a> attribute must be specified for this to take effect</li>
    ///       <li><code>soft</code>: The browser ensures that all line breaks in the entered value are a <code>CR+LF</code> pair, but no additional line breaks are added to the value.</li>
    ///       <li><code>off</code> <abbr title="Non-standard. Check cross-browser support before using." class="icon icon-nonstandard">
    ///     <span class="visually-hidden">Non-standard</span>
    /// </abbr>: Like <code>soft</code> but changes appearance to <code>white-space: pre</code> so line segments exceeding <code>cols</code> are not wrapped and the <code>&lt;textarea&gt;</code> becomes horizontally scrollable.</li>
    ///     </ul>
    ///     <p>If this attribute is not specified, <code>soft</code> is its default value.</p>
    ///   
    pub wrap: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;details&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the <a href="/en-US/docs/Web/HTML/Element/summary"><code>&lt;summary&gt;</code></a> element.
///
/// A disclosure widget is typically presented onscreen using a small triangle which rotates (or twists) to indicate open/closed status, with a label next to the triangle. The contents of the <code>&lt;summary&gt;</code> element are used as the label for the disclosure widget.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Details<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute indicates whether the details — that is, the contents of the <code>&lt;details&gt;</code> element — are currently visible. The details are shown when this attribute exists, or hidden when this attribute is absent. By default this attribute is absent which means the details are not visible.</p>
    ///     <div class="notecard note" id="sect1">
    ///       <p><strong>Note:</strong> You have to remove this attribute entirely to make the details hidden. <code>open="false"</code> makes the details visible because this attribute is Boolean.</p>
    ///     </div>
    ///   
    pub open: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;dialog&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Dialog<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>
    ///       Indicates that the dialog is active and can be interacted with. When the <code>open</code> attribute is not set, the dialog <em>shouldn't</em> be shown to the user.
    ///       It is recommended to use the <code>.show()</code> or <code>.showModal()</code> methods to render dialogs, rather than the <code>open</code> attribute. If a <code>&lt;dialog&gt;</code> is opened using the <code>open</code> attribute, it will be non-modal.
    ///     </p>
    ///   
    pub open: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;summary&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element specifies a summary, caption, or legend for a <a href="/en-US/docs/Web/HTML/Element/details"><code>&lt;details&gt;</code></a> element's disclosure box. Clicking the <code>&lt;summary&gt;</code> element toggles the state of the parent <code>&lt;details&gt;</code> element open and closed.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Summary<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;slot&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element—part of the <a href="/en-US/docs/Web/API/Web_components">Web Components</a> technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Slot<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The slot's name.</p>
    ///     <p>A <strong><em>named slot</em></strong> is a <code>&lt;slot&gt;</code> element with a <code>name</code> attribute.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;template&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is a mechanism for holding <a href="/en-US/docs/Glossary/HTML">HTML</a> that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript.
///
/// Think of a template as a content fragment that is being stored for subsequent use in the document. While the parser does process the contents of the <strong><code>&lt;template&gt;</code></strong> element while loading the page, it does so only to ensure that those contents are valid; the element's contents are not rendered, however.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Template<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// <p>The <strong><code>&lt;acronym&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word.</p>
/// <div id="sect2" class="notecard warning">
///   <p><strong>Warning:</strong> Don't use this element. Use the <a href="/en-US/docs/Web/HTML/Element/abbr"><code>&lt;abbr&gt;</code></a> element instead.</p>
/// </div>
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Acronym<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The obsolete <strong>HTML Applet Element</strong> (<strong><code>&lt;applet&gt;</code></strong>) embeds a Java applet into the document; this element has been deprecated in favor of <a href="/en-US/docs/Web/HTML/Element/object"><code>&lt;object&gt;</code></a>.
///
/// Use of Java applets on the Web is deprecated; most browsers no longer support use of plug-ins, including the Java plug-in.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/applet>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Applet<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is used to position the applet on the page relative to content that might flow around it. The HTML 4.01 specification defines values of <code>bottom</code>, <code>left</code>, <code>middle</code>, <code>right</code>, and <code>top</code>, whereas Microsoft and Netscape also might support <code>absbottom</code>, <code>absmiddle</code>, <code>baseline</code>, <code>center</code>, and <code>texttop</code>.</p>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute causes a descriptive text alternate to be displayed on browsers that do not support Java. Page designers should also remember that content enclosed within the <code>&lt;applet&gt;</code> element may also be rendered as alternative text.</p>
    ///   
    pub alt: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute refers to an archived or compressed version of the applet and its associated class files, which might help reduce download time.</p>
    ///   
    pub archive: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the URL of the applet's class file to be loaded and executed. Applet filenames are identified by a .class filename extension. The URL specified by code might be relative to the <code>codebase</code> attribute.</p>
    ///   
    pub code: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute gives the absolute or relative URL of the directory where applets' .class files referenced by the code attribute are stored.</p>
    ///   
    pub codebase: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>This attribute, supported by Internet Explorer 4 and higher, specifies the column name from the data source object that supplies the bound data. This attribute might be used to specify the various <a href="/en-US/docs/Web/HTML/Element/param"><code>&lt;param&gt;</code></a> elements passed to the Java applet.</p>
    ///   
    pub datafld: core::option::Option<&'life str>,
    ///
    ///     <p>Like <code>datafld</code>, this attribute is used for data binding under Internet Explorer 4. It indicates the id of the data source object that supplies the data that is bound to the <a href="/en-US/docs/Web/HTML/Element/param"><code>&lt;param&gt;</code></a> elements associated with the applet.</p>
    ///   
    pub datasrc: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the height, in pixels, that the applet needs.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>This attribute specifies additional horizontal space, in pixels, to be reserved on either side of the applet.</p>
    ///   
    pub hspace: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>In the Netscape implementation, this attribute allows access to an applet by programs in a scripting language embedded in the document.</p>
    ///   
    pub mayscript: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute assigns a name to the applet so that it can be identified by other resources; particularly scripts.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the URL of a serialized representation of an applet.</p>
    ///   
    pub object: core::option::Option<&'life str>,
    ///
    ///     <p>As defined for Internet Explorer 4 and higher, this attribute specifies a URL for an associated file for the applet. The meaning and use is unclear and not part of the HTML standard.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies additional vertical space, in pixels, to be reserved above and below the applet.</p>
    ///   
    pub vspace: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies in pixels the width that the applet needs.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;bgsound&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is deprecated. It sets up a sound file to play in the background while the page is used; use <a href="/en-US/docs/Web/HTML/Element/audio"><code>&lt;audio&gt;</code></a> instead.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bgsound>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Bgsound<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>This attribute defines a number between -10,000 and +10,000 that determines how the volume will be divided between the speakers.</p>
    ///   
    pub balance: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute indicates the number of times a sound is to be played and either has a numeric value or the keyword infinite.</p>
    ///   
    pub loop_: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the URL of the sound file to be played, which must be one of the following types: .wav, .au, or .mid.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines a number between -10,000 and 0 that determines the loudness of a page's background sound.</p>
    ///   
    pub volume: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;big&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> deprecated element renders the enclosed text at a font size one level larger than the surrounding text (<code>medium</code> becomes <code>large</code>, for example). The size is capped at the browser's maximum permitted font size.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Big<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;blink&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is a non-standard element which causes the enclosed text to flash slowly.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Blink<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;center&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is a <a href="/en-US/docs/Web/HTML/Block-level_elements">block-level element</a> that displays its block-level or inline contents centered horizontally within its containing element. The container is usually, but isn't required to be, <a href="/en-US/docs/Web/HTML/Element/body"><code>&lt;body&gt;</code></a>.
///
/// This tag has been deprecated in HTML 4 (and XHTML 1) in favor of the <a href="/en-US/docs/Web/CSS">CSS</a> <a href="/en-US/docs/Web/CSS/text-align"><code>text-align</code></a> property, which can be applied to the <a href="/en-US/docs/Web/HTML/Element/div"><code>&lt;div&gt;</code></a> element or to an individual <a href="/en-US/docs/Web/HTML/Element/p"><code>&lt;p&gt;</code></a>. For centering blocks, use other CSS properties like <a href="/en-US/docs/Web/CSS/margin-left"><code>margin-left</code></a> and <a href="/en-US/docs/Web/CSS/margin-right"><code>margin-right</code></a> and set them to <code>auto</code> (or set <a href="/en-US/docs/Web/CSS/margin"><code>margin</code></a> to <code>0 auto</code>).
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Center<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;slot&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element—part of the <a href="/en-US/docs/Web/API/Web_components">Web Components</a> technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot>

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Content<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The slot's name.</p>
    ///     <p>A <strong><em>named slot</em></strong> is a <code>&lt;slot&gt;</code> element with a <code>name</code> attribute.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;dir&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used as a container for a directory of files and/or folders, potentially with styles and icons applied by the <a href="/en-US/docs/Glossary/User_agent">user agent</a>. Do not use this obsolete element; instead, you should use the <a href="/en-US/docs/Web/HTML/Element/ul"><code>&lt;ul&gt;</code></a> element for lists, including lists of files.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dir>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Dir<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn't work in all browsers.</p>
    ///   
    pub compact: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;font&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines the font size, color and face for its content.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Font<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute sets the text color using either a named color or a color specified in the hexadecimal #RRGGBB format.</p>
    ///   
    pub color: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute contains a comma-separated list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.</p>
    ///   
    pub face: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the font size as either a numeric or relative value. Numeric values range from <code>1</code> to <code>7</code> with <code>1</code> being the smallest and <code>3</code> the default. It can be defined using a relative value, like <code>+2</code> or <code>-3</code>, which sets it relative to <code>3</code>, the default value.</p>
    ///   
    pub size: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;frame&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines a particular area in which another HTML document can be displayed. A frame should be used within a <a href="/en-US/docs/Web/HTML/Element/frameset"><code>&lt;frameset&gt;</code></a>.
///
/// Using the <code>&lt;frame&gt;</code> element is not encouraged because of certain disadvantages such as performance problems and lack of accessibility for users with screen readers. Instead of the <code>&lt;frame&gt;</code> element, <a href="/en-US/docs/Web/HTML/Element/iframe"><code>&lt;iframe&gt;</code></a> may be preferred.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Frame<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute allows you to specify a frame's border.</p>
    ///   
    pub frameborder: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines the height of the margin between frames.</p>
    ///   
    pub marginheight: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines the width of the margin between frames.</p>
    ///   
    pub marginwidth: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute is used for labeling frames. Without labeling, every link will open in the frame that it's in – the closest parent frame. See the <a href="/en-US/docs/Web/HTML/Element/a#target"><code>target</code></a> attribute for more information.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute prevents resizing of frames by users.</p>
    ///   
    pub noresize: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute defines the existence of a scrollbar. If this attribute is not used, the browser adds a scrollbar when necessary. There are two choices: "yes" for forcing a scrollbar even when it is not necessary and "no" for forcing no scrollbar even when it <em>is</em> necessary.</p>
    ///   
    pub scrolling: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the document that will be displayed by the frame.</p>
    ///   
    pub src: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;frameset&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to contain <a href="/en-US/docs/Web/HTML/Element/frame"><code>&lt;frame&gt;</code></a> elements.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Frameset<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the number and size of horizontal spaces in a frameset.</p>
    ///   
    pub cols: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the number and size of vertical spaces in a frameset.</p>
    ///   
    pub rows: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
///
///   The <strong><code>&lt;image&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is an ancient and poorly supported precursor to the <a href="/en-US/docs/Web/HTML/Element/img"><code>&lt;img&gt;</code></a> element.
///   <strong>It should not be used</strong>.
///
///
/// Some browsers will attempt to automatically convert this into an <a href="/en-US/docs/Web/HTML/Element/img"><code>&lt;img&gt;</code></a> element, and may succeed if the <a href="/en-US/docs/Web/HTML/Element/img#src"><code>src</code></a> attribute is specified as well.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/image>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Image<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;keygen&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element exists to facilitate generation of key material, and submission of the public key as part of an <a href="/en-US/docs/Learn/Forms">HTML form</a>. This mechanism is designed for use with Web-based certificate management systems. It is expected that the <code>&lt;keygen&gt;</code> element will be used in an HTML form along with other information needed to construct a certificate request, and that the result of the process will be a signed certificate.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Keygen<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute lets you specify that the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form element in a document can have the <code>autofocus</code> attribute, which is a Boolean.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A challenge string that is submitted along with the public key. Defaults to an empty string if not specified.</p>
    ///   
    pub challenge: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>This Boolean attribute indicates that the form control is not available for interaction.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>The form element that this element is associated with (its <em>form owner</em>). The value of the attribute must be an <code>id</code> of a <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element in the same document. If this attribute is not specified, this element must be a descendant of a <a href="/en-US/docs/Web/HTML/Element/form"><code>&lt;form&gt;</code></a> element. This attribute enables you to place <code>&lt;keygen&gt;</code> elements anywhere within a document, not just as descendants of their form elements.</p>
    ///   
    pub form: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The type of key generated. The default value is <code>RSA</code>.</p>
    ///   
    pub keytype: core::option::Option<&'life str>,
    ///
    ///     <p>The name of the control, which is submitted with the form data.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;marquee&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Marquee<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>Sets how the text is scrolled within the marquee. Possible values are <code>scroll</code>, <code>slide</code> and <code>alternate</code>. If no value is specified, the default value is <code>scroll</code>.</p>
    ///   
    pub behavior: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the background color through color name or hexadecimal value.</p>
    ///   
    pub bgcolor: core::option::Option<&'life str>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the direction of the scrolling within the marquee. Possible values are <code>left</code>, <code>right</code>, <code>up</code> and <code>down</code>. If no value is specified, the default value is <code>left</code>.</p>
    ///   
    pub direction: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the height in pixels or percentage value.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Sets the horizontal margin</p>
    ///   
    pub hspace: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the number of times the marquee will scroll. If no value is specified, the default value is −1, which means the marquee will scroll continuously.</p>
    ///   
    pub loop_: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the amount of scrolling at each interval in pixels. The default value is 6.</p>
    ///   
    pub scrollamount: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the interval between each scroll movement in milliseconds. The default value is 85. Note that any value smaller than 60 is ignored and the value 60 is used instead unless <code>truespeed</code> is specified.</p>
    ///   
    pub scrolldelay: core::option::Option<&'life str>,
    ///
    ///     <p>By default, <code>scrolldelay</code> values lower than 60 are ignored. If <code>truespeed</code> is present, those values are not ignored.</p>
    ///   
    pub truespeed: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the vertical margin in pixels or percentage value.</p>
    ///   
    pub vspace: core::option::Option<&'life str>,
    ///
    ///     <p>Sets the width in pixels or percentage value.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;menuitem&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element represents a command that a user is able to invoke through a popup menu. This includes context menus, as well as menus that might be attached to a menu button.
///
/// A command can either be defined explicitly, with a textual label and optional icon to describe its appearance, or alternatively as an <em>indirect command</em> whose behavior is defined by a separate element. Commands can also optionally include a checkbox or be grouped to share radio buttons. (Menu items for indirect commands gain checkboxes or radio buttons when defined against elements <code>&lt;input type="checkbox"&gt;</code> and <code>&lt;input type="radio"&gt;</code>.)
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menuitem>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Menuitem<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>Boolean attribute which indicates whether the command is selected. May only be used when the <code>type</code> attribute is <code>checkbox</code> or <code>radio</code>.</p>
    ///   
    pub checked: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies the ID of a separate element, indicating a command to be invoked indirectly. May not be used within a menu item that also includes the attributes <code>checked</code>, <code>disabled</code>, <code>icon</code>, <code>label</code>, <code>radiogroup</code> or <code>type</code>.</p>
    ///   
    pub command: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>This Boolean attribute indicates use of the same command as the menu's subject element (such as a <code>button</code> or <code>input</code>).</p>
    ///   
    pub default: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>Boolean attribute which indicates that the command is not available in the current state. Note that <code>disabled</code> is distinct from <code>hidden</code>; the <code>disabled</code> attribute is appropriate in any context where a change in circumstances might render the command relevant.</p>
    ///   
    pub disabled: core::option::Option<bool>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Image URL, used to provide a picture to represent the command.</p>
    ///   
    pub icon: core::option::Option<&'life str>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>The name of the command as shown to the user. Required when a <code>command</code> attribute is not present.</p>
    ///   
    pub label: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute specifies the name of a group of commands to be toggled as radio buttons when selected. May only be used where the <code>type</code> attribute is <code>radio</code>.</p>
    ///   
    pub radiogroup: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute indicates the kind of command, and can be one of three values.</p>
    ///     <ul>
    ///       <li><code>command</code>: A regular command with an associated action. This is the missing value default.</li>
    ///       <li><code>checkbox</code>: Represents a command that can be toggled between two different states.</li>
    ///       <li><code>radio</code>: Represent one selection from a group of commands that can be toggled as radio buttons.</li>
    ///     </ul>
    ///   
    pub type_: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;nobr&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Nobr<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;noembed&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is an obsolete, non-standard way to provide alternative, or "fallback", content for browsers that do not support the <a href="/en-US/docs/Web/HTML/Element/embed"><code>&lt;embed&gt;</code></a> element or do not support the type of <a href="/en-US/docs/Web/HTML/Content_categories#embedded_content">embedded content</a> an author wishes to use. This element was deprecated in HTML 4.01 and above in favor of placing fallback content between the opening and closing tags of an <a href="/en-US/docs/Web/HTML/Element/object"><code>&lt;object&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noembed>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Noembed<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;noframes&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element provides content to be presented in browsers that don't support (or have disabled support for) the <a href="/en-US/docs/Web/HTML/Element/frame"><code>&lt;frame&gt;</code></a> element. Although most commonly-used browsers support frames, there are exceptions, including certain special-use browsers including some mobile browsers, as well as text-mode browsers.
///
/// A <code>&lt;noframes&gt;</code> element can contain any HTML elements that are allowed within the body of an HTML document, except for the <a href="/en-US/docs/Web/HTML/Element/frameset"><code>&lt;frameset&gt;</code></a> and <a href="/en-US/docs/Web/HTML/Element/frame"><code>&lt;frame&gt;</code></a> elements, since using frames when they aren't supported doesn't make sense.
///
/// <code>&lt;noframes&gt;</code> can be used to present a message explaining that the user's browser doesn't support frames, but ideally should be used to present an alternate form of the site that doesn't use frames but still offers the same or similar functionality.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noframes>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Noframes<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;param&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element defines parameters for an <a href="/en-US/docs/Web/HTML/Element/object"><code>&lt;object&gt;</code></a> element.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Param<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>Name of the parameter.</p>
    ///   
    pub name: core::option::Option<&'life str>,
    ///
    ///     <p>Only used if the <code>valuetype</code> is set to <code>ref</code>. Specifies the MIME type of values found at the URI specified by value.</p>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies the value of the parameter.</p>
    ///   
    pub value: core::option::Option<&'life str>,
    ///
    ///     <p>Specifies the type of the <code>value</code> attribute. Possible values are:</p>
    ///     <ul>
    ///       <li><code>data</code>: Default value. The value is passed to the object's implementation as a string.</li>
    ///       <li><code>ref</code>: The value is a URI to a resource where run-time values are stored.</li>
    ///       <li><code>object</code>: An ID of another <a href="/en-US/docs/Web/HTML/Element/object"><code>&lt;object&gt;</code></a> in the same document.</li>
    ///     </ul>
    ///   
    pub valuetype: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;plaintext&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element renders everything following the start tag as raw text, ignoring any following HTML. There is no closing tag, since everything after it is considered raw text.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/plaintext>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Plaintext<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;rb&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is used to delimit the base text component of a <a href="/en-US/docs/Web/HTML/Element/ruby"><code>&lt;ruby&gt;</code></a> annotation, i.e. the text that is being annotated. One <code>&lt;rb&gt;</code> element should wrap each separate atomic segment of the base text.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Rb<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;rtc&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element embraces semantic annotations of characters presented in a ruby of <a href="/en-US/docs/Web/HTML/Element/rb"><code>&lt;rb&gt;</code></a> elements used inside of <a href="/en-US/docs/Web/HTML/Element/ruby"><code>&lt;ruby&gt;</code></a> element. <a href="/en-US/docs/Web/HTML/Element/rb"><code>&lt;rb&gt;</code></a> elements can have both pronunciation (<a href="/en-US/docs/Web/HTML/Element/rt"><code>&lt;rt&gt;</code></a>) and semantic (<a href="/en-US/docs/Web/HTML/Element/rtc" aria-current="page"><code>&lt;rtc&gt;</code></a>) annotations.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Rtc<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;spacer&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element is an obsolete HTML element which allowed insertion of empty spaces on pages. It was devised by Netscape to accomplish the same effect as a single-pixel layout image, which was something web designers used to use to add white spaces to web pages without actually using an image. However, <code>&lt;spacer&gt;</code> is no longer supported by any major browser and the same effects can now be achieved using simple CSS.
///
/// Firefox, which is the descendant of Netscape's browsers, removed support for <code>&lt;spacer&gt;</code> in version 4.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/spacer>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Spacer<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute determines alignment of spacer. Possible values are <code>left</code>, <code>right</code> and <code>center</code>.</p>
    ///   
    pub align: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute can be used for defining height of spacer in pixels when type is <code>block</code>.</p>
    ///   
    pub height: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute can be used for defining size of spacer in pixels when type is <code>horizontal</code> or <code>vertical</code>.</p>
    ///   
    pub size: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute determines type of spacer. Possible values are <code>horizontal</code>, <code>vertical</code> and <code>block</code>.</p>
    ///   
    pub type_: core::option::Option<&'life str>,
    ///
    ///     <p>This attribute can be used for defining width of spacer in pixels when type is <code>block</code>.</p>
    ///   
    pub width: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;strike&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element places a strikethrough (horizontal line) over text.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Strike<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// The <strong><code>&lt;tt&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element creates inline text which is presented using the <a href="/en-US/docs/Glossary/User_agent">user agent's</a> default monospace font face. This element was created for the purpose of rendering text as it would be displayed on a fixed-width display such as a teletype, text-only screen, or line printer.
///
/// The terms <strong>non-proportional</strong>, <strong>monotype</strong>, and <strong>monospace</strong> are used interchangeably and have the same general meaning: they describe a typeface whose characters are all the same number of pixels wide.
///
/// This element is obsolete, however. You should use the more semantically helpful <a href="/en-US/docs/Web/HTML/Element/code"><code>&lt;code&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/kbd"><code>&lt;kbd&gt;</code></a>, <a href="/en-US/docs/Web/HTML/Element/samp"><code>&lt;samp&gt;</code></a>, or <a href="/en-US/docs/Web/HTML/Element/var"><code>&lt;var&gt;</code></a> elements for inline text that needs to be presented in monospace type, or the <a href="/en-US/docs/Web/HTML/Element/pre"><code>&lt;pre&gt;</code></a> tag for content that should be presented as a separate block.
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Tt<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// <p>The <strong><code>&lt;xmp&gt;</code></strong> <a href="/en-US/docs/Web/HTML">HTML</a> element renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line.</p>
/// <div id="sect2" class="notecard note">
///   <p><strong>Note:</strong> Do not use this element.</p>
///   <ul>
///     <li>It has been deprecated since HTML3.2 and was not implemented in a consistent way. It was completely removed from current HTML.</li>
///     <li>Use the <a href="/en-US/docs/Web/HTML/Element/pre"><code>&lt;pre&gt;</code></a> element or, if semantically adequate, the <a href="/en-US/docs/Web/HTML/Element/code"><code>&lt;code&gt;</code></a> element instead. Note that you will need to escape the '<code>&lt;</code>' character as '<code>&amp;lt;</code>' and the '<code>&amp;</code>' character as '<code>&amp;amp;</code>' to make sure they are not interpreted as markup.</li>
///     <li>A monospaced font can also be obtained on any element, by applying an adequate <a href="/en-US/docs/Web/CSS">CSS</a> style using <code>monospace</code> as the generic-font value for the <a href="/en-US/docs/Web/CSS/font-family"><code>font-family</code></a> property.</li>
///   </ul>
/// </div>
///
/// More information: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp>
#[deprecated]
#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Xmp<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
/// An unknown element.

#[derive(Debug, Clone, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct Unknown<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   
    pub accesskey: core::option::Option<&'life str>,
    ///
    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   
    pub autocapitalize: core::option::Option<&'life str>,
    ///
    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   
    pub autofocus: core::option::Option<bool>,
    ///
    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   
    pub class: core::option::Option<&'life str>,
    ///
    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   
    pub contenteditable: core::option::Option<&'life str>,
    ///
    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   
    pub contextmenu: core::option::Option<&'life str>,
    ///
    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub data: core::option::Option<alloc::collections::BTreeMap<&'life str, &'life str>>,
    ///
    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   
    pub dir: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   
    pub draggable: core::option::Option<&'life str>,
    ///
    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   
    pub enterkeyhint: core::option::Option<&'life str>,
    ///
    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   
    pub exportparts: core::option::Option<&'life str>,
    ///
    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   
    pub hidden: core::option::Option<bool>,
    ///
    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   
    pub id: core::option::Option<&'life str>,
    ///
    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   
    pub inert: core::option::Option<&'life str>,
    ///
    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   
    pub inputmode: core::option::Option<&'life str>,
    ///
    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   
    pub is: core::option::Option<&'life str>,
    /// /// The tag name of the element.
    pub tag_name: core::option::Option<&'life str>,
    /// The extra attributes of the element.
    /// This is a map of attribute names to their values.
    /// The attribute names are in lowercase.
    #[cfg(feature = "alloc")]
    pub extra: alloc::collections::BTreeMap<&'life str, &'life str>,
}
#[allow(deprecated)]
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub enum Element<'life> {
    Html(Html<'life>),
    Base(Base<'life>),
    Head(Head<'life>),
    Link(Link<'life>),
    Meta(Meta<'life>),
    Style(Style<'life>),
    Title(Title<'life>),
    Body(Body<'life>),
    Address(Address<'life>),
    Article(Article<'life>),
    Aside(Aside<'life>),
    Footer(Footer<'life>),
    Header(Header<'life>),
    Hgroup(Hgroup<'life>),
    Main(Main<'life>),
    Nav(Nav<'life>),
    Section(Section<'life>),
    Blockquote(Blockquote<'life>),
    Dd(Dd<'life>),
    Div(Div<'life>),
    Dl(Dl<'life>),
    Dt(Dt<'life>),
    Figcaption(Figcaption<'life>),
    Figure(Figure<'life>),
    Hr(Hr<'life>),
    Li(Li<'life>),
    Menu(Menu<'life>),
    Ol(Ol<'life>),
    P(P<'life>),
    Pre(Pre<'life>),
    Ul(Ul<'life>),
    A(A<'life>),
    Abbr(Abbr<'life>),
    B(B<'life>),
    Bdi(Bdi<'life>),
    Bdo(Bdo<'life>),
    Br(Br<'life>),
    Cite(Cite<'life>),
    Code(Code<'life>),
    Data(Data<'life>),
    Dfn(Dfn<'life>),
    Em(Em<'life>),
    I(I<'life>),
    Kbd(Kbd<'life>),
    Mark(Mark<'life>),
    Q(Q<'life>),
    Rp(Rp<'life>),
    Rt(Rt<'life>),
    Ruby(Ruby<'life>),
    S(S<'life>),
    Samp(Samp<'life>),
    Small(Small<'life>),
    Span(Span<'life>),
    Strong(Strong<'life>),
    Sub(Sub<'life>),
    Sup(Sup<'life>),
    Time(Time<'life>),
    U(U<'life>),
    Var(Var<'life>),
    Wbr(Wbr<'life>),
    Area(Area<'life>),
    Audio(Audio<'life>),
    Img(Img<'life>),
    Map(Map<'life>),
    Track(Track<'life>),
    Video(Video<'life>),
    Embed(Embed<'life>),
    Iframe(Iframe<'life>),
    Object(Object<'life>),
    Picture(Picture<'life>),
    Portal(Portal<'life>),
    Source(Source<'life>),
    Canvas(Canvas<'life>),
    Noscript(Noscript<'life>),
    Script(Script<'life>),
    Del(Del<'life>),
    Ins(Ins<'life>),
    Caption(Caption<'life>),
    Col(Col<'life>),
    Colgroup(Colgroup<'life>),
    Table(Table<'life>),
    Tbody(Tbody<'life>),
    Td(Td<'life>),
    Tfoot(Tfoot<'life>),
    Th(Th<'life>),
    Thead(Thead<'life>),
    Tr(Tr<'life>),
    Button(Button<'life>),
    Datalist(Datalist<'life>),
    Fieldset(Fieldset<'life>),
    Form(Form<'life>),
    Input(Input<'life>),
    Label(Label<'life>),
    Legend(Legend<'life>),
    Meter(Meter<'life>),
    Optgroup(Optgroup<'life>),
    Option(Option<'life>),
    Output(Output<'life>),
    Progress(Progress<'life>),
    Select(Select<'life>),
    Textarea(Textarea<'life>),
    Details(Details<'life>),
    Dialog(Dialog<'life>),
    Summary(Summary<'life>),
    Slot(Slot<'life>),
    Template(Template<'life>),
    #[deprecated]
    Acronym(Acronym<'life>),
    #[deprecated]
    Applet(Applet<'life>),
    #[deprecated]
    Bgsound(Bgsound<'life>),
    #[deprecated]
    Big(Big<'life>),
    #[deprecated]
    Blink(Blink<'life>),
    #[deprecated]
    Center(Center<'life>),
    Content(Content<'life>),
    #[deprecated]
    Dir(Dir<'life>),
    #[deprecated]
    Font(Font<'life>),
    #[deprecated]
    Frame(Frame<'life>),
    #[deprecated]
    Frameset(Frameset<'life>),
    #[deprecated]
    Image(Image<'life>),
    #[deprecated]
    Keygen(Keygen<'life>),
    #[deprecated]
    Marquee(Marquee<'life>),
    #[deprecated]
    Menuitem(Menuitem<'life>),
    #[deprecated]
    Nobr(Nobr<'life>),
    #[deprecated]
    Noembed(Noembed<'life>),
    #[deprecated]
    Noframes(Noframes<'life>),
    #[deprecated]
    Param(Param<'life>),
    #[deprecated]
    Plaintext(Plaintext<'life>),
    #[deprecated]
    Rb(Rb<'life>),
    #[deprecated]
    Rtc(Rtc<'life>),
    #[deprecated]
    Spacer(Spacer<'life>),
    #[deprecated]
    Strike(Strike<'life>),
    #[deprecated]
    Tt(Tt<'life>),
    #[deprecated]
    Xmp(Xmp<'life>),
    Unknown(Unknown<'life>),
}
#[allow(deprecated)]
impl<'life> Element<'life> {
    /// Gets an element from a lowercase tag name.
    pub fn from_tag(tag: &str) -> core::option::Option<Self> {
        match tag {
            "html" => Some(Self::Html(Html::default())),
            "base" => Some(Self::Base(Base::default())),
            "head" => Some(Self::Head(Head::default())),
            "link" => Some(Self::Link(Link::default())),
            "meta" => Some(Self::Meta(Meta::default())),
            "style" => Some(Self::Style(Style::default())),
            "title" => Some(Self::Title(Title::default())),
            "body" => Some(Self::Body(Body::default())),
            "address" => Some(Self::Address(Address::default())),
            "article" => Some(Self::Article(Article::default())),
            "aside" => Some(Self::Aside(Aside::default())),
            "footer" => Some(Self::Footer(Footer::default())),
            "header" => Some(Self::Header(Header::default())),
            "hgroup" => Some(Self::Hgroup(Hgroup::default())),
            "main" => Some(Self::Main(Main::default())),
            "nav" => Some(Self::Nav(Nav::default())),
            "section" => Some(Self::Section(Section::default())),
            "blockquote" => Some(Self::Blockquote(Blockquote::default())),
            "dd" => Some(Self::Dd(Dd::default())),
            "div" => Some(Self::Div(Div::default())),
            "dl" => Some(Self::Dl(Dl::default())),
            "dt" => Some(Self::Dt(Dt::default())),
            "figcaption" => Some(Self::Figcaption(Figcaption::default())),
            "figure" => Some(Self::Figure(Figure::default())),
            "hr" => Some(Self::Hr(Hr::default())),
            "li" => Some(Self::Li(Li::default())),
            "menu" => Some(Self::Menu(Menu::default())),
            "ol" => Some(Self::Ol(Ol::default())),
            "p" => Some(Self::P(P::default())),
            "pre" => Some(Self::Pre(Pre::default())),
            "ul" => Some(Self::Ul(Ul::default())),
            "a" => Some(Self::A(A::default())),
            "abbr" => Some(Self::Abbr(Abbr::default())),
            "b" => Some(Self::B(B::default())),
            "bdi" => Some(Self::Bdi(Bdi::default())),
            "bdo" => Some(Self::Bdo(Bdo::default())),
            "br" => Some(Self::Br(Br::default())),
            "cite" => Some(Self::Cite(Cite::default())),
            "code" => Some(Self::Code(Code::default())),
            "data" => Some(Self::Data(Data::default())),
            "dfn" => Some(Self::Dfn(Dfn::default())),
            "em" => Some(Self::Em(Em::default())),
            "i" => Some(Self::I(I::default())),
            "kbd" => Some(Self::Kbd(Kbd::default())),
            "mark" => Some(Self::Mark(Mark::default())),
            "q" => Some(Self::Q(Q::default())),
            "rp" => Some(Self::Rp(Rp::default())),
            "rt" => Some(Self::Rt(Rt::default())),
            "ruby" => Some(Self::Ruby(Ruby::default())),
            "s" => Some(Self::S(S::default())),
            "samp" => Some(Self::Samp(Samp::default())),
            "small" => Some(Self::Small(Small::default())),
            "span" => Some(Self::Span(Span::default())),
            "strong" => Some(Self::Strong(Strong::default())),
            "sub" => Some(Self::Sub(Sub::default())),
            "sup" => Some(Self::Sup(Sup::default())),
            "time" => Some(Self::Time(Time::default())),
            "u" => Some(Self::U(U::default())),
            "var" => Some(Self::Var(Var::default())),
            "wbr" => Some(Self::Wbr(Wbr::default())),
            "area" => Some(Self::Area(Area::default())),
            "audio" => Some(Self::Audio(Audio::default())),
            "img" => Some(Self::Img(Img::default())),
            "map" => Some(Self::Map(Map::default())),
            "track" => Some(Self::Track(Track::default())),
            "video" => Some(Self::Video(Video::default())),
            "embed" => Some(Self::Embed(Embed::default())),
            "iframe" => Some(Self::Iframe(Iframe::default())),
            "object" => Some(Self::Object(Object::default())),
            "picture" => Some(Self::Picture(Picture::default())),
            "portal" => Some(Self::Portal(Portal::default())),
            "source" => Some(Self::Source(Source::default())),
            "canvas" => Some(Self::Canvas(Canvas::default())),
            "noscript" => Some(Self::Noscript(Noscript::default())),
            "script" => Some(Self::Script(Script::default())),
            "del" => Some(Self::Del(Del::default())),
            "ins" => Some(Self::Ins(Ins::default())),
            "caption" => Some(Self::Caption(Caption::default())),
            "col" => Some(Self::Col(Col::default())),
            "colgroup" => Some(Self::Colgroup(Colgroup::default())),
            "table" => Some(Self::Table(Table::default())),
            "tbody" => Some(Self::Tbody(Tbody::default())),
            "td" => Some(Self::Td(Td::default())),
            "tfoot" => Some(Self::Tfoot(Tfoot::default())),
            "th" => Some(Self::Th(Th::default())),
            "thead" => Some(Self::Thead(Thead::default())),
            "tr" => Some(Self::Tr(Tr::default())),
            "button" => Some(Self::Button(Button::default())),
            "datalist" => Some(Self::Datalist(Datalist::default())),
            "fieldset" => Some(Self::Fieldset(Fieldset::default())),
            "form" => Some(Self::Form(Form::default())),
            "input" => Some(Self::Input(Input::default())),
            "label" => Some(Self::Label(Label::default())),
            "legend" => Some(Self::Legend(Legend::default())),
            "meter" => Some(Self::Meter(Meter::default())),
            "optgroup" => Some(Self::Optgroup(Optgroup::default())),
            "option" => Some(Self::Option(Option::default())),
            "output" => Some(Self::Output(Output::default())),
            "progress" => Some(Self::Progress(Progress::default())),
            "select" => Some(Self::Select(Select::default())),
            "textarea" => Some(Self::Textarea(Textarea::default())),
            "details" => Some(Self::Details(Details::default())),
            "dialog" => Some(Self::Dialog(Dialog::default())),
            "summary" => Some(Self::Summary(Summary::default())),
            "slot" => Some(Self::Slot(Slot::default())),
            "template" => Some(Self::Template(Template::default())),
            "acronym" => Some(Self::Acronym(Acronym::default())),
            "applet" => Some(Self::Applet(Applet::default())),
            "bgsound" => Some(Self::Bgsound(Bgsound::default())),
            "big" => Some(Self::Big(Big::default())),
            "blink" => Some(Self::Blink(Blink::default())),
            "center" => Some(Self::Center(Center::default())),
            "content" => Some(Self::Content(Content::default())),
            "dir" => Some(Self::Dir(Dir::default())),
            "font" => Some(Self::Font(Font::default())),
            "frame" => Some(Self::Frame(Frame::default())),
            "frameset" => Some(Self::Frameset(Frameset::default())),
            "image" => Some(Self::Image(Image::default())),
            "keygen" => Some(Self::Keygen(Keygen::default())),
            "marquee" => Some(Self::Marquee(Marquee::default())),
            "menuitem" => Some(Self::Menuitem(Menuitem::default())),
            "nobr" => Some(Self::Nobr(Nobr::default())),
            "noembed" => Some(Self::Noembed(Noembed::default())),
            "noframes" => Some(Self::Noframes(Noframes::default())),
            "param" => Some(Self::Param(Param::default())),
            "plaintext" => Some(Self::Plaintext(Plaintext::default())),
            "rb" => Some(Self::Rb(Rb::default())),
            "rtc" => Some(Self::Rtc(Rtc::default())),
            "spacer" => Some(Self::Spacer(Spacer::default())),
            "strike" => Some(Self::Strike(Strike::default())),
            "tt" => Some(Self::Tt(Tt::default())),
            "xmp" => Some(Self::Xmp(Xmp::default())),
            "unknown" => Some(Self::Unknown(Unknown::default())),
            _ => core::option::Option::Some(Self::default()),
        }
    }
}
#[allow(deprecated)]
impl<'life> Element<'life> {
    ///     <p>Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a space-separated list of characters. The browser should use the first one that exists on the computer keyboard layout.</p>
    ///   

    pub fn accesskey(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.accesskey,
            Self::Base(e) => e.accesskey,
            Self::Head(e) => e.accesskey,
            Self::Link(e) => e.accesskey,
            Self::Meta(e) => e.accesskey,
            Self::Style(e) => e.accesskey,
            Self::Title(e) => e.accesskey,
            Self::Body(e) => e.accesskey,
            Self::Address(e) => e.accesskey,
            Self::Article(e) => e.accesskey,
            Self::Aside(e) => e.accesskey,
            Self::Footer(e) => e.accesskey,
            Self::Header(e) => e.accesskey,
            Self::Hgroup(e) => e.accesskey,
            Self::Main(e) => e.accesskey,
            Self::Nav(e) => e.accesskey,
            Self::Section(e) => e.accesskey,
            Self::Blockquote(e) => e.accesskey,
            Self::Dd(e) => e.accesskey,
            Self::Div(e) => e.accesskey,
            Self::Dl(e) => e.accesskey,
            Self::Dt(e) => e.accesskey,
            Self::Figcaption(e) => e.accesskey,
            Self::Figure(e) => e.accesskey,
            Self::Hr(e) => e.accesskey,
            Self::Li(e) => e.accesskey,
            Self::Menu(e) => e.accesskey,
            Self::Ol(e) => e.accesskey,
            Self::P(e) => e.accesskey,
            Self::Pre(e) => e.accesskey,
            Self::Ul(e) => e.accesskey,
            Self::A(e) => e.accesskey,
            Self::Abbr(e) => e.accesskey,
            Self::B(e) => e.accesskey,
            Self::Bdi(e) => e.accesskey,
            Self::Bdo(e) => e.accesskey,
            Self::Br(e) => e.accesskey,
            Self::Cite(e) => e.accesskey,
            Self::Code(e) => e.accesskey,
            Self::Data(e) => e.accesskey,
            Self::Dfn(e) => e.accesskey,
            Self::Em(e) => e.accesskey,
            Self::I(e) => e.accesskey,
            Self::Kbd(e) => e.accesskey,
            Self::Mark(e) => e.accesskey,
            Self::Q(e) => e.accesskey,
            Self::Rp(e) => e.accesskey,
            Self::Rt(e) => e.accesskey,
            Self::Ruby(e) => e.accesskey,
            Self::S(e) => e.accesskey,
            Self::Samp(e) => e.accesskey,
            Self::Small(e) => e.accesskey,
            Self::Span(e) => e.accesskey,
            Self::Strong(e) => e.accesskey,
            Self::Sub(e) => e.accesskey,
            Self::Sup(e) => e.accesskey,
            Self::Time(e) => e.accesskey,
            Self::U(e) => e.accesskey,
            Self::Var(e) => e.accesskey,
            Self::Wbr(e) => e.accesskey,
            Self::Area(e) => e.accesskey,
            Self::Audio(e) => e.accesskey,
            Self::Img(e) => e.accesskey,
            Self::Map(e) => e.accesskey,
            Self::Track(e) => e.accesskey,
            Self::Video(e) => e.accesskey,
            Self::Embed(e) => e.accesskey,
            Self::Iframe(e) => e.accesskey,
            Self::Object(e) => e.accesskey,
            Self::Picture(e) => e.accesskey,
            Self::Portal(e) => e.accesskey,
            Self::Source(e) => e.accesskey,
            Self::Canvas(e) => e.accesskey,
            Self::Noscript(e) => e.accesskey,
            Self::Script(e) => e.accesskey,
            Self::Del(e) => e.accesskey,
            Self::Ins(e) => e.accesskey,
            Self::Caption(e) => e.accesskey,
            Self::Col(e) => e.accesskey,
            Self::Colgroup(e) => e.accesskey,
            Self::Table(e) => e.accesskey,
            Self::Tbody(e) => e.accesskey,
            Self::Td(e) => e.accesskey,
            Self::Tfoot(e) => e.accesskey,
            Self::Th(e) => e.accesskey,
            Self::Thead(e) => e.accesskey,
            Self::Tr(e) => e.accesskey,
            Self::Button(e) => e.accesskey,
            Self::Datalist(e) => e.accesskey,
            Self::Fieldset(e) => e.accesskey,
            Self::Form(e) => e.accesskey,
            Self::Input(e) => e.accesskey,
            Self::Label(e) => e.accesskey,
            Self::Legend(e) => e.accesskey,
            Self::Meter(e) => e.accesskey,
            Self::Optgroup(e) => e.accesskey,
            Self::Option(e) => e.accesskey,
            Self::Output(e) => e.accesskey,
            Self::Progress(e) => e.accesskey,
            Self::Select(e) => e.accesskey,
            Self::Textarea(e) => e.accesskey,
            Self::Details(e) => e.accesskey,
            Self::Dialog(e) => e.accesskey,
            Self::Summary(e) => e.accesskey,
            Self::Slot(e) => e.accesskey,
            Self::Template(e) => e.accesskey,
            Self::Acronym(e) => e.accesskey,
            Self::Applet(e) => e.accesskey,
            Self::Bgsound(e) => e.accesskey,
            Self::Big(e) => e.accesskey,
            Self::Blink(e) => e.accesskey,
            Self::Center(e) => e.accesskey,
            Self::Content(e) => e.accesskey,
            Self::Dir(e) => e.accesskey,
            Self::Font(e) => e.accesskey,
            Self::Frame(e) => e.accesskey,
            Self::Frameset(e) => e.accesskey,
            Self::Image(e) => e.accesskey,
            Self::Keygen(e) => e.accesskey,
            Self::Marquee(e) => e.accesskey,
            Self::Menuitem(e) => e.accesskey,
            Self::Nobr(e) => e.accesskey,
            Self::Noembed(e) => e.accesskey,
            Self::Noframes(e) => e.accesskey,
            Self::Param(e) => e.accesskey,
            Self::Plaintext(e) => e.accesskey,
            Self::Rb(e) => e.accesskey,
            Self::Rtc(e) => e.accesskey,
            Self::Spacer(e) => e.accesskey,
            Self::Strike(e) => e.accesskey,
            Self::Tt(e) => e.accesskey,
            Self::Xmp(e) => e.accesskey,
            Self::Unknown(e) => e.accesskey,
        }
    }

    ///     <p>Controls whether and how text input is automatically capitalized as it is entered/edited by the user. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>off</code> or <code>none</code>, no autocapitalization is applied (all letters default to lowercase)</li>
    ///       <li><code>on</code> or <code>sentences</code>, the first letter of each sentence defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>words</code>, the first letter of each word defaults to a capital letter; all other letters default to lowercase</li>
    ///       <li><code>characters</code>, all letters should default to uppercase</li>
    ///     </ul>
    ///   

    pub fn autocapitalize(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.autocapitalize,
            Self::Base(e) => e.autocapitalize,
            Self::Head(e) => e.autocapitalize,
            Self::Link(e) => e.autocapitalize,
            Self::Meta(e) => e.autocapitalize,
            Self::Style(e) => e.autocapitalize,
            Self::Title(e) => e.autocapitalize,
            Self::Body(e) => e.autocapitalize,
            Self::Address(e) => e.autocapitalize,
            Self::Article(e) => e.autocapitalize,
            Self::Aside(e) => e.autocapitalize,
            Self::Footer(e) => e.autocapitalize,
            Self::Header(e) => e.autocapitalize,
            Self::Hgroup(e) => e.autocapitalize,
            Self::Main(e) => e.autocapitalize,
            Self::Nav(e) => e.autocapitalize,
            Self::Section(e) => e.autocapitalize,
            Self::Blockquote(e) => e.autocapitalize,
            Self::Dd(e) => e.autocapitalize,
            Self::Div(e) => e.autocapitalize,
            Self::Dl(e) => e.autocapitalize,
            Self::Dt(e) => e.autocapitalize,
            Self::Figcaption(e) => e.autocapitalize,
            Self::Figure(e) => e.autocapitalize,
            Self::Hr(e) => e.autocapitalize,
            Self::Li(e) => e.autocapitalize,
            Self::Menu(e) => e.autocapitalize,
            Self::Ol(e) => e.autocapitalize,
            Self::P(e) => e.autocapitalize,
            Self::Pre(e) => e.autocapitalize,
            Self::Ul(e) => e.autocapitalize,
            Self::A(e) => e.autocapitalize,
            Self::Abbr(e) => e.autocapitalize,
            Self::B(e) => e.autocapitalize,
            Self::Bdi(e) => e.autocapitalize,
            Self::Bdo(e) => e.autocapitalize,
            Self::Br(e) => e.autocapitalize,
            Self::Cite(e) => e.autocapitalize,
            Self::Code(e) => e.autocapitalize,
            Self::Data(e) => e.autocapitalize,
            Self::Dfn(e) => e.autocapitalize,
            Self::Em(e) => e.autocapitalize,
            Self::I(e) => e.autocapitalize,
            Self::Kbd(e) => e.autocapitalize,
            Self::Mark(e) => e.autocapitalize,
            Self::Q(e) => e.autocapitalize,
            Self::Rp(e) => e.autocapitalize,
            Self::Rt(e) => e.autocapitalize,
            Self::Ruby(e) => e.autocapitalize,
            Self::S(e) => e.autocapitalize,
            Self::Samp(e) => e.autocapitalize,
            Self::Small(e) => e.autocapitalize,
            Self::Span(e) => e.autocapitalize,
            Self::Strong(e) => e.autocapitalize,
            Self::Sub(e) => e.autocapitalize,
            Self::Sup(e) => e.autocapitalize,
            Self::Time(e) => e.autocapitalize,
            Self::U(e) => e.autocapitalize,
            Self::Var(e) => e.autocapitalize,
            Self::Wbr(e) => e.autocapitalize,
            Self::Area(e) => e.autocapitalize,
            Self::Audio(e) => e.autocapitalize,
            Self::Img(e) => e.autocapitalize,
            Self::Map(e) => e.autocapitalize,
            Self::Track(e) => e.autocapitalize,
            Self::Video(e) => e.autocapitalize,
            Self::Embed(e) => e.autocapitalize,
            Self::Iframe(e) => e.autocapitalize,
            Self::Object(e) => e.autocapitalize,
            Self::Picture(e) => e.autocapitalize,
            Self::Portal(e) => e.autocapitalize,
            Self::Source(e) => e.autocapitalize,
            Self::Canvas(e) => e.autocapitalize,
            Self::Noscript(e) => e.autocapitalize,
            Self::Script(e) => e.autocapitalize,
            Self::Del(e) => e.autocapitalize,
            Self::Ins(e) => e.autocapitalize,
            Self::Caption(e) => e.autocapitalize,
            Self::Col(e) => e.autocapitalize,
            Self::Colgroup(e) => e.autocapitalize,
            Self::Table(e) => e.autocapitalize,
            Self::Tbody(e) => e.autocapitalize,
            Self::Td(e) => e.autocapitalize,
            Self::Tfoot(e) => e.autocapitalize,
            Self::Th(e) => e.autocapitalize,
            Self::Thead(e) => e.autocapitalize,
            Self::Tr(e) => e.autocapitalize,
            Self::Button(e) => e.autocapitalize,
            Self::Datalist(e) => e.autocapitalize,
            Self::Fieldset(e) => e.autocapitalize,
            Self::Form(e) => e.autocapitalize,
            Self::Input(e) => e.autocapitalize,
            Self::Label(e) => e.autocapitalize,
            Self::Legend(e) => e.autocapitalize,
            Self::Meter(e) => e.autocapitalize,
            Self::Optgroup(e) => e.autocapitalize,
            Self::Option(e) => e.autocapitalize,
            Self::Output(e) => e.autocapitalize,
            Self::Progress(e) => e.autocapitalize,
            Self::Select(e) => e.autocapitalize,
            Self::Textarea(e) => e.autocapitalize,
            Self::Details(e) => e.autocapitalize,
            Self::Dialog(e) => e.autocapitalize,
            Self::Summary(e) => e.autocapitalize,
            Self::Slot(e) => e.autocapitalize,
            Self::Template(e) => e.autocapitalize,
            Self::Acronym(e) => e.autocapitalize,
            Self::Applet(e) => e.autocapitalize,
            Self::Bgsound(e) => e.autocapitalize,
            Self::Big(e) => e.autocapitalize,
            Self::Blink(e) => e.autocapitalize,
            Self::Center(e) => e.autocapitalize,
            Self::Content(e) => e.autocapitalize,
            Self::Dir(e) => e.autocapitalize,
            Self::Font(e) => e.autocapitalize,
            Self::Frame(e) => e.autocapitalize,
            Self::Frameset(e) => e.autocapitalize,
            Self::Image(e) => e.autocapitalize,
            Self::Keygen(e) => e.autocapitalize,
            Self::Marquee(e) => e.autocapitalize,
            Self::Menuitem(e) => e.autocapitalize,
            Self::Nobr(e) => e.autocapitalize,
            Self::Noembed(e) => e.autocapitalize,
            Self::Noframes(e) => e.autocapitalize,
            Self::Param(e) => e.autocapitalize,
            Self::Plaintext(e) => e.autocapitalize,
            Self::Rb(e) => e.autocapitalize,
            Self::Rtc(e) => e.autocapitalize,
            Self::Spacer(e) => e.autocapitalize,
            Self::Strike(e) => e.autocapitalize,
            Self::Tt(e) => e.autocapitalize,
            Self::Xmp(e) => e.autocapitalize,
            Self::Unknown(e) => e.autocapitalize,
        }
    }

    ///     <p>Indicates that an element is to be focused on page load, or as soon as the <a href="/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a> it is part of is displayed. This attribute is a boolean, initially false.</p>
    ///   

    pub fn autofocus(&self) -> core::option::Option<bool> {
        match self {
            Self::Html(e) => e.autofocus,
            Self::Base(e) => e.autofocus,
            Self::Head(e) => e.autofocus,
            Self::Link(e) => e.autofocus,
            Self::Meta(e) => e.autofocus,
            Self::Style(e) => e.autofocus,
            Self::Title(e) => e.autofocus,
            Self::Body(e) => e.autofocus,
            Self::Address(e) => e.autofocus,
            Self::Article(e) => e.autofocus,
            Self::Aside(e) => e.autofocus,
            Self::Footer(e) => e.autofocus,
            Self::Header(e) => e.autofocus,
            Self::Hgroup(e) => e.autofocus,
            Self::Main(e) => e.autofocus,
            Self::Nav(e) => e.autofocus,
            Self::Section(e) => e.autofocus,
            Self::Blockquote(e) => e.autofocus,
            Self::Dd(e) => e.autofocus,
            Self::Div(e) => e.autofocus,
            Self::Dl(e) => e.autofocus,
            Self::Dt(e) => e.autofocus,
            Self::Figcaption(e) => e.autofocus,
            Self::Figure(e) => e.autofocus,
            Self::Hr(e) => e.autofocus,
            Self::Li(e) => e.autofocus,
            Self::Menu(e) => e.autofocus,
            Self::Ol(e) => e.autofocus,
            Self::P(e) => e.autofocus,
            Self::Pre(e) => e.autofocus,
            Self::Ul(e) => e.autofocus,
            Self::A(e) => e.autofocus,
            Self::Abbr(e) => e.autofocus,
            Self::B(e) => e.autofocus,
            Self::Bdi(e) => e.autofocus,
            Self::Bdo(e) => e.autofocus,
            Self::Br(e) => e.autofocus,
            Self::Cite(e) => e.autofocus,
            Self::Code(e) => e.autofocus,
            Self::Data(e) => e.autofocus,
            Self::Dfn(e) => e.autofocus,
            Self::Em(e) => e.autofocus,
            Self::I(e) => e.autofocus,
            Self::Kbd(e) => e.autofocus,
            Self::Mark(e) => e.autofocus,
            Self::Q(e) => e.autofocus,
            Self::Rp(e) => e.autofocus,
            Self::Rt(e) => e.autofocus,
            Self::Ruby(e) => e.autofocus,
            Self::S(e) => e.autofocus,
            Self::Samp(e) => e.autofocus,
            Self::Small(e) => e.autofocus,
            Self::Span(e) => e.autofocus,
            Self::Strong(e) => e.autofocus,
            Self::Sub(e) => e.autofocus,
            Self::Sup(e) => e.autofocus,
            Self::Time(e) => e.autofocus,
            Self::U(e) => e.autofocus,
            Self::Var(e) => e.autofocus,
            Self::Wbr(e) => e.autofocus,
            Self::Area(e) => e.autofocus,
            Self::Audio(e) => e.autofocus,
            Self::Img(e) => e.autofocus,
            Self::Map(e) => e.autofocus,
            Self::Track(e) => e.autofocus,
            Self::Video(e) => e.autofocus,
            Self::Embed(e) => e.autofocus,
            Self::Iframe(e) => e.autofocus,
            Self::Object(e) => e.autofocus,
            Self::Picture(e) => e.autofocus,
            Self::Portal(e) => e.autofocus,
            Self::Source(e) => e.autofocus,
            Self::Canvas(e) => e.autofocus,
            Self::Noscript(e) => e.autofocus,
            Self::Script(e) => e.autofocus,
            Self::Del(e) => e.autofocus,
            Self::Ins(e) => e.autofocus,
            Self::Caption(e) => e.autofocus,
            Self::Col(e) => e.autofocus,
            Self::Colgroup(e) => e.autofocus,
            Self::Table(e) => e.autofocus,
            Self::Tbody(e) => e.autofocus,
            Self::Td(e) => e.autofocus,
            Self::Tfoot(e) => e.autofocus,
            Self::Th(e) => e.autofocus,
            Self::Thead(e) => e.autofocus,
            Self::Tr(e) => e.autofocus,
            Self::Button(e) => e.autofocus,
            Self::Datalist(e) => e.autofocus,
            Self::Fieldset(e) => e.autofocus,
            Self::Form(e) => e.autofocus,
            Self::Input(e) => e.autofocus,
            Self::Label(e) => e.autofocus,
            Self::Legend(e) => e.autofocus,
            Self::Meter(e) => e.autofocus,
            Self::Optgroup(e) => e.autofocus,
            Self::Option(e) => e.autofocus,
            Self::Output(e) => e.autofocus,
            Self::Progress(e) => e.autofocus,
            Self::Select(e) => e.autofocus,
            Self::Textarea(e) => e.autofocus,
            Self::Details(e) => e.autofocus,
            Self::Dialog(e) => e.autofocus,
            Self::Summary(e) => e.autofocus,
            Self::Slot(e) => e.autofocus,
            Self::Template(e) => e.autofocus,
            Self::Acronym(e) => e.autofocus,
            Self::Applet(e) => e.autofocus,
            Self::Bgsound(e) => e.autofocus,
            Self::Big(e) => e.autofocus,
            Self::Blink(e) => e.autofocus,
            Self::Center(e) => e.autofocus,
            Self::Content(e) => e.autofocus,
            Self::Dir(e) => e.autofocus,
            Self::Font(e) => e.autofocus,
            Self::Frame(e) => e.autofocus,
            Self::Frameset(e) => e.autofocus,
            Self::Image(e) => e.autofocus,
            Self::Keygen(e) => e.autofocus,
            Self::Marquee(e) => e.autofocus,
            Self::Menuitem(e) => e.autofocus,
            Self::Nobr(e) => e.autofocus,
            Self::Noembed(e) => e.autofocus,
            Self::Noframes(e) => e.autofocus,
            Self::Param(e) => e.autofocus,
            Self::Plaintext(e) => e.autofocus,
            Self::Rb(e) => e.autofocus,
            Self::Rtc(e) => e.autofocus,
            Self::Spacer(e) => e.autofocus,
            Self::Strike(e) => e.autofocus,
            Self::Tt(e) => e.autofocus,
            Self::Xmp(e) => e.autofocus,
            Self::Unknown(e) => e.autofocus,
        }
    }

    ///     <p>A space-separated list of the classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the <a href="/en-US/docs/Web/CSS/Class_selectors">class selectors</a> or functions like the method <a href="/en-US/docs/Web/API/Document/getElementsByClassName"><code>Document.getElementsByClassName()</code></a>.</p>
    ///   

    pub fn class(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.class,
            Self::Base(e) => e.class,
            Self::Head(e) => e.class,
            Self::Link(e) => e.class,
            Self::Meta(e) => e.class,
            Self::Style(e) => e.class,
            Self::Title(e) => e.class,
            Self::Body(e) => e.class,
            Self::Address(e) => e.class,
            Self::Article(e) => e.class,
            Self::Aside(e) => e.class,
            Self::Footer(e) => e.class,
            Self::Header(e) => e.class,
            Self::Hgroup(e) => e.class,
            Self::Main(e) => e.class,
            Self::Nav(e) => e.class,
            Self::Section(e) => e.class,
            Self::Blockquote(e) => e.class,
            Self::Dd(e) => e.class,
            Self::Div(e) => e.class,
            Self::Dl(e) => e.class,
            Self::Dt(e) => e.class,
            Self::Figcaption(e) => e.class,
            Self::Figure(e) => e.class,
            Self::Hr(e) => e.class,
            Self::Li(e) => e.class,
            Self::Menu(e) => e.class,
            Self::Ol(e) => e.class,
            Self::P(e) => e.class,
            Self::Pre(e) => e.class,
            Self::Ul(e) => e.class,
            Self::A(e) => e.class,
            Self::Abbr(e) => e.class,
            Self::B(e) => e.class,
            Self::Bdi(e) => e.class,
            Self::Bdo(e) => e.class,
            Self::Br(e) => e.class,
            Self::Cite(e) => e.class,
            Self::Code(e) => e.class,
            Self::Data(e) => e.class,
            Self::Dfn(e) => e.class,
            Self::Em(e) => e.class,
            Self::I(e) => e.class,
            Self::Kbd(e) => e.class,
            Self::Mark(e) => e.class,
            Self::Q(e) => e.class,
            Self::Rp(e) => e.class,
            Self::Rt(e) => e.class,
            Self::Ruby(e) => e.class,
            Self::S(e) => e.class,
            Self::Samp(e) => e.class,
            Self::Small(e) => e.class,
            Self::Span(e) => e.class,
            Self::Strong(e) => e.class,
            Self::Sub(e) => e.class,
            Self::Sup(e) => e.class,
            Self::Time(e) => e.class,
            Self::U(e) => e.class,
            Self::Var(e) => e.class,
            Self::Wbr(e) => e.class,
            Self::Area(e) => e.class,
            Self::Audio(e) => e.class,
            Self::Img(e) => e.class,
            Self::Map(e) => e.class,
            Self::Track(e) => e.class,
            Self::Video(e) => e.class,
            Self::Embed(e) => e.class,
            Self::Iframe(e) => e.class,
            Self::Object(e) => e.class,
            Self::Picture(e) => e.class,
            Self::Portal(e) => e.class,
            Self::Source(e) => e.class,
            Self::Canvas(e) => e.class,
            Self::Noscript(e) => e.class,
            Self::Script(e) => e.class,
            Self::Del(e) => e.class,
            Self::Ins(e) => e.class,
            Self::Caption(e) => e.class,
            Self::Col(e) => e.class,
            Self::Colgroup(e) => e.class,
            Self::Table(e) => e.class,
            Self::Tbody(e) => e.class,
            Self::Td(e) => e.class,
            Self::Tfoot(e) => e.class,
            Self::Th(e) => e.class,
            Self::Thead(e) => e.class,
            Self::Tr(e) => e.class,
            Self::Button(e) => e.class,
            Self::Datalist(e) => e.class,
            Self::Fieldset(e) => e.class,
            Self::Form(e) => e.class,
            Self::Input(e) => e.class,
            Self::Label(e) => e.class,
            Self::Legend(e) => e.class,
            Self::Meter(e) => e.class,
            Self::Optgroup(e) => e.class,
            Self::Option(e) => e.class,
            Self::Output(e) => e.class,
            Self::Progress(e) => e.class,
            Self::Select(e) => e.class,
            Self::Textarea(e) => e.class,
            Self::Details(e) => e.class,
            Self::Dialog(e) => e.class,
            Self::Summary(e) => e.class,
            Self::Slot(e) => e.class,
            Self::Template(e) => e.class,
            Self::Acronym(e) => e.class,
            Self::Applet(e) => e.class,
            Self::Bgsound(e) => e.class,
            Self::Big(e) => e.class,
            Self::Blink(e) => e.class,
            Self::Center(e) => e.class,
            Self::Content(e) => e.class,
            Self::Dir(e) => e.class,
            Self::Font(e) => e.class,
            Self::Frame(e) => e.class,
            Self::Frameset(e) => e.class,
            Self::Image(e) => e.class,
            Self::Keygen(e) => e.class,
            Self::Marquee(e) => e.class,
            Self::Menuitem(e) => e.class,
            Self::Nobr(e) => e.class,
            Self::Noembed(e) => e.class,
            Self::Noframes(e) => e.class,
            Self::Param(e) => e.class,
            Self::Plaintext(e) => e.class,
            Self::Rb(e) => e.class,
            Self::Rtc(e) => e.class,
            Self::Spacer(e) => e.class,
            Self::Strike(e) => e.class,
            Self::Tt(e) => e.class,
            Self::Xmp(e) => e.class,
            Self::Unknown(e) => e.class,
        }
    }

    ///     <p>An <a href="/en-US/docs/Glossary/Enumerated">enumerated</a> attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing. The attribute must take one of the following values:</p>
    ///     <ul>
    ///       <li><code>true</code> or the <em>empty string</em>, which indicates that the element must be editable;</li>
    ///       <li><code>false</code>, which indicates that the element must not be editable.</li>
    ///     </ul>
    ///   

    pub fn contenteditable(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.contenteditable,
            Self::Base(e) => e.contenteditable,
            Self::Head(e) => e.contenteditable,
            Self::Link(e) => e.contenteditable,
            Self::Meta(e) => e.contenteditable,
            Self::Style(e) => e.contenteditable,
            Self::Title(e) => e.contenteditable,
            Self::Body(e) => e.contenteditable,
            Self::Address(e) => e.contenteditable,
            Self::Article(e) => e.contenteditable,
            Self::Aside(e) => e.contenteditable,
            Self::Footer(e) => e.contenteditable,
            Self::Header(e) => e.contenteditable,
            Self::Hgroup(e) => e.contenteditable,
            Self::Main(e) => e.contenteditable,
            Self::Nav(e) => e.contenteditable,
            Self::Section(e) => e.contenteditable,
            Self::Blockquote(e) => e.contenteditable,
            Self::Dd(e) => e.contenteditable,
            Self::Div(e) => e.contenteditable,
            Self::Dl(e) => e.contenteditable,
            Self::Dt(e) => e.contenteditable,
            Self::Figcaption(e) => e.contenteditable,
            Self::Figure(e) => e.contenteditable,
            Self::Hr(e) => e.contenteditable,
            Self::Li(e) => e.contenteditable,
            Self::Menu(e) => e.contenteditable,
            Self::Ol(e) => e.contenteditable,
            Self::P(e) => e.contenteditable,
            Self::Pre(e) => e.contenteditable,
            Self::Ul(e) => e.contenteditable,
            Self::A(e) => e.contenteditable,
            Self::Abbr(e) => e.contenteditable,
            Self::B(e) => e.contenteditable,
            Self::Bdi(e) => e.contenteditable,
            Self::Bdo(e) => e.contenteditable,
            Self::Br(e) => e.contenteditable,
            Self::Cite(e) => e.contenteditable,
            Self::Code(e) => e.contenteditable,
            Self::Data(e) => e.contenteditable,
            Self::Dfn(e) => e.contenteditable,
            Self::Em(e) => e.contenteditable,
            Self::I(e) => e.contenteditable,
            Self::Kbd(e) => e.contenteditable,
            Self::Mark(e) => e.contenteditable,
            Self::Q(e) => e.contenteditable,
            Self::Rp(e) => e.contenteditable,
            Self::Rt(e) => e.contenteditable,
            Self::Ruby(e) => e.contenteditable,
            Self::S(e) => e.contenteditable,
            Self::Samp(e) => e.contenteditable,
            Self::Small(e) => e.contenteditable,
            Self::Span(e) => e.contenteditable,
            Self::Strong(e) => e.contenteditable,
            Self::Sub(e) => e.contenteditable,
            Self::Sup(e) => e.contenteditable,
            Self::Time(e) => e.contenteditable,
            Self::U(e) => e.contenteditable,
            Self::Var(e) => e.contenteditable,
            Self::Wbr(e) => e.contenteditable,
            Self::Area(e) => e.contenteditable,
            Self::Audio(e) => e.contenteditable,
            Self::Img(e) => e.contenteditable,
            Self::Map(e) => e.contenteditable,
            Self::Track(e) => e.contenteditable,
            Self::Video(e) => e.contenteditable,
            Self::Embed(e) => e.contenteditable,
            Self::Iframe(e) => e.contenteditable,
            Self::Object(e) => e.contenteditable,
            Self::Picture(e) => e.contenteditable,
            Self::Portal(e) => e.contenteditable,
            Self::Source(e) => e.contenteditable,
            Self::Canvas(e) => e.contenteditable,
            Self::Noscript(e) => e.contenteditable,
            Self::Script(e) => e.contenteditable,
            Self::Del(e) => e.contenteditable,
            Self::Ins(e) => e.contenteditable,
            Self::Caption(e) => e.contenteditable,
            Self::Col(e) => e.contenteditable,
            Self::Colgroup(e) => e.contenteditable,
            Self::Table(e) => e.contenteditable,
            Self::Tbody(e) => e.contenteditable,
            Self::Td(e) => e.contenteditable,
            Self::Tfoot(e) => e.contenteditable,
            Self::Th(e) => e.contenteditable,
            Self::Thead(e) => e.contenteditable,
            Self::Tr(e) => e.contenteditable,
            Self::Button(e) => e.contenteditable,
            Self::Datalist(e) => e.contenteditable,
            Self::Fieldset(e) => e.contenteditable,
            Self::Form(e) => e.contenteditable,
            Self::Input(e) => e.contenteditable,
            Self::Label(e) => e.contenteditable,
            Self::Legend(e) => e.contenteditable,
            Self::Meter(e) => e.contenteditable,
            Self::Optgroup(e) => e.contenteditable,
            Self::Option(e) => e.contenteditable,
            Self::Output(e) => e.contenteditable,
            Self::Progress(e) => e.contenteditable,
            Self::Select(e) => e.contenteditable,
            Self::Textarea(e) => e.contenteditable,
            Self::Details(e) => e.contenteditable,
            Self::Dialog(e) => e.contenteditable,
            Self::Summary(e) => e.contenteditable,
            Self::Slot(e) => e.contenteditable,
            Self::Template(e) => e.contenteditable,
            Self::Acronym(e) => e.contenteditable,
            Self::Applet(e) => e.contenteditable,
            Self::Bgsound(e) => e.contenteditable,
            Self::Big(e) => e.contenteditable,
            Self::Blink(e) => e.contenteditable,
            Self::Center(e) => e.contenteditable,
            Self::Content(e) => e.contenteditable,
            Self::Dir(e) => e.contenteditable,
            Self::Font(e) => e.contenteditable,
            Self::Frame(e) => e.contenteditable,
            Self::Frameset(e) => e.contenteditable,
            Self::Image(e) => e.contenteditable,
            Self::Keygen(e) => e.contenteditable,
            Self::Marquee(e) => e.contenteditable,
            Self::Menuitem(e) => e.contenteditable,
            Self::Nobr(e) => e.contenteditable,
            Self::Noembed(e) => e.contenteditable,
            Self::Noframes(e) => e.contenteditable,
            Self::Param(e) => e.contenteditable,
            Self::Plaintext(e) => e.contenteditable,
            Self::Rb(e) => e.contenteditable,
            Self::Rtc(e) => e.contenteditable,
            Self::Spacer(e) => e.contenteditable,
            Self::Strike(e) => e.contenteditable,
            Self::Tt(e) => e.contenteditable,
            Self::Xmp(e) => e.contenteditable,
            Self::Unknown(e) => e.contenteditable,
        }
    }

    ///     <p>The <a href="#id"><strong><code>id</code></strong></a> of a <a href="/en-US/docs/Web/HTML/Element/menu"><code>&lt;menu&gt;</code></a> to use as the contextual menu for this element.</p>
    ///   

    pub fn contextmenu(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.contextmenu,
            Self::Base(e) => e.contextmenu,
            Self::Head(e) => e.contextmenu,
            Self::Link(e) => e.contextmenu,
            Self::Meta(e) => e.contextmenu,
            Self::Style(e) => e.contextmenu,
            Self::Title(e) => e.contextmenu,
            Self::Body(e) => e.contextmenu,
            Self::Address(e) => e.contextmenu,
            Self::Article(e) => e.contextmenu,
            Self::Aside(e) => e.contextmenu,
            Self::Footer(e) => e.contextmenu,
            Self::Header(e) => e.contextmenu,
            Self::Hgroup(e) => e.contextmenu,
            Self::Main(e) => e.contextmenu,
            Self::Nav(e) => e.contextmenu,
            Self::Section(e) => e.contextmenu,
            Self::Blockquote(e) => e.contextmenu,
            Self::Dd(e) => e.contextmenu,
            Self::Div(e) => e.contextmenu,
            Self::Dl(e) => e.contextmenu,
            Self::Dt(e) => e.contextmenu,
            Self::Figcaption(e) => e.contextmenu,
            Self::Figure(e) => e.contextmenu,
            Self::Hr(e) => e.contextmenu,
            Self::Li(e) => e.contextmenu,
            Self::Menu(e) => e.contextmenu,
            Self::Ol(e) => e.contextmenu,
            Self::P(e) => e.contextmenu,
            Self::Pre(e) => e.contextmenu,
            Self::Ul(e) => e.contextmenu,
            Self::A(e) => e.contextmenu,
            Self::Abbr(e) => e.contextmenu,
            Self::B(e) => e.contextmenu,
            Self::Bdi(e) => e.contextmenu,
            Self::Bdo(e) => e.contextmenu,
            Self::Br(e) => e.contextmenu,
            Self::Cite(e) => e.contextmenu,
            Self::Code(e) => e.contextmenu,
            Self::Data(e) => e.contextmenu,
            Self::Dfn(e) => e.contextmenu,
            Self::Em(e) => e.contextmenu,
            Self::I(e) => e.contextmenu,
            Self::Kbd(e) => e.contextmenu,
            Self::Mark(e) => e.contextmenu,
            Self::Q(e) => e.contextmenu,
            Self::Rp(e) => e.contextmenu,
            Self::Rt(e) => e.contextmenu,
            Self::Ruby(e) => e.contextmenu,
            Self::S(e) => e.contextmenu,
            Self::Samp(e) => e.contextmenu,
            Self::Small(e) => e.contextmenu,
            Self::Span(e) => e.contextmenu,
            Self::Strong(e) => e.contextmenu,
            Self::Sub(e) => e.contextmenu,
            Self::Sup(e) => e.contextmenu,
            Self::Time(e) => e.contextmenu,
            Self::U(e) => e.contextmenu,
            Self::Var(e) => e.contextmenu,
            Self::Wbr(e) => e.contextmenu,
            Self::Area(e) => e.contextmenu,
            Self::Audio(e) => e.contextmenu,
            Self::Img(e) => e.contextmenu,
            Self::Map(e) => e.contextmenu,
            Self::Track(e) => e.contextmenu,
            Self::Video(e) => e.contextmenu,
            Self::Embed(e) => e.contextmenu,
            Self::Iframe(e) => e.contextmenu,
            Self::Object(e) => e.contextmenu,
            Self::Picture(e) => e.contextmenu,
            Self::Portal(e) => e.contextmenu,
            Self::Source(e) => e.contextmenu,
            Self::Canvas(e) => e.contextmenu,
            Self::Noscript(e) => e.contextmenu,
            Self::Script(e) => e.contextmenu,
            Self::Del(e) => e.contextmenu,
            Self::Ins(e) => e.contextmenu,
            Self::Caption(e) => e.contextmenu,
            Self::Col(e) => e.contextmenu,
            Self::Colgroup(e) => e.contextmenu,
            Self::Table(e) => e.contextmenu,
            Self::Tbody(e) => e.contextmenu,
            Self::Td(e) => e.contextmenu,
            Self::Tfoot(e) => e.contextmenu,
            Self::Th(e) => e.contextmenu,
            Self::Thead(e) => e.contextmenu,
            Self::Tr(e) => e.contextmenu,
            Self::Button(e) => e.contextmenu,
            Self::Datalist(e) => e.contextmenu,
            Self::Fieldset(e) => e.contextmenu,
            Self::Form(e) => e.contextmenu,
            Self::Input(e) => e.contextmenu,
            Self::Label(e) => e.contextmenu,
            Self::Legend(e) => e.contextmenu,
            Self::Meter(e) => e.contextmenu,
            Self::Optgroup(e) => e.contextmenu,
            Self::Option(e) => e.contextmenu,
            Self::Output(e) => e.contextmenu,
            Self::Progress(e) => e.contextmenu,
            Self::Select(e) => e.contextmenu,
            Self::Textarea(e) => e.contextmenu,
            Self::Details(e) => e.contextmenu,
            Self::Dialog(e) => e.contextmenu,
            Self::Summary(e) => e.contextmenu,
            Self::Slot(e) => e.contextmenu,
            Self::Template(e) => e.contextmenu,
            Self::Acronym(e) => e.contextmenu,
            Self::Applet(e) => e.contextmenu,
            Self::Bgsound(e) => e.contextmenu,
            Self::Big(e) => e.contextmenu,
            Self::Blink(e) => e.contextmenu,
            Self::Center(e) => e.contextmenu,
            Self::Content(e) => e.contextmenu,
            Self::Dir(e) => e.contextmenu,
            Self::Font(e) => e.contextmenu,
            Self::Frame(e) => e.contextmenu,
            Self::Frameset(e) => e.contextmenu,
            Self::Image(e) => e.contextmenu,
            Self::Keygen(e) => e.contextmenu,
            Self::Marquee(e) => e.contextmenu,
            Self::Menuitem(e) => e.contextmenu,
            Self::Nobr(e) => e.contextmenu,
            Self::Noembed(e) => e.contextmenu,
            Self::Noframes(e) => e.contextmenu,
            Self::Param(e) => e.contextmenu,
            Self::Plaintext(e) => e.contextmenu,
            Self::Rb(e) => e.contextmenu,
            Self::Rtc(e) => e.contextmenu,
            Self::Spacer(e) => e.contextmenu,
            Self::Strike(e) => e.contextmenu,
            Self::Tt(e) => e.contextmenu,
            Self::Xmp(e) => e.contextmenu,
            Self::Unknown(e) => e.contextmenu,
        }
    }

    ///     <p>Forms a class of attributes, called custom data attributes, that allow proprietary information to be exchanged between the <a href="/en-US/docs/Web/HTML">HTML</a> and its <a href="/en-US/docs/Glossary/DOM">DOM</a> representation that may be used by scripts. All such custom data are available via the <a href="/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> interface of the element the attribute is set on. The <a href="/en-US/docs/Web/API/HTMLElement/dataset"><code>HTMLElement.dataset</code></a> property gives access to them.</p>
    ///   
    #[cfg(feature = "alloc")]
    pub fn data(
        &self,
    ) -> core::option::Option<&alloc::collections::BTreeMap<&'life str, &'life str>> {
        match self {
            Self::Html(e) => e.data.as_ref(),
            Self::Base(e) => e.data.as_ref(),
            Self::Head(e) => e.data.as_ref(),
            Self::Link(e) => e.data.as_ref(),
            Self::Meta(e) => e.data.as_ref(),
            Self::Style(e) => e.data.as_ref(),
            Self::Title(e) => e.data.as_ref(),
            Self::Body(e) => e.data.as_ref(),
            Self::Address(e) => e.data.as_ref(),
            Self::Article(e) => e.data.as_ref(),
            Self::Aside(e) => e.data.as_ref(),
            Self::Footer(e) => e.data.as_ref(),
            Self::Header(e) => e.data.as_ref(),
            Self::Hgroup(e) => e.data.as_ref(),
            Self::Main(e) => e.data.as_ref(),
            Self::Nav(e) => e.data.as_ref(),
            Self::Section(e) => e.data.as_ref(),
            Self::Blockquote(e) => e.data.as_ref(),
            Self::Dd(e) => e.data.as_ref(),
            Self::Div(e) => e.data.as_ref(),
            Self::Dl(e) => e.data.as_ref(),
            Self::Dt(e) => e.data.as_ref(),
            Self::Figcaption(e) => e.data.as_ref(),
            Self::Figure(e) => e.data.as_ref(),
            Self::Hr(e) => e.data.as_ref(),
            Self::Li(e) => e.data.as_ref(),
            Self::Menu(e) => e.data.as_ref(),
            Self::Ol(e) => e.data.as_ref(),
            Self::P(e) => e.data.as_ref(),
            Self::Pre(e) => e.data.as_ref(),
            Self::Ul(e) => e.data.as_ref(),
            Self::A(e) => e.data.as_ref(),
            Self::Abbr(e) => e.data.as_ref(),
            Self::B(e) => e.data.as_ref(),
            Self::Bdi(e) => e.data.as_ref(),
            Self::Bdo(e) => e.data.as_ref(),
            Self::Br(e) => e.data.as_ref(),
            Self::Cite(e) => e.data.as_ref(),
            Self::Code(e) => e.data.as_ref(),
            Self::Data(e) => e.data.as_ref(),
            Self::Dfn(e) => e.data.as_ref(),
            Self::Em(e) => e.data.as_ref(),
            Self::I(e) => e.data.as_ref(),
            Self::Kbd(e) => e.data.as_ref(),
            Self::Mark(e) => e.data.as_ref(),
            Self::Q(e) => e.data.as_ref(),
            Self::Rp(e) => e.data.as_ref(),
            Self::Rt(e) => e.data.as_ref(),
            Self::Ruby(e) => e.data.as_ref(),
            Self::S(e) => e.data.as_ref(),
            Self::Samp(e) => e.data.as_ref(),
            Self::Small(e) => e.data.as_ref(),
            Self::Span(e) => e.data.as_ref(),
            Self::Strong(e) => e.data.as_ref(),
            Self::Sub(e) => e.data.as_ref(),
            Self::Sup(e) => e.data.as_ref(),
            Self::Time(e) => e.data.as_ref(),
            Self::U(e) => e.data.as_ref(),
            Self::Var(e) => e.data.as_ref(),
            Self::Wbr(e) => e.data.as_ref(),
            Self::Area(e) => e.data.as_ref(),
            Self::Audio(e) => e.data.as_ref(),
            Self::Img(e) => e.data.as_ref(),
            Self::Map(e) => e.data.as_ref(),
            Self::Track(e) => e.data.as_ref(),
            Self::Video(e) => e.data.as_ref(),
            Self::Embed(e) => e.data.as_ref(),
            Self::Iframe(e) => e.data.as_ref(),
            Self::Object(e) => e.data.as_ref(),
            Self::Picture(e) => e.data.as_ref(),
            Self::Portal(e) => e.data.as_ref(),
            Self::Source(e) => e.data.as_ref(),
            Self::Canvas(e) => e.data.as_ref(),
            Self::Noscript(e) => e.data.as_ref(),
            Self::Script(e) => e.data.as_ref(),
            Self::Del(e) => e.data.as_ref(),
            Self::Ins(e) => e.data.as_ref(),
            Self::Caption(e) => e.data.as_ref(),
            Self::Col(e) => e.data.as_ref(),
            Self::Colgroup(e) => e.data.as_ref(),
            Self::Table(e) => e.data.as_ref(),
            Self::Tbody(e) => e.data.as_ref(),
            Self::Td(e) => e.data.as_ref(),
            Self::Tfoot(e) => e.data.as_ref(),
            Self::Th(e) => e.data.as_ref(),
            Self::Thead(e) => e.data.as_ref(),
            Self::Tr(e) => e.data.as_ref(),
            Self::Button(e) => e.data.as_ref(),
            Self::Datalist(e) => e.data.as_ref(),
            Self::Fieldset(e) => e.data.as_ref(),
            Self::Form(e) => e.data.as_ref(),
            Self::Input(e) => e.data.as_ref(),
            Self::Label(e) => e.data.as_ref(),
            Self::Legend(e) => e.data.as_ref(),
            Self::Meter(e) => e.data.as_ref(),
            Self::Optgroup(e) => e.data.as_ref(),
            Self::Option(e) => e.data.as_ref(),
            Self::Output(e) => e.data.as_ref(),
            Self::Progress(e) => e.data.as_ref(),
            Self::Select(e) => e.data.as_ref(),
            Self::Textarea(e) => e.data.as_ref(),
            Self::Details(e) => e.data.as_ref(),
            Self::Dialog(e) => e.data.as_ref(),
            Self::Summary(e) => e.data.as_ref(),
            Self::Slot(e) => e.data.as_ref(),
            Self::Template(e) => e.data.as_ref(),
            Self::Acronym(e) => e.data.as_ref(),
            Self::Applet(e) => e.data.as_ref(),
            Self::Bgsound(e) => e.data.as_ref(),
            Self::Big(e) => e.data.as_ref(),
            Self::Blink(e) => e.data.as_ref(),
            Self::Center(e) => e.data.as_ref(),
            Self::Content(e) => e.data.as_ref(),
            Self::Dir(e) => e.data.as_ref(),
            Self::Font(e) => e.data.as_ref(),
            Self::Frame(e) => e.data.as_ref(),
            Self::Frameset(e) => e.data.as_ref(),
            Self::Image(e) => e.data.as_ref(),
            Self::Keygen(e) => e.data.as_ref(),
            Self::Marquee(e) => e.data.as_ref(),
            Self::Menuitem(e) => e.data.as_ref(),
            Self::Nobr(e) => e.data.as_ref(),
            Self::Noembed(e) => e.data.as_ref(),
            Self::Noframes(e) => e.data.as_ref(),
            Self::Param(e) => e.data.as_ref(),
            Self::Plaintext(e) => e.data.as_ref(),
            Self::Rb(e) => e.data.as_ref(),
            Self::Rtc(e) => e.data.as_ref(),
            Self::Spacer(e) => e.data.as_ref(),
            Self::Strike(e) => e.data.as_ref(),
            Self::Tt(e) => e.data.as_ref(),
            Self::Xmp(e) => e.data.as_ref(),
            Self::Unknown(e) => e.data.as_ref(),
        }
    }

    ///     <p>An enumerated attribute indicating the directionality of the element's text. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>ltr</code>, which means <em>left to right</em> and is to be used for languages that are written from the left to the right (like English);</li>
    ///       <li><code>rtl</code>, which means <em>right to left</em> and is to be used for languages that are written from the right to the left (like Arabic);</li>
    ///       <li><code>auto</code>, which lets the user agent decide. It uses a basic algorithm as it parses the characters inside the element until it finds a character with a strong directionality, then it applies that directionality to the whole element.</li>
    ///     </ul>
    ///   

    pub fn dir(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.dir,
            Self::Base(e) => e.dir,
            Self::Head(e) => e.dir,
            Self::Link(e) => e.dir,
            Self::Meta(e) => e.dir,
            Self::Style(e) => e.dir,
            Self::Title(e) => e.dir,
            Self::Body(e) => e.dir,
            Self::Address(e) => e.dir,
            Self::Article(e) => e.dir,
            Self::Aside(e) => e.dir,
            Self::Footer(e) => e.dir,
            Self::Header(e) => e.dir,
            Self::Hgroup(e) => e.dir,
            Self::Main(e) => e.dir,
            Self::Nav(e) => e.dir,
            Self::Section(e) => e.dir,
            Self::Blockquote(e) => e.dir,
            Self::Dd(e) => e.dir,
            Self::Div(e) => e.dir,
            Self::Dl(e) => e.dir,
            Self::Dt(e) => e.dir,
            Self::Figcaption(e) => e.dir,
            Self::Figure(e) => e.dir,
            Self::Hr(e) => e.dir,
            Self::Li(e) => e.dir,
            Self::Menu(e) => e.dir,
            Self::Ol(e) => e.dir,
            Self::P(e) => e.dir,
            Self::Pre(e) => e.dir,
            Self::Ul(e) => e.dir,
            Self::A(e) => e.dir,
            Self::Abbr(e) => e.dir,
            Self::B(e) => e.dir,
            Self::Bdi(e) => e.dir,
            Self::Bdo(e) => e.dir,
            Self::Br(e) => e.dir,
            Self::Cite(e) => e.dir,
            Self::Code(e) => e.dir,
            Self::Data(e) => e.dir,
            Self::Dfn(e) => e.dir,
            Self::Em(e) => e.dir,
            Self::I(e) => e.dir,
            Self::Kbd(e) => e.dir,
            Self::Mark(e) => e.dir,
            Self::Q(e) => e.dir,
            Self::Rp(e) => e.dir,
            Self::Rt(e) => e.dir,
            Self::Ruby(e) => e.dir,
            Self::S(e) => e.dir,
            Self::Samp(e) => e.dir,
            Self::Small(e) => e.dir,
            Self::Span(e) => e.dir,
            Self::Strong(e) => e.dir,
            Self::Sub(e) => e.dir,
            Self::Sup(e) => e.dir,
            Self::Time(e) => e.dir,
            Self::U(e) => e.dir,
            Self::Var(e) => e.dir,
            Self::Wbr(e) => e.dir,
            Self::Area(e) => e.dir,
            Self::Audio(e) => e.dir,
            Self::Img(e) => e.dir,
            Self::Map(e) => e.dir,
            Self::Track(e) => e.dir,
            Self::Video(e) => e.dir,
            Self::Embed(e) => e.dir,
            Self::Iframe(e) => e.dir,
            Self::Object(e) => e.dir,
            Self::Picture(e) => e.dir,
            Self::Portal(e) => e.dir,
            Self::Source(e) => e.dir,
            Self::Canvas(e) => e.dir,
            Self::Noscript(e) => e.dir,
            Self::Script(e) => e.dir,
            Self::Del(e) => e.dir,
            Self::Ins(e) => e.dir,
            Self::Caption(e) => e.dir,
            Self::Col(e) => e.dir,
            Self::Colgroup(e) => e.dir,
            Self::Table(e) => e.dir,
            Self::Tbody(e) => e.dir,
            Self::Td(e) => e.dir,
            Self::Tfoot(e) => e.dir,
            Self::Th(e) => e.dir,
            Self::Thead(e) => e.dir,
            Self::Tr(e) => e.dir,
            Self::Button(e) => e.dir,
            Self::Datalist(e) => e.dir,
            Self::Fieldset(e) => e.dir,
            Self::Form(e) => e.dir,
            Self::Input(e) => e.dir,
            Self::Label(e) => e.dir,
            Self::Legend(e) => e.dir,
            Self::Meter(e) => e.dir,
            Self::Optgroup(e) => e.dir,
            Self::Option(e) => e.dir,
            Self::Output(e) => e.dir,
            Self::Progress(e) => e.dir,
            Self::Select(e) => e.dir,
            Self::Textarea(e) => e.dir,
            Self::Details(e) => e.dir,
            Self::Dialog(e) => e.dir,
            Self::Summary(e) => e.dir,
            Self::Slot(e) => e.dir,
            Self::Template(e) => e.dir,
            Self::Acronym(e) => e.dir,
            Self::Applet(e) => e.dir,
            Self::Bgsound(e) => e.dir,
            Self::Big(e) => e.dir,
            Self::Blink(e) => e.dir,
            Self::Center(e) => e.dir,
            Self::Content(e) => e.dir,
            Self::Dir(e) => e.dir,
            Self::Font(e) => e.dir,
            Self::Frame(e) => e.dir,
            Self::Frameset(e) => e.dir,
            Self::Image(e) => e.dir,
            Self::Keygen(e) => e.dir,
            Self::Marquee(e) => e.dir,
            Self::Menuitem(e) => e.dir,
            Self::Nobr(e) => e.dir,
            Self::Noembed(e) => e.dir,
            Self::Noframes(e) => e.dir,
            Self::Param(e) => e.dir,
            Self::Plaintext(e) => e.dir,
            Self::Rb(e) => e.dir,
            Self::Rtc(e) => e.dir,
            Self::Spacer(e) => e.dir,
            Self::Strike(e) => e.dir,
            Self::Tt(e) => e.dir,
            Self::Xmp(e) => e.dir,
            Self::Unknown(e) => e.dir,
        }
    }

    ///     <p>An enumerated attribute indicating whether the element can be dragged, using the <a href="/en-US/docs/Web/API/HTML_Drag_and_Drop_API">Drag and Drop API</a>. It can have the following values:</p>
    ///     <ul>
    ///       <li><code>true</code>, which indicates that the element may be dragged</li>
    ///       <li><code>false</code>, which indicates that the element may not be dragged.</li>
    ///     </ul>
    ///   

    pub fn draggable(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.draggable,
            Self::Base(e) => e.draggable,
            Self::Head(e) => e.draggable,
            Self::Link(e) => e.draggable,
            Self::Meta(e) => e.draggable,
            Self::Style(e) => e.draggable,
            Self::Title(e) => e.draggable,
            Self::Body(e) => e.draggable,
            Self::Address(e) => e.draggable,
            Self::Article(e) => e.draggable,
            Self::Aside(e) => e.draggable,
            Self::Footer(e) => e.draggable,
            Self::Header(e) => e.draggable,
            Self::Hgroup(e) => e.draggable,
            Self::Main(e) => e.draggable,
            Self::Nav(e) => e.draggable,
            Self::Section(e) => e.draggable,
            Self::Blockquote(e) => e.draggable,
            Self::Dd(e) => e.draggable,
            Self::Div(e) => e.draggable,
            Self::Dl(e) => e.draggable,
            Self::Dt(e) => e.draggable,
            Self::Figcaption(e) => e.draggable,
            Self::Figure(e) => e.draggable,
            Self::Hr(e) => e.draggable,
            Self::Li(e) => e.draggable,
            Self::Menu(e) => e.draggable,
            Self::Ol(e) => e.draggable,
            Self::P(e) => e.draggable,
            Self::Pre(e) => e.draggable,
            Self::Ul(e) => e.draggable,
            Self::A(e) => e.draggable,
            Self::Abbr(e) => e.draggable,
            Self::B(e) => e.draggable,
            Self::Bdi(e) => e.draggable,
            Self::Bdo(e) => e.draggable,
            Self::Br(e) => e.draggable,
            Self::Cite(e) => e.draggable,
            Self::Code(e) => e.draggable,
            Self::Data(e) => e.draggable,
            Self::Dfn(e) => e.draggable,
            Self::Em(e) => e.draggable,
            Self::I(e) => e.draggable,
            Self::Kbd(e) => e.draggable,
            Self::Mark(e) => e.draggable,
            Self::Q(e) => e.draggable,
            Self::Rp(e) => e.draggable,
            Self::Rt(e) => e.draggable,
            Self::Ruby(e) => e.draggable,
            Self::S(e) => e.draggable,
            Self::Samp(e) => e.draggable,
            Self::Small(e) => e.draggable,
            Self::Span(e) => e.draggable,
            Self::Strong(e) => e.draggable,
            Self::Sub(e) => e.draggable,
            Self::Sup(e) => e.draggable,
            Self::Time(e) => e.draggable,
            Self::U(e) => e.draggable,
            Self::Var(e) => e.draggable,
            Self::Wbr(e) => e.draggable,
            Self::Area(e) => e.draggable,
            Self::Audio(e) => e.draggable,
            Self::Img(e) => e.draggable,
            Self::Map(e) => e.draggable,
            Self::Track(e) => e.draggable,
            Self::Video(e) => e.draggable,
            Self::Embed(e) => e.draggable,
            Self::Iframe(e) => e.draggable,
            Self::Object(e) => e.draggable,
            Self::Picture(e) => e.draggable,
            Self::Portal(e) => e.draggable,
            Self::Source(e) => e.draggable,
            Self::Canvas(e) => e.draggable,
            Self::Noscript(e) => e.draggable,
            Self::Script(e) => e.draggable,
            Self::Del(e) => e.draggable,
            Self::Ins(e) => e.draggable,
            Self::Caption(e) => e.draggable,
            Self::Col(e) => e.draggable,
            Self::Colgroup(e) => e.draggable,
            Self::Table(e) => e.draggable,
            Self::Tbody(e) => e.draggable,
            Self::Td(e) => e.draggable,
            Self::Tfoot(e) => e.draggable,
            Self::Th(e) => e.draggable,
            Self::Thead(e) => e.draggable,
            Self::Tr(e) => e.draggable,
            Self::Button(e) => e.draggable,
            Self::Datalist(e) => e.draggable,
            Self::Fieldset(e) => e.draggable,
            Self::Form(e) => e.draggable,
            Self::Input(e) => e.draggable,
            Self::Label(e) => e.draggable,
            Self::Legend(e) => e.draggable,
            Self::Meter(e) => e.draggable,
            Self::Optgroup(e) => e.draggable,
            Self::Option(e) => e.draggable,
            Self::Output(e) => e.draggable,
            Self::Progress(e) => e.draggable,
            Self::Select(e) => e.draggable,
            Self::Textarea(e) => e.draggable,
            Self::Details(e) => e.draggable,
            Self::Dialog(e) => e.draggable,
            Self::Summary(e) => e.draggable,
            Self::Slot(e) => e.draggable,
            Self::Template(e) => e.draggable,
            Self::Acronym(e) => e.draggable,
            Self::Applet(e) => e.draggable,
            Self::Bgsound(e) => e.draggable,
            Self::Big(e) => e.draggable,
            Self::Blink(e) => e.draggable,
            Self::Center(e) => e.draggable,
            Self::Content(e) => e.draggable,
            Self::Dir(e) => e.draggable,
            Self::Font(e) => e.draggable,
            Self::Frame(e) => e.draggable,
            Self::Frameset(e) => e.draggable,
            Self::Image(e) => e.draggable,
            Self::Keygen(e) => e.draggable,
            Self::Marquee(e) => e.draggable,
            Self::Menuitem(e) => e.draggable,
            Self::Nobr(e) => e.draggable,
            Self::Noembed(e) => e.draggable,
            Self::Noframes(e) => e.draggable,
            Self::Param(e) => e.draggable,
            Self::Plaintext(e) => e.draggable,
            Self::Rb(e) => e.draggable,
            Self::Rtc(e) => e.draggable,
            Self::Spacer(e) => e.draggable,
            Self::Strike(e) => e.draggable,
            Self::Tt(e) => e.draggable,
            Self::Xmp(e) => e.draggable,
            Self::Unknown(e) => e.draggable,
        }
    }

    ///     <p>Hints what action label (or icon) to present for the enter key on virtual keyboards.</p>
    ///   

    pub fn enterkeyhint(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.enterkeyhint,
            Self::Base(e) => e.enterkeyhint,
            Self::Head(e) => e.enterkeyhint,
            Self::Link(e) => e.enterkeyhint,
            Self::Meta(e) => e.enterkeyhint,
            Self::Style(e) => e.enterkeyhint,
            Self::Title(e) => e.enterkeyhint,
            Self::Body(e) => e.enterkeyhint,
            Self::Address(e) => e.enterkeyhint,
            Self::Article(e) => e.enterkeyhint,
            Self::Aside(e) => e.enterkeyhint,
            Self::Footer(e) => e.enterkeyhint,
            Self::Header(e) => e.enterkeyhint,
            Self::Hgroup(e) => e.enterkeyhint,
            Self::Main(e) => e.enterkeyhint,
            Self::Nav(e) => e.enterkeyhint,
            Self::Section(e) => e.enterkeyhint,
            Self::Blockquote(e) => e.enterkeyhint,
            Self::Dd(e) => e.enterkeyhint,
            Self::Div(e) => e.enterkeyhint,
            Self::Dl(e) => e.enterkeyhint,
            Self::Dt(e) => e.enterkeyhint,
            Self::Figcaption(e) => e.enterkeyhint,
            Self::Figure(e) => e.enterkeyhint,
            Self::Hr(e) => e.enterkeyhint,
            Self::Li(e) => e.enterkeyhint,
            Self::Menu(e) => e.enterkeyhint,
            Self::Ol(e) => e.enterkeyhint,
            Self::P(e) => e.enterkeyhint,
            Self::Pre(e) => e.enterkeyhint,
            Self::Ul(e) => e.enterkeyhint,
            Self::A(e) => e.enterkeyhint,
            Self::Abbr(e) => e.enterkeyhint,
            Self::B(e) => e.enterkeyhint,
            Self::Bdi(e) => e.enterkeyhint,
            Self::Bdo(e) => e.enterkeyhint,
            Self::Br(e) => e.enterkeyhint,
            Self::Cite(e) => e.enterkeyhint,
            Self::Code(e) => e.enterkeyhint,
            Self::Data(e) => e.enterkeyhint,
            Self::Dfn(e) => e.enterkeyhint,
            Self::Em(e) => e.enterkeyhint,
            Self::I(e) => e.enterkeyhint,
            Self::Kbd(e) => e.enterkeyhint,
            Self::Mark(e) => e.enterkeyhint,
            Self::Q(e) => e.enterkeyhint,
            Self::Rp(e) => e.enterkeyhint,
            Self::Rt(e) => e.enterkeyhint,
            Self::Ruby(e) => e.enterkeyhint,
            Self::S(e) => e.enterkeyhint,
            Self::Samp(e) => e.enterkeyhint,
            Self::Small(e) => e.enterkeyhint,
            Self::Span(e) => e.enterkeyhint,
            Self::Strong(e) => e.enterkeyhint,
            Self::Sub(e) => e.enterkeyhint,
            Self::Sup(e) => e.enterkeyhint,
            Self::Time(e) => e.enterkeyhint,
            Self::U(e) => e.enterkeyhint,
            Self::Var(e) => e.enterkeyhint,
            Self::Wbr(e) => e.enterkeyhint,
            Self::Area(e) => e.enterkeyhint,
            Self::Audio(e) => e.enterkeyhint,
            Self::Img(e) => e.enterkeyhint,
            Self::Map(e) => e.enterkeyhint,
            Self::Track(e) => e.enterkeyhint,
            Self::Video(e) => e.enterkeyhint,
            Self::Embed(e) => e.enterkeyhint,
            Self::Iframe(e) => e.enterkeyhint,
            Self::Object(e) => e.enterkeyhint,
            Self::Picture(e) => e.enterkeyhint,
            Self::Portal(e) => e.enterkeyhint,
            Self::Source(e) => e.enterkeyhint,
            Self::Canvas(e) => e.enterkeyhint,
            Self::Noscript(e) => e.enterkeyhint,
            Self::Script(e) => e.enterkeyhint,
            Self::Del(e) => e.enterkeyhint,
            Self::Ins(e) => e.enterkeyhint,
            Self::Caption(e) => e.enterkeyhint,
            Self::Col(e) => e.enterkeyhint,
            Self::Colgroup(e) => e.enterkeyhint,
            Self::Table(e) => e.enterkeyhint,
            Self::Tbody(e) => e.enterkeyhint,
            Self::Td(e) => e.enterkeyhint,
            Self::Tfoot(e) => e.enterkeyhint,
            Self::Th(e) => e.enterkeyhint,
            Self::Thead(e) => e.enterkeyhint,
            Self::Tr(e) => e.enterkeyhint,
            Self::Button(e) => e.enterkeyhint,
            Self::Datalist(e) => e.enterkeyhint,
            Self::Fieldset(e) => e.enterkeyhint,
            Self::Form(e) => e.enterkeyhint,
            Self::Input(e) => e.enterkeyhint,
            Self::Label(e) => e.enterkeyhint,
            Self::Legend(e) => e.enterkeyhint,
            Self::Meter(e) => e.enterkeyhint,
            Self::Optgroup(e) => e.enterkeyhint,
            Self::Option(e) => e.enterkeyhint,
            Self::Output(e) => e.enterkeyhint,
            Self::Progress(e) => e.enterkeyhint,
            Self::Select(e) => e.enterkeyhint,
            Self::Textarea(e) => e.enterkeyhint,
            Self::Details(e) => e.enterkeyhint,
            Self::Dialog(e) => e.enterkeyhint,
            Self::Summary(e) => e.enterkeyhint,
            Self::Slot(e) => e.enterkeyhint,
            Self::Template(e) => e.enterkeyhint,
            Self::Acronym(e) => e.enterkeyhint,
            Self::Applet(e) => e.enterkeyhint,
            Self::Bgsound(e) => e.enterkeyhint,
            Self::Big(e) => e.enterkeyhint,
            Self::Blink(e) => e.enterkeyhint,
            Self::Center(e) => e.enterkeyhint,
            Self::Content(e) => e.enterkeyhint,
            Self::Dir(e) => e.enterkeyhint,
            Self::Font(e) => e.enterkeyhint,
            Self::Frame(e) => e.enterkeyhint,
            Self::Frameset(e) => e.enterkeyhint,
            Self::Image(e) => e.enterkeyhint,
            Self::Keygen(e) => e.enterkeyhint,
            Self::Marquee(e) => e.enterkeyhint,
            Self::Menuitem(e) => e.enterkeyhint,
            Self::Nobr(e) => e.enterkeyhint,
            Self::Noembed(e) => e.enterkeyhint,
            Self::Noframes(e) => e.enterkeyhint,
            Self::Param(e) => e.enterkeyhint,
            Self::Plaintext(e) => e.enterkeyhint,
            Self::Rb(e) => e.enterkeyhint,
            Self::Rtc(e) => e.enterkeyhint,
            Self::Spacer(e) => e.enterkeyhint,
            Self::Strike(e) => e.enterkeyhint,
            Self::Tt(e) => e.enterkeyhint,
            Self::Xmp(e) => e.enterkeyhint,
            Self::Unknown(e) => e.enterkeyhint,
        }
    }

    ///     <p>Used to transitively export shadow parts from a nested shadow tree into a containing light tree.</p>
    ///   

    pub fn exportparts(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.exportparts,
            Self::Base(e) => e.exportparts,
            Self::Head(e) => e.exportparts,
            Self::Link(e) => e.exportparts,
            Self::Meta(e) => e.exportparts,
            Self::Style(e) => e.exportparts,
            Self::Title(e) => e.exportparts,
            Self::Body(e) => e.exportparts,
            Self::Address(e) => e.exportparts,
            Self::Article(e) => e.exportparts,
            Self::Aside(e) => e.exportparts,
            Self::Footer(e) => e.exportparts,
            Self::Header(e) => e.exportparts,
            Self::Hgroup(e) => e.exportparts,
            Self::Main(e) => e.exportparts,
            Self::Nav(e) => e.exportparts,
            Self::Section(e) => e.exportparts,
            Self::Blockquote(e) => e.exportparts,
            Self::Dd(e) => e.exportparts,
            Self::Div(e) => e.exportparts,
            Self::Dl(e) => e.exportparts,
            Self::Dt(e) => e.exportparts,
            Self::Figcaption(e) => e.exportparts,
            Self::Figure(e) => e.exportparts,
            Self::Hr(e) => e.exportparts,
            Self::Li(e) => e.exportparts,
            Self::Menu(e) => e.exportparts,
            Self::Ol(e) => e.exportparts,
            Self::P(e) => e.exportparts,
            Self::Pre(e) => e.exportparts,
            Self::Ul(e) => e.exportparts,
            Self::A(e) => e.exportparts,
            Self::Abbr(e) => e.exportparts,
            Self::B(e) => e.exportparts,
            Self::Bdi(e) => e.exportparts,
            Self::Bdo(e) => e.exportparts,
            Self::Br(e) => e.exportparts,
            Self::Cite(e) => e.exportparts,
            Self::Code(e) => e.exportparts,
            Self::Data(e) => e.exportparts,
            Self::Dfn(e) => e.exportparts,
            Self::Em(e) => e.exportparts,
            Self::I(e) => e.exportparts,
            Self::Kbd(e) => e.exportparts,
            Self::Mark(e) => e.exportparts,
            Self::Q(e) => e.exportparts,
            Self::Rp(e) => e.exportparts,
            Self::Rt(e) => e.exportparts,
            Self::Ruby(e) => e.exportparts,
            Self::S(e) => e.exportparts,
            Self::Samp(e) => e.exportparts,
            Self::Small(e) => e.exportparts,
            Self::Span(e) => e.exportparts,
            Self::Strong(e) => e.exportparts,
            Self::Sub(e) => e.exportparts,
            Self::Sup(e) => e.exportparts,
            Self::Time(e) => e.exportparts,
            Self::U(e) => e.exportparts,
            Self::Var(e) => e.exportparts,
            Self::Wbr(e) => e.exportparts,
            Self::Area(e) => e.exportparts,
            Self::Audio(e) => e.exportparts,
            Self::Img(e) => e.exportparts,
            Self::Map(e) => e.exportparts,
            Self::Track(e) => e.exportparts,
            Self::Video(e) => e.exportparts,
            Self::Embed(e) => e.exportparts,
            Self::Iframe(e) => e.exportparts,
            Self::Object(e) => e.exportparts,
            Self::Picture(e) => e.exportparts,
            Self::Portal(e) => e.exportparts,
            Self::Source(e) => e.exportparts,
            Self::Canvas(e) => e.exportparts,
            Self::Noscript(e) => e.exportparts,
            Self::Script(e) => e.exportparts,
            Self::Del(e) => e.exportparts,
            Self::Ins(e) => e.exportparts,
            Self::Caption(e) => e.exportparts,
            Self::Col(e) => e.exportparts,
            Self::Colgroup(e) => e.exportparts,
            Self::Table(e) => e.exportparts,
            Self::Tbody(e) => e.exportparts,
            Self::Td(e) => e.exportparts,
            Self::Tfoot(e) => e.exportparts,
            Self::Th(e) => e.exportparts,
            Self::Thead(e) => e.exportparts,
            Self::Tr(e) => e.exportparts,
            Self::Button(e) => e.exportparts,
            Self::Datalist(e) => e.exportparts,
            Self::Fieldset(e) => e.exportparts,
            Self::Form(e) => e.exportparts,
            Self::Input(e) => e.exportparts,
            Self::Label(e) => e.exportparts,
            Self::Legend(e) => e.exportparts,
            Self::Meter(e) => e.exportparts,
            Self::Optgroup(e) => e.exportparts,
            Self::Option(e) => e.exportparts,
            Self::Output(e) => e.exportparts,
            Self::Progress(e) => e.exportparts,
            Self::Select(e) => e.exportparts,
            Self::Textarea(e) => e.exportparts,
            Self::Details(e) => e.exportparts,
            Self::Dialog(e) => e.exportparts,
            Self::Summary(e) => e.exportparts,
            Self::Slot(e) => e.exportparts,
            Self::Template(e) => e.exportparts,
            Self::Acronym(e) => e.exportparts,
            Self::Applet(e) => e.exportparts,
            Self::Bgsound(e) => e.exportparts,
            Self::Big(e) => e.exportparts,
            Self::Blink(e) => e.exportparts,
            Self::Center(e) => e.exportparts,
            Self::Content(e) => e.exportparts,
            Self::Dir(e) => e.exportparts,
            Self::Font(e) => e.exportparts,
            Self::Frame(e) => e.exportparts,
            Self::Frameset(e) => e.exportparts,
            Self::Image(e) => e.exportparts,
            Self::Keygen(e) => e.exportparts,
            Self::Marquee(e) => e.exportparts,
            Self::Menuitem(e) => e.exportparts,
            Self::Nobr(e) => e.exportparts,
            Self::Noembed(e) => e.exportparts,
            Self::Noframes(e) => e.exportparts,
            Self::Param(e) => e.exportparts,
            Self::Plaintext(e) => e.exportparts,
            Self::Rb(e) => e.exportparts,
            Self::Rtc(e) => e.exportparts,
            Self::Spacer(e) => e.exportparts,
            Self::Strike(e) => e.exportparts,
            Self::Tt(e) => e.exportparts,
            Self::Xmp(e) => e.exportparts,
            Self::Unknown(e) => e.exportparts,
        }
    }

    ///     <p>An enumerated attribute indicating that the element is not yet, or is no longer, <em>relevant</em>. For example, it can be used to hide elements of the page that can't be used until the login process has been completed. The browser won't render such elements. This attribute must not be used to hide content that could legitimately be shown.</p>
    ///   

    pub fn hidden(&self) -> core::option::Option<bool> {
        match self {
            Self::Html(e) => e.hidden,
            Self::Base(e) => e.hidden,
            Self::Head(e) => e.hidden,
            Self::Link(e) => e.hidden,
            Self::Meta(e) => e.hidden,
            Self::Style(e) => e.hidden,
            Self::Title(e) => e.hidden,
            Self::Body(e) => e.hidden,
            Self::Address(e) => e.hidden,
            Self::Article(e) => e.hidden,
            Self::Aside(e) => e.hidden,
            Self::Footer(e) => e.hidden,
            Self::Header(e) => e.hidden,
            Self::Hgroup(e) => e.hidden,
            Self::Main(e) => e.hidden,
            Self::Nav(e) => e.hidden,
            Self::Section(e) => e.hidden,
            Self::Blockquote(e) => e.hidden,
            Self::Dd(e) => e.hidden,
            Self::Div(e) => e.hidden,
            Self::Dl(e) => e.hidden,
            Self::Dt(e) => e.hidden,
            Self::Figcaption(e) => e.hidden,
            Self::Figure(e) => e.hidden,
            Self::Hr(e) => e.hidden,
            Self::Li(e) => e.hidden,
            Self::Menu(e) => e.hidden,
            Self::Ol(e) => e.hidden,
            Self::P(e) => e.hidden,
            Self::Pre(e) => e.hidden,
            Self::Ul(e) => e.hidden,
            Self::A(e) => e.hidden,
            Self::Abbr(e) => e.hidden,
            Self::B(e) => e.hidden,
            Self::Bdi(e) => e.hidden,
            Self::Bdo(e) => e.hidden,
            Self::Br(e) => e.hidden,
            Self::Cite(e) => e.hidden,
            Self::Code(e) => e.hidden,
            Self::Data(e) => e.hidden,
            Self::Dfn(e) => e.hidden,
            Self::Em(e) => e.hidden,
            Self::I(e) => e.hidden,
            Self::Kbd(e) => e.hidden,
            Self::Mark(e) => e.hidden,
            Self::Q(e) => e.hidden,
            Self::Rp(e) => e.hidden,
            Self::Rt(e) => e.hidden,
            Self::Ruby(e) => e.hidden,
            Self::S(e) => e.hidden,
            Self::Samp(e) => e.hidden,
            Self::Small(e) => e.hidden,
            Self::Span(e) => e.hidden,
            Self::Strong(e) => e.hidden,
            Self::Sub(e) => e.hidden,
            Self::Sup(e) => e.hidden,
            Self::Time(e) => e.hidden,
            Self::U(e) => e.hidden,
            Self::Var(e) => e.hidden,
            Self::Wbr(e) => e.hidden,
            Self::Area(e) => e.hidden,
            Self::Audio(e) => e.hidden,
            Self::Img(e) => e.hidden,
            Self::Map(e) => e.hidden,
            Self::Track(e) => e.hidden,
            Self::Video(e) => e.hidden,
            Self::Embed(e) => e.hidden,
            Self::Iframe(e) => e.hidden,
            Self::Object(e) => e.hidden,
            Self::Picture(e) => e.hidden,
            Self::Portal(e) => e.hidden,
            Self::Source(e) => e.hidden,
            Self::Canvas(e) => e.hidden,
            Self::Noscript(e) => e.hidden,
            Self::Script(e) => e.hidden,
            Self::Del(e) => e.hidden,
            Self::Ins(e) => e.hidden,
            Self::Caption(e) => e.hidden,
            Self::Col(e) => e.hidden,
            Self::Colgroup(e) => e.hidden,
            Self::Table(e) => e.hidden,
            Self::Tbody(e) => e.hidden,
            Self::Td(e) => e.hidden,
            Self::Tfoot(e) => e.hidden,
            Self::Th(e) => e.hidden,
            Self::Thead(e) => e.hidden,
            Self::Tr(e) => e.hidden,
            Self::Button(e) => e.hidden,
            Self::Datalist(e) => e.hidden,
            Self::Fieldset(e) => e.hidden,
            Self::Form(e) => e.hidden,
            Self::Input(e) => e.hidden,
            Self::Label(e) => e.hidden,
            Self::Legend(e) => e.hidden,
            Self::Meter(e) => e.hidden,
            Self::Optgroup(e) => e.hidden,
            Self::Option(e) => e.hidden,
            Self::Output(e) => e.hidden,
            Self::Progress(e) => e.hidden,
            Self::Select(e) => e.hidden,
            Self::Textarea(e) => e.hidden,
            Self::Details(e) => e.hidden,
            Self::Dialog(e) => e.hidden,
            Self::Summary(e) => e.hidden,
            Self::Slot(e) => e.hidden,
            Self::Template(e) => e.hidden,
            Self::Acronym(e) => e.hidden,
            Self::Applet(e) => e.hidden,
            Self::Bgsound(e) => e.hidden,
            Self::Big(e) => e.hidden,
            Self::Blink(e) => e.hidden,
            Self::Center(e) => e.hidden,
            Self::Content(e) => e.hidden,
            Self::Dir(e) => e.hidden,
            Self::Font(e) => e.hidden,
            Self::Frame(e) => e.hidden,
            Self::Frameset(e) => e.hidden,
            Self::Image(e) => e.hidden,
            Self::Keygen(e) => e.hidden,
            Self::Marquee(e) => e.hidden,
            Self::Menuitem(e) => e.hidden,
            Self::Nobr(e) => e.hidden,
            Self::Noembed(e) => e.hidden,
            Self::Noframes(e) => e.hidden,
            Self::Param(e) => e.hidden,
            Self::Plaintext(e) => e.hidden,
            Self::Rb(e) => e.hidden,
            Self::Rtc(e) => e.hidden,
            Self::Spacer(e) => e.hidden,
            Self::Strike(e) => e.hidden,
            Self::Tt(e) => e.hidden,
            Self::Xmp(e) => e.hidden,
            Self::Unknown(e) => e.hidden,
        }
    }

    ///     <p>Defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).</p>
    ///   

    pub fn id(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.id,
            Self::Base(e) => e.id,
            Self::Head(e) => e.id,
            Self::Link(e) => e.id,
            Self::Meta(e) => e.id,
            Self::Style(e) => e.id,
            Self::Title(e) => e.id,
            Self::Body(e) => e.id,
            Self::Address(e) => e.id,
            Self::Article(e) => e.id,
            Self::Aside(e) => e.id,
            Self::Footer(e) => e.id,
            Self::Header(e) => e.id,
            Self::Hgroup(e) => e.id,
            Self::Main(e) => e.id,
            Self::Nav(e) => e.id,
            Self::Section(e) => e.id,
            Self::Blockquote(e) => e.id,
            Self::Dd(e) => e.id,
            Self::Div(e) => e.id,
            Self::Dl(e) => e.id,
            Self::Dt(e) => e.id,
            Self::Figcaption(e) => e.id,
            Self::Figure(e) => e.id,
            Self::Hr(e) => e.id,
            Self::Li(e) => e.id,
            Self::Menu(e) => e.id,
            Self::Ol(e) => e.id,
            Self::P(e) => e.id,
            Self::Pre(e) => e.id,
            Self::Ul(e) => e.id,
            Self::A(e) => e.id,
            Self::Abbr(e) => e.id,
            Self::B(e) => e.id,
            Self::Bdi(e) => e.id,
            Self::Bdo(e) => e.id,
            Self::Br(e) => e.id,
            Self::Cite(e) => e.id,
            Self::Code(e) => e.id,
            Self::Data(e) => e.id,
            Self::Dfn(e) => e.id,
            Self::Em(e) => e.id,
            Self::I(e) => e.id,
            Self::Kbd(e) => e.id,
            Self::Mark(e) => e.id,
            Self::Q(e) => e.id,
            Self::Rp(e) => e.id,
            Self::Rt(e) => e.id,
            Self::Ruby(e) => e.id,
            Self::S(e) => e.id,
            Self::Samp(e) => e.id,
            Self::Small(e) => e.id,
            Self::Span(e) => e.id,
            Self::Strong(e) => e.id,
            Self::Sub(e) => e.id,
            Self::Sup(e) => e.id,
            Self::Time(e) => e.id,
            Self::U(e) => e.id,
            Self::Var(e) => e.id,
            Self::Wbr(e) => e.id,
            Self::Area(e) => e.id,
            Self::Audio(e) => e.id,
            Self::Img(e) => e.id,
            Self::Map(e) => e.id,
            Self::Track(e) => e.id,
            Self::Video(e) => e.id,
            Self::Embed(e) => e.id,
            Self::Iframe(e) => e.id,
            Self::Object(e) => e.id,
            Self::Picture(e) => e.id,
            Self::Portal(e) => e.id,
            Self::Source(e) => e.id,
            Self::Canvas(e) => e.id,
            Self::Noscript(e) => e.id,
            Self::Script(e) => e.id,
            Self::Del(e) => e.id,
            Self::Ins(e) => e.id,
            Self::Caption(e) => e.id,
            Self::Col(e) => e.id,
            Self::Colgroup(e) => e.id,
            Self::Table(e) => e.id,
            Self::Tbody(e) => e.id,
            Self::Td(e) => e.id,
            Self::Tfoot(e) => e.id,
            Self::Th(e) => e.id,
            Self::Thead(e) => e.id,
            Self::Tr(e) => e.id,
            Self::Button(e) => e.id,
            Self::Datalist(e) => e.id,
            Self::Fieldset(e) => e.id,
            Self::Form(e) => e.id,
            Self::Input(e) => e.id,
            Self::Label(e) => e.id,
            Self::Legend(e) => e.id,
            Self::Meter(e) => e.id,
            Self::Optgroup(e) => e.id,
            Self::Option(e) => e.id,
            Self::Output(e) => e.id,
            Self::Progress(e) => e.id,
            Self::Select(e) => e.id,
            Self::Textarea(e) => e.id,
            Self::Details(e) => e.id,
            Self::Dialog(e) => e.id,
            Self::Summary(e) => e.id,
            Self::Slot(e) => e.id,
            Self::Template(e) => e.id,
            Self::Acronym(e) => e.id,
            Self::Applet(e) => e.id,
            Self::Bgsound(e) => e.id,
            Self::Big(e) => e.id,
            Self::Blink(e) => e.id,
            Self::Center(e) => e.id,
            Self::Content(e) => e.id,
            Self::Dir(e) => e.id,
            Self::Font(e) => e.id,
            Self::Frame(e) => e.id,
            Self::Frameset(e) => e.id,
            Self::Image(e) => e.id,
            Self::Keygen(e) => e.id,
            Self::Marquee(e) => e.id,
            Self::Menuitem(e) => e.id,
            Self::Nobr(e) => e.id,
            Self::Noembed(e) => e.id,
            Self::Noframes(e) => e.id,
            Self::Param(e) => e.id,
            Self::Plaintext(e) => e.id,
            Self::Rb(e) => e.id,
            Self::Rtc(e) => e.id,
            Self::Spacer(e) => e.id,
            Self::Strike(e) => e.id,
            Self::Tt(e) => e.id,
            Self::Xmp(e) => e.id,
            Self::Unknown(e) => e.id,
        }
    }

    ///     <p>A boolean value that makes the browser disregard user input events for the element. Useful when click events are present.</p>
    ///   

    pub fn inert(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.inert,
            Self::Base(e) => e.inert,
            Self::Head(e) => e.inert,
            Self::Link(e) => e.inert,
            Self::Meta(e) => e.inert,
            Self::Style(e) => e.inert,
            Self::Title(e) => e.inert,
            Self::Body(e) => e.inert,
            Self::Address(e) => e.inert,
            Self::Article(e) => e.inert,
            Self::Aside(e) => e.inert,
            Self::Footer(e) => e.inert,
            Self::Header(e) => e.inert,
            Self::Hgroup(e) => e.inert,
            Self::Main(e) => e.inert,
            Self::Nav(e) => e.inert,
            Self::Section(e) => e.inert,
            Self::Blockquote(e) => e.inert,
            Self::Dd(e) => e.inert,
            Self::Div(e) => e.inert,
            Self::Dl(e) => e.inert,
            Self::Dt(e) => e.inert,
            Self::Figcaption(e) => e.inert,
            Self::Figure(e) => e.inert,
            Self::Hr(e) => e.inert,
            Self::Li(e) => e.inert,
            Self::Menu(e) => e.inert,
            Self::Ol(e) => e.inert,
            Self::P(e) => e.inert,
            Self::Pre(e) => e.inert,
            Self::Ul(e) => e.inert,
            Self::A(e) => e.inert,
            Self::Abbr(e) => e.inert,
            Self::B(e) => e.inert,
            Self::Bdi(e) => e.inert,
            Self::Bdo(e) => e.inert,
            Self::Br(e) => e.inert,
            Self::Cite(e) => e.inert,
            Self::Code(e) => e.inert,
            Self::Data(e) => e.inert,
            Self::Dfn(e) => e.inert,
            Self::Em(e) => e.inert,
            Self::I(e) => e.inert,
            Self::Kbd(e) => e.inert,
            Self::Mark(e) => e.inert,
            Self::Q(e) => e.inert,
            Self::Rp(e) => e.inert,
            Self::Rt(e) => e.inert,
            Self::Ruby(e) => e.inert,
            Self::S(e) => e.inert,
            Self::Samp(e) => e.inert,
            Self::Small(e) => e.inert,
            Self::Span(e) => e.inert,
            Self::Strong(e) => e.inert,
            Self::Sub(e) => e.inert,
            Self::Sup(e) => e.inert,
            Self::Time(e) => e.inert,
            Self::U(e) => e.inert,
            Self::Var(e) => e.inert,
            Self::Wbr(e) => e.inert,
            Self::Area(e) => e.inert,
            Self::Audio(e) => e.inert,
            Self::Img(e) => e.inert,
            Self::Map(e) => e.inert,
            Self::Track(e) => e.inert,
            Self::Video(e) => e.inert,
            Self::Embed(e) => e.inert,
            Self::Iframe(e) => e.inert,
            Self::Object(e) => e.inert,
            Self::Picture(e) => e.inert,
            Self::Portal(e) => e.inert,
            Self::Source(e) => e.inert,
            Self::Canvas(e) => e.inert,
            Self::Noscript(e) => e.inert,
            Self::Script(e) => e.inert,
            Self::Del(e) => e.inert,
            Self::Ins(e) => e.inert,
            Self::Caption(e) => e.inert,
            Self::Col(e) => e.inert,
            Self::Colgroup(e) => e.inert,
            Self::Table(e) => e.inert,
            Self::Tbody(e) => e.inert,
            Self::Td(e) => e.inert,
            Self::Tfoot(e) => e.inert,
            Self::Th(e) => e.inert,
            Self::Thead(e) => e.inert,
            Self::Tr(e) => e.inert,
            Self::Button(e) => e.inert,
            Self::Datalist(e) => e.inert,
            Self::Fieldset(e) => e.inert,
            Self::Form(e) => e.inert,
            Self::Input(e) => e.inert,
            Self::Label(e) => e.inert,
            Self::Legend(e) => e.inert,
            Self::Meter(e) => e.inert,
            Self::Optgroup(e) => e.inert,
            Self::Option(e) => e.inert,
            Self::Output(e) => e.inert,
            Self::Progress(e) => e.inert,
            Self::Select(e) => e.inert,
            Self::Textarea(e) => e.inert,
            Self::Details(e) => e.inert,
            Self::Dialog(e) => e.inert,
            Self::Summary(e) => e.inert,
            Self::Slot(e) => e.inert,
            Self::Template(e) => e.inert,
            Self::Acronym(e) => e.inert,
            Self::Applet(e) => e.inert,
            Self::Bgsound(e) => e.inert,
            Self::Big(e) => e.inert,
            Self::Blink(e) => e.inert,
            Self::Center(e) => e.inert,
            Self::Content(e) => e.inert,
            Self::Dir(e) => e.inert,
            Self::Font(e) => e.inert,
            Self::Frame(e) => e.inert,
            Self::Frameset(e) => e.inert,
            Self::Image(e) => e.inert,
            Self::Keygen(e) => e.inert,
            Self::Marquee(e) => e.inert,
            Self::Menuitem(e) => e.inert,
            Self::Nobr(e) => e.inert,
            Self::Noembed(e) => e.inert,
            Self::Noframes(e) => e.inert,
            Self::Param(e) => e.inert,
            Self::Plaintext(e) => e.inert,
            Self::Rb(e) => e.inert,
            Self::Rtc(e) => e.inert,
            Self::Spacer(e) => e.inert,
            Self::Strike(e) => e.inert,
            Self::Tt(e) => e.inert,
            Self::Xmp(e) => e.inert,
            Self::Unknown(e) => e.inert,
        }
    }

    ///     <p>Provides a hint to browsers about the type of virtual keyboard configuration to use when editing this element or its contents. Used primarily on <a href="/en-US/docs/Web/HTML/Element/input"><code>&lt;input&gt;</code></a> elements, but is usable on any element while in <a href="#contenteditable"><code>contenteditable</code></a> mode.</p>
    ///   

    pub fn inputmode(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.inputmode,
            Self::Base(e) => e.inputmode,
            Self::Head(e) => e.inputmode,
            Self::Link(e) => e.inputmode,
            Self::Meta(e) => e.inputmode,
            Self::Style(e) => e.inputmode,
            Self::Title(e) => e.inputmode,
            Self::Body(e) => e.inputmode,
            Self::Address(e) => e.inputmode,
            Self::Article(e) => e.inputmode,
            Self::Aside(e) => e.inputmode,
            Self::Footer(e) => e.inputmode,
            Self::Header(e) => e.inputmode,
            Self::Hgroup(e) => e.inputmode,
            Self::Main(e) => e.inputmode,
            Self::Nav(e) => e.inputmode,
            Self::Section(e) => e.inputmode,
            Self::Blockquote(e) => e.inputmode,
            Self::Dd(e) => e.inputmode,
            Self::Div(e) => e.inputmode,
            Self::Dl(e) => e.inputmode,
            Self::Dt(e) => e.inputmode,
            Self::Figcaption(e) => e.inputmode,
            Self::Figure(e) => e.inputmode,
            Self::Hr(e) => e.inputmode,
            Self::Li(e) => e.inputmode,
            Self::Menu(e) => e.inputmode,
            Self::Ol(e) => e.inputmode,
            Self::P(e) => e.inputmode,
            Self::Pre(e) => e.inputmode,
            Self::Ul(e) => e.inputmode,
            Self::A(e) => e.inputmode,
            Self::Abbr(e) => e.inputmode,
            Self::B(e) => e.inputmode,
            Self::Bdi(e) => e.inputmode,
            Self::Bdo(e) => e.inputmode,
            Self::Br(e) => e.inputmode,
            Self::Cite(e) => e.inputmode,
            Self::Code(e) => e.inputmode,
            Self::Data(e) => e.inputmode,
            Self::Dfn(e) => e.inputmode,
            Self::Em(e) => e.inputmode,
            Self::I(e) => e.inputmode,
            Self::Kbd(e) => e.inputmode,
            Self::Mark(e) => e.inputmode,
            Self::Q(e) => e.inputmode,
            Self::Rp(e) => e.inputmode,
            Self::Rt(e) => e.inputmode,
            Self::Ruby(e) => e.inputmode,
            Self::S(e) => e.inputmode,
            Self::Samp(e) => e.inputmode,
            Self::Small(e) => e.inputmode,
            Self::Span(e) => e.inputmode,
            Self::Strong(e) => e.inputmode,
            Self::Sub(e) => e.inputmode,
            Self::Sup(e) => e.inputmode,
            Self::Time(e) => e.inputmode,
            Self::U(e) => e.inputmode,
            Self::Var(e) => e.inputmode,
            Self::Wbr(e) => e.inputmode,
            Self::Area(e) => e.inputmode,
            Self::Audio(e) => e.inputmode,
            Self::Img(e) => e.inputmode,
            Self::Map(e) => e.inputmode,
            Self::Track(e) => e.inputmode,
            Self::Video(e) => e.inputmode,
            Self::Embed(e) => e.inputmode,
            Self::Iframe(e) => e.inputmode,
            Self::Object(e) => e.inputmode,
            Self::Picture(e) => e.inputmode,
            Self::Portal(e) => e.inputmode,
            Self::Source(e) => e.inputmode,
            Self::Canvas(e) => e.inputmode,
            Self::Noscript(e) => e.inputmode,
            Self::Script(e) => e.inputmode,
            Self::Del(e) => e.inputmode,
            Self::Ins(e) => e.inputmode,
            Self::Caption(e) => e.inputmode,
            Self::Col(e) => e.inputmode,
            Self::Colgroup(e) => e.inputmode,
            Self::Table(e) => e.inputmode,
            Self::Tbody(e) => e.inputmode,
            Self::Td(e) => e.inputmode,
            Self::Tfoot(e) => e.inputmode,
            Self::Th(e) => e.inputmode,
            Self::Thead(e) => e.inputmode,
            Self::Tr(e) => e.inputmode,
            Self::Button(e) => e.inputmode,
            Self::Datalist(e) => e.inputmode,
            Self::Fieldset(e) => e.inputmode,
            Self::Form(e) => e.inputmode,
            Self::Input(e) => e.inputmode,
            Self::Label(e) => e.inputmode,
            Self::Legend(e) => e.inputmode,
            Self::Meter(e) => e.inputmode,
            Self::Optgroup(e) => e.inputmode,
            Self::Option(e) => e.inputmode,
            Self::Output(e) => e.inputmode,
            Self::Progress(e) => e.inputmode,
            Self::Select(e) => e.inputmode,
            Self::Textarea(e) => e.inputmode,
            Self::Details(e) => e.inputmode,
            Self::Dialog(e) => e.inputmode,
            Self::Summary(e) => e.inputmode,
            Self::Slot(e) => e.inputmode,
            Self::Template(e) => e.inputmode,
            Self::Acronym(e) => e.inputmode,
            Self::Applet(e) => e.inputmode,
            Self::Bgsound(e) => e.inputmode,
            Self::Big(e) => e.inputmode,
            Self::Blink(e) => e.inputmode,
            Self::Center(e) => e.inputmode,
            Self::Content(e) => e.inputmode,
            Self::Dir(e) => e.inputmode,
            Self::Font(e) => e.inputmode,
            Self::Frame(e) => e.inputmode,
            Self::Frameset(e) => e.inputmode,
            Self::Image(e) => e.inputmode,
            Self::Keygen(e) => e.inputmode,
            Self::Marquee(e) => e.inputmode,
            Self::Menuitem(e) => e.inputmode,
            Self::Nobr(e) => e.inputmode,
            Self::Noembed(e) => e.inputmode,
            Self::Noframes(e) => e.inputmode,
            Self::Param(e) => e.inputmode,
            Self::Plaintext(e) => e.inputmode,
            Self::Rb(e) => e.inputmode,
            Self::Rtc(e) => e.inputmode,
            Self::Spacer(e) => e.inputmode,
            Self::Strike(e) => e.inputmode,
            Self::Tt(e) => e.inputmode,
            Self::Xmp(e) => e.inputmode,
            Self::Unknown(e) => e.inputmode,
        }
    }

    ///     <p>Allows you to specify that a standard HTML element should behave like a registered custom built-in element (see <a href="/en-US/docs/Web/API/Web_components/Using_custom_elements">Using custom elements</a> for more details).</p>
    ///   

    pub fn is(&self) -> core::option::Option<&'life str> {
        match self {
            Self::Html(e) => e.is,
            Self::Base(e) => e.is,
            Self::Head(e) => e.is,
            Self::Link(e) => e.is,
            Self::Meta(e) => e.is,
            Self::Style(e) => e.is,
            Self::Title(e) => e.is,
            Self::Body(e) => e.is,
            Self::Address(e) => e.is,
            Self::Article(e) => e.is,
            Self::Aside(e) => e.is,
            Self::Footer(e) => e.is,
            Self::Header(e) => e.is,
            Self::Hgroup(e) => e.is,
            Self::Main(e) => e.is,
            Self::Nav(e) => e.is,
            Self::Section(e) => e.is,
            Self::Blockquote(e) => e.is,
            Self::Dd(e) => e.is,
            Self::Div(e) => e.is,
            Self::Dl(e) => e.is,
            Self::Dt(e) => e.is,
            Self::Figcaption(e) => e.is,
            Self::Figure(e) => e.is,
            Self::Hr(e) => e.is,
            Self::Li(e) => e.is,
            Self::Menu(e) => e.is,
            Self::Ol(e) => e.is,
            Self::P(e) => e.is,
            Self::Pre(e) => e.is,
            Self::Ul(e) => e.is,
            Self::A(e) => e.is,
            Self::Abbr(e) => e.is,
            Self::B(e) => e.is,
            Self::Bdi(e) => e.is,
            Self::Bdo(e) => e.is,
            Self::Br(e) => e.is,
            Self::Cite(e) => e.is,
            Self::Code(e) => e.is,
            Self::Data(e) => e.is,
            Self::Dfn(e) => e.is,
            Self::Em(e) => e.is,
            Self::I(e) => e.is,
            Self::Kbd(e) => e.is,
            Self::Mark(e) => e.is,
            Self::Q(e) => e.is,
            Self::Rp(e) => e.is,
            Self::Rt(e) => e.is,
            Self::Ruby(e) => e.is,
            Self::S(e) => e.is,
            Self::Samp(e) => e.is,
            Self::Small(e) => e.is,
            Self::Span(e) => e.is,
            Self::Strong(e) => e.is,
            Self::Sub(e) => e.is,
            Self::Sup(e) => e.is,
            Self::Time(e) => e.is,
            Self::U(e) => e.is,
            Self::Var(e) => e.is,
            Self::Wbr(e) => e.is,
            Self::Area(e) => e.is,
            Self::Audio(e) => e.is,
            Self::Img(e) => e.is,
            Self::Map(e) => e.is,
            Self::Track(e) => e.is,
            Self::Video(e) => e.is,
            Self::Embed(e) => e.is,
            Self::Iframe(e) => e.is,
            Self::Object(e) => e.is,
            Self::Picture(e) => e.is,
            Self::Portal(e) => e.is,
            Self::Source(e) => e.is,
            Self::Canvas(e) => e.is,
            Self::Noscript(e) => e.is,
            Self::Script(e) => e.is,
            Self::Del(e) => e.is,
            Self::Ins(e) => e.is,
            Self::Caption(e) => e.is,
            Self::Col(e) => e.is,
            Self::Colgroup(e) => e.is,
            Self::Table(e) => e.is,
            Self::Tbody(e) => e.is,
            Self::Td(e) => e.is,
            Self::Tfoot(e) => e.is,
            Self::Th(e) => e.is,
            Self::Thead(e) => e.is,
            Self::Tr(e) => e.is,
            Self::Button(e) => e.is,
            Self::Datalist(e) => e.is,
            Self::Fieldset(e) => e.is,
            Self::Form(e) => e.is,
            Self::Input(e) => e.is,
            Self::Label(e) => e.is,
            Self::Legend(e) => e.is,
            Self::Meter(e) => e.is,
            Self::Optgroup(e) => e.is,
            Self::Option(e) => e.is,
            Self::Output(e) => e.is,
            Self::Progress(e) => e.is,
            Self::Select(e) => e.is,
            Self::Textarea(e) => e.is,
            Self::Details(e) => e.is,
            Self::Dialog(e) => e.is,
            Self::Summary(e) => e.is,
            Self::Slot(e) => e.is,
            Self::Template(e) => e.is,
            Self::Acronym(e) => e.is,
            Self::Applet(e) => e.is,
            Self::Bgsound(e) => e.is,
            Self::Big(e) => e.is,
            Self::Blink(e) => e.is,
            Self::Center(e) => e.is,
            Self::Content(e) => e.is,
            Self::Dir(e) => e.is,
            Self::Font(e) => e.is,
            Self::Frame(e) => e.is,
            Self::Frameset(e) => e.is,
            Self::Image(e) => e.is,
            Self::Keygen(e) => e.is,
            Self::Marquee(e) => e.is,
            Self::Menuitem(e) => e.is,
            Self::Nobr(e) => e.is,
            Self::Noembed(e) => e.is,
            Self::Noframes(e) => e.is,
            Self::Param(e) => e.is,
            Self::Plaintext(e) => e.is,
            Self::Rb(e) => e.is,
            Self::Rtc(e) => e.is,
            Self::Spacer(e) => e.is,
            Self::Strike(e) => e.is,
            Self::Tt(e) => e.is,
            Self::Xmp(e) => e.is,
            Self::Unknown(e) => e.is,
        }
    }
}
#[allow(deprecated)]
impl<'life> Default for Element<'life> {
    fn default() -> Self {
        Self::Unknown(Unknown::default())
    }
}
